{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5cbb886d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:39.390012Z",
     "iopub.status.busy": "2025-04-27T16:26:39.389676Z",
     "iopub.status.idle": "2025-04-27T16:26:41.161021Z",
     "shell.execute_reply": "2025-04-27T16:26:41.159833Z"
    },
    "papermill": {
     "duration": 1.781642,
     "end_time": "2025-04-27T16:26:41.162991",
     "exception": false,
     "start_time": "2025-04-27T16:26:39.381349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/phishing-site-urls/phishing_site_urls.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "902b8814",
   "metadata": {
    "papermill": {
     "duration": 0.005682,
     "end_time": "2025-04-27T16:26:41.179947",
     "exception": false,
     "start_time": "2025-04-27T16:26:41.174265",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Dataset Analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "180b2f76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:41.193961Z",
     "iopub.status.busy": "2025-04-27T16:26:41.193479Z",
     "iopub.status.idle": "2025-04-27T16:26:42.223127Z",
     "shell.execute_reply": "2025-04-27T16:26:42.222319Z"
    },
    "papermill": {
     "duration": 1.03783,
     "end_time": "2025-04-27T16:26:42.224720",
     "exception": false,
     "start_time": "2025-04-27T16:26:41.186890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3b8d4f4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:42.237375Z",
     "iopub.status.busy": "2025-04-27T16:26:42.237076Z",
     "iopub.status.idle": "2025-04-27T16:26:42.260188Z",
     "shell.execute_reply": "2025-04-27T16:26:42.259361Z"
    },
    "papermill": {
     "duration": 0.030847,
     "end_time": "2025-04-27T16:26:42.261550",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.230703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6de6493f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:42.274876Z",
     "iopub.status.busy": "2025-04-27T16:26:42.274504Z",
     "iopub.status.idle": "2025-04-27T16:26:42.282976Z",
     "shell.execute_reply": "2025-04-27T16:26:42.282056Z"
    },
    "papermill": {
     "duration": 0.016698,
     "end_time": "2025-04-27T16:26:42.284346",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.267648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1ce9c479",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:42.297312Z",
     "iopub.status.busy": "2025-04-27T16:26:42.297037Z",
     "iopub.status.idle": "2025-04-27T16:26:42.301589Z",
     "shell.execute_reply": "2025-04-27T16:26:42.300674Z"
    },
    "papermill": {
     "duration": 0.012351,
     "end_time": "2025-04-27T16:26:42.302894",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.290543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (549346, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset shape:\", df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1a9b2ccf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:42.317200Z",
     "iopub.status.busy": "2025-04-27T16:26:42.316426Z",
     "iopub.status.idle": "2025-04-27T16:26:42.323037Z",
     "shell.execute_reply": "2025-04-27T16:26:42.322214Z"
    },
    "papermill": {
     "duration": 0.01553,
     "end_time": "2025-04-27T16:26:42.324263",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.308733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['URL', 'Label'], dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ca221e35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:42.336660Z",
     "iopub.status.busy": "2025-04-27T16:26:42.336407Z",
     "iopub.status.idle": "2025-04-27T16:26:42.405684Z",
     "shell.execute_reply": "2025-04-27T16:26:42.404853Z"
    },
    "papermill": {
     "duration": 0.077142,
     "end_time": "2025-04-27T16:26:42.407288",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.330146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "782da13f",
   "metadata": {
    "papermill": {
     "duration": 0.005949,
     "end_time": "2025-04-27T16:26:42.419598",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.413649",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "62da29bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:42.432717Z",
     "iopub.status.busy": "2025-04-27T16:26:42.432383Z",
     "iopub.status.idle": "2025-04-27T16:26:43.712335Z",
     "shell.execute_reply": "2025-04-27T16:26:43.711352Z"
    },
    "papermill": {
     "duration": 1.288801,
     "end_time": "2025-04-27T16:26:43.714281",
     "exception": false,
     "start_time": "2025-04-27T16:26:42.425480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "00482286",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:43.728040Z",
     "iopub.status.busy": "2025-04-27T16:26:43.727576Z",
     "iopub.status.idle": "2025-04-27T16:26:43.837495Z",
     "shell.execute_reply": "2025-04-27T16:26:43.836616Z"
    },
    "papermill": {
     "duration": 0.118495,
     "end_time": "2025-04-27T16:26:43.839120",
     "exception": false,
     "start_time": "2025-04-27T16:26:43.720625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  label_encoded\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad              0\n",
       "1       www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad              0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad              0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad              0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad              0\n",
       "...                                                   ...   ...            ...\n",
       "549341                                    23.227.196.215/   bad              0\n",
       "549342                                 apple-checker.org/   bad              0\n",
       "549343                                  apple-iclods.org/   bad              0\n",
       "549344                                 apple-uptoday.org/   bad              0\n",
       "549345                                  apple-search.info   bad              0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode labels: 'good' → 1, 'bad' → 0\n",
    "df['label_encoded'] = LabelEncoder().fit_transform(df['Label'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7e994cb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:43.853731Z",
     "iopub.status.busy": "2025-04-27T16:26:43.853030Z",
     "iopub.status.idle": "2025-04-27T16:26:44.163557Z",
     "shell.execute_reply": "2025-04-27T16:26:44.162850Z"
    },
    "papermill": {
     "duration": 0.319055,
     "end_time": "2025-04-27T16:26:44.165043",
     "exception": false,
     "start_time": "2025-04-27T16:26:43.845988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  label_encoded\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad              0\n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad              0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad              0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad              0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad              0\n",
       "...                                                   ...   ...            ...\n",
       "549341                                    23.227.196.215/   bad              0\n",
       "549342                                 apple-checker.org/   bad              0\n",
       "549343                                  apple-iclods.org/   bad              0\n",
       "549344                                 apple-uptoday.org/   bad              0\n",
       "549345                                  apple-search.info   bad              0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove 'www.' from URLs\n",
    "df['URL'] = df['URL'].str.replace(r'^www\\.', '', regex=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3bff1783",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:44.179126Z",
     "iopub.status.busy": "2025-04-27T16:26:44.178829Z",
     "iopub.status.idle": "2025-04-27T16:26:44.402981Z",
     "shell.execute_reply": "2025-04-27T16:26:44.401983Z"
    },
    "papermill": {
     "duration": 0.233045,
     "end_time": "2025-04-27T16:26:44.404701",
     "exception": false,
     "start_time": "2025-04-27T16:26:44.171656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "      <th>url_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "...                                                   ...   ...   \n",
       "549341                                    23.227.196.215/   bad   \n",
       "549342                                 apple-checker.org/   bad   \n",
       "549343                                  apple-iclods.org/   bad   \n",
       "549344                                 apple-uptoday.org/   bad   \n",
       "549345                                  apple-search.info   bad   \n",
       "\n",
       "        label_encoded  url_length  \n",
       "0                   0         225  \n",
       "1                   0          77  \n",
       "2                   0         177  \n",
       "3                   0          60  \n",
       "4                   0         116  \n",
       "...               ...         ...  \n",
       "549341              0          15  \n",
       "549342              0          18  \n",
       "549343              0          17  \n",
       "549344              0          18  \n",
       "549345              0          17  \n",
       "\n",
       "[549346 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 1: Length of URL\n",
    "df['url_length'] = df['URL'].apply(lambda x: len(str(x)))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c32538b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:44.419717Z",
     "iopub.status.busy": "2025-04-27T16:26:44.419386Z",
     "iopub.status.idle": "2025-04-27T16:26:45.575709Z",
     "shell.execute_reply": "2025-04-27T16:26:45.574634Z"
    },
    "papermill": {
     "duration": 1.165786,
     "end_time": "2025-04-27T16:26:45.577512",
     "exception": false,
     "start_time": "2025-04-27T16:26:44.411726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 2: Use of IP address\n",
    "def has_ip(url):\n",
    "    return 1 if re.search(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', url) else 0\n",
    "\n",
    "df['use_of_ip'] = df['URL'].apply(has_ip)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ae6efd96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:45.596935Z",
     "iopub.status.busy": "2025-04-27T16:26:45.596095Z",
     "iopub.status.idle": "2025-04-27T16:26:46.071531Z",
     "shell.execute_reply": "2025-04-27T16:26:46.070732Z"
    },
    "papermill": {
     "duration": 0.486885,
     "end_time": "2025-04-27T16:26:46.073076",
     "exception": false,
     "start_time": "2025-04-27T16:26:45.586191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 3: Abnormal URL (absence of hostname)\n",
    "def abnormal_url(url):\n",
    "    hostname = re.findall(r\"https?://([^/]+)\", url)\n",
    "    return 1 if not hostname else 0\n",
    "\n",
    "df['abnormal_url'] = df['URL'].apply(abnormal_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "405afd41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:46.088613Z",
     "iopub.status.busy": "2025-04-27T16:26:46.088307Z",
     "iopub.status.idle": "2025-04-27T16:26:49.579545Z",
     "shell.execute_reply": "2025-04-27T16:26:49.578831Z"
    },
    "papermill": {
     "duration": 3.500719,
     "end_time": "2025-04-27T16:26:49.581213",
     "exception": false,
     "start_time": "2025-04-27T16:26:46.080494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 4: Count of suspicious special characters\n",
    "special_chars = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "for char in special_chars:\n",
    "    df[f'count_{char}'] = df['URL'].apply(lambda x: x.count(char))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4bfba398",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:49.596727Z",
     "iopub.status.busy": "2025-04-27T16:26:49.596439Z",
     "iopub.status.idle": "2025-04-27T16:26:53.664999Z",
     "shell.execute_reply": "2025-04-27T16:26:53.664001Z"
    },
    "papermill": {
     "duration": 4.078155,
     "end_time": "2025-04-27T16:26:53.666659",
     "exception": false,
     "start_time": "2025-04-27T16:26:49.588504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "      <th>url_length</th>\n",
       "      <th>use_of_ip</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>count_@</th>\n",
       "      <th>count_?</th>\n",
       "      <th>count_-</th>\n",
       "      <th>count_=</th>\n",
       "      <th>...</th>\n",
       "      <th>count_#</th>\n",
       "      <th>count_%</th>\n",
       "      <th>count_+</th>\n",
       "      <th>count_$</th>\n",
       "      <th>count_!</th>\n",
       "      <th>count_*</th>\n",
       "      <th>count_,</th>\n",
       "      <th>count_//</th>\n",
       "      <th>digit_count</th>\n",
       "      <th>letter_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "...                                                   ...   ...   \n",
       "549341                                    23.227.196.215/   bad   \n",
       "549342                                 apple-checker.org/   bad   \n",
       "549343                                  apple-iclods.org/   bad   \n",
       "549344                                 apple-uptoday.org/   bad   \n",
       "549345                                  apple-search.info   bad   \n",
       "\n",
       "        label_encoded  url_length  use_of_ip  abnormal_url  count_@  count_?  \\\n",
       "0                   0         225          0             1        0        1   \n",
       "1                   0          77          0             1        0        0   \n",
       "2                   0         177          0             1        0        0   \n",
       "3                   0          60          0             1        0        0   \n",
       "4                   0         116          0             1        0        1   \n",
       "...               ...         ...        ...           ...      ...      ...   \n",
       "549341              0          15          1             1        0        0   \n",
       "549342              0          18          0             1        0        0   \n",
       "549343              0          17          0             1        0        0   \n",
       "549344              0          18          0             1        0        0   \n",
       "549345              0          17          0             1        0        0   \n",
       "\n",
       "        count_-  count_=  ...  count_#  count_%  count_+  count_$  count_!  \\\n",
       "0             4        4  ...        0        0        0        0        0   \n",
       "1             2        2  ...        0        0        0        0        0   \n",
       "2             1        0  ...        0        0        0        0        0   \n",
       "3             0        0  ...        0        0        0        0        0   \n",
       "4             1        0  ...        0        0        0        0        0   \n",
       "...         ...      ...  ...      ...      ...      ...      ...      ...   \n",
       "549341        0        0  ...        0        0        0        0        0   \n",
       "549342        1        0  ...        0        0        0        0        0   \n",
       "549343        1        0  ...        0        0        0        0        0   \n",
       "549344        1        0  ...        0        0        0        0        0   \n",
       "549345        1        0  ...        0        0        0        0        0   \n",
       "\n",
       "        count_*  count_,  count_//  digit_count  letter_count  \n",
       "0             0        0         0           58           135  \n",
       "1             0        0         0            1            62  \n",
       "2             0        0         0           47           111  \n",
       "3             0        0         0            0            52  \n",
       "4             0        0         1           21            82  \n",
       "...         ...      ...       ...          ...           ...  \n",
       "549341        0        0         0           11             0  \n",
       "549342        0        0         0            0            15  \n",
       "549343        0        0         0            0            14  \n",
       "549344        0        0         0            0            15  \n",
       "549345        0        0         0            0            15  \n",
       "\n",
       "[549346 rows x 21 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 5: Count digits and letters\n",
    "df['digit_count'] = df['URL'].apply(lambda x: sum(c.isdigit() for c in x))\n",
    "df['letter_count'] = df['URL'].apply(lambda x: sum(c.isalpha() for c in x))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9633cade",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:53.682661Z",
     "iopub.status.busy": "2025-04-27T16:26:53.682365Z",
     "iopub.status.idle": "2025-04-27T16:26:54.899498Z",
     "shell.execute_reply": "2025-04-27T16:26:54.898779Z"
    },
    "papermill": {
     "duration": 1.226838,
     "end_time": "2025-04-27T16:26:54.901048",
     "exception": false,
     "start_time": "2025-04-27T16:26:53.674210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 6: Shortening services detection\n",
    "shorteners = r\"bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc\"\n",
    "df['shortening_service'] = df['URL'].apply(lambda x: 1 if re.search(shorteners, x) else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fcf31594",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:54.917128Z",
     "iopub.status.busy": "2025-04-27T16:26:54.916842Z",
     "iopub.status.idle": "2025-04-27T16:26:54.988970Z",
     "shell.execute_reply": "2025-04-27T16:26:54.988206Z"
    },
    "papermill": {
     "duration": 0.081922,
     "end_time": "2025-04-27T16:26:54.990566",
     "exception": false,
     "start_time": "2025-04-27T16:26:54.908644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Final feature matrix (X) and label vector (y)\n",
    "X = df.drop(columns=['URL', 'Label', 'label_encoded'])\n",
    "y = df['label_encoded']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ecfcbd67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:55.006149Z",
     "iopub.status.busy": "2025-04-27T16:26:55.005874Z",
     "iopub.status.idle": "2025-04-27T16:26:58.452553Z",
     "shell.execute_reply": "2025-04-27T16:26:58.451642Z"
    },
    "papermill": {
     "duration": 3.456042,
     "end_time": "2025-04-27T16:26:58.453900",
     "exception": false,
     "start_time": "2025-04-27T16:26:54.997858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Preprocessed model is ready for use.\n"
     ]
    }
   ],
   "source": [
    "# Save cleaned version for inspection or modeling\n",
    "df.drop(columns=['Label']).to_csv('/kaggle/working/phishing_processed.csv', index=False)\n",
    "\n",
    "print(\" Preprocessed model is ready for use.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8171edc4",
   "metadata": {
    "papermill": {
     "duration": 0.006653,
     "end_time": "2025-04-27T16:26:58.467649",
     "exception": false,
     "start_time": "2025-04-27T16:26:58.460996",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Development**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1859ed1",
   "metadata": {
    "papermill": {
     "duration": 0.006599,
     "end_time": "2025-04-27T16:26:58.480985",
     "exception": false,
     "start_time": "2025-04-27T16:26:58.474386",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**CNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8b157816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:26:58.496864Z",
     "iopub.status.busy": "2025-04-27T16:26:58.496554Z",
     "iopub.status.idle": "2025-04-27T16:34:36.837623Z",
     "shell.execute_reply": "2025-04-27T16:34:36.836714Z"
    },
    "papermill": {
     "duration": 458.451287,
     "end_time": "2025-04-27T16:34:36.939209",
     "exception": false,
     "start_time": "2025-04-27T16:26:58.487922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-27 16:27:00.725454: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745771220.940186      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745771221.003683      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-27 16:27:27.177977: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 54ms/step - accuracy: 0.8783 - loss: 0.2887 - val_accuracy: 0.9433 - val_loss: 0.1529\n",
      "Epoch 2/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 54ms/step - accuracy: 0.9559 - loss: 0.1232 - val_accuracy: 0.9587 - val_loss: 0.1128\n",
      "Epoch 3/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 54ms/step - accuracy: 0.9619 - loss: 0.1072 - val_accuracy: 0.9613 - val_loss: 0.1044\n",
      "Epoch 4/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 53ms/step - accuracy: 0.9663 - loss: 0.0940 - val_accuracy: 0.9645 - val_loss: 0.0999\n",
      "Epoch 5/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 54ms/step - accuracy: 0.9679 - loss: 0.0906 - val_accuracy: 0.9658 - val_loss: 0.0947\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 3ms/step\n",
      "Accuracy: 0.9660234822972604\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.96      0.92      0.94     31285\n",
      "  Legitimate       0.97      0.98      0.98     78585\n",
      "\n",
      "    accuracy                           0.97    109870\n",
      "   macro avg       0.96      0.95      0.96    109870\n",
      "weighted avg       0.97      0.97      0.97    109870\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "['cnn_tokenizer.pkl']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import joblib\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "# Load and prepare dataset\n",
    "df = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')\n",
    "df['label_encoded'] = LabelEncoder().fit_transform(df['Label'])\n",
    "\n",
    "# Tokenizer: char-level\n",
    "tokenizer = Tokenizer(char_level=True, oov_token='OOV')\n",
    "tokenizer.fit_on_texts(df['URL'])\n",
    "\n",
    "# Convert URLs to padded sequences\n",
    "sequences = tokenizer.texts_to_sequences(df['URL'])\n",
    "max_len = 200\n",
    "X = pad_sequences(sequences, maxlen=max_len, padding='post', truncating='post')\n",
    "y = df['label_encoded'].values\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "# Define CNN model\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "\n",
    "cnn_model = Sequential([\n",
    "    Embedding(input_dim=vocab_size, output_dim=32, input_length=max_len),\n",
    "    Conv1D(64, kernel_size=5, activation='relu'),\n",
    "    GlobalMaxPooling1D(),\n",
    "    Dense(32, activation='relu'),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "cnn_model.build(input_shape=(None, max_len))\n",
    "cnn_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "cnn_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=5,\n",
    "    batch_size=256,\n",
    "    validation_split=0.1,\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Predict\n",
    "y_pred_cnn = (cnn_model.predict(X_test) > 0.5).astype(int)\n",
    "\n",
    "# Evaluate\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_cnn))\n",
    "print(classification_report(y_test, y_pred_cnn, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred_cnn)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=[\"Phishing\", \"Legitimate\"],\n",
    "            yticklabels=[\"Phishing\", \"Legitimate\"])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('CNN Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Save model and tokenizer\n",
    "cnn_model.save('cnn_model.h5')\n",
    "joblib.dump(tokenizer, 'cnn_tokenizer.pkl')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "540faae5",
   "metadata": {
    "papermill": {
     "duration": 0.361602,
     "end_time": "2025-04-27T16:34:37.745316",
     "exception": false,
     "start_time": "2025-04-27T16:34:37.383714",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**SVM**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b4f975d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:34:38.516035Z",
     "iopub.status.busy": "2025-04-27T16:34:38.515686Z",
     "iopub.status.idle": "2025-04-27T16:46:40.545362Z",
     "shell.execute_reply": "2025-04-27T16:46:40.544469Z"
    },
    "papermill": {
     "duration": 722.455373,
     "end_time": "2025-04-27T16:46:40.546807",
     "exception": false,
     "start_time": "2025-04-27T16:34:38.091434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10%] Loading preprocessed dataset...\n",
      "[20%] Sampling 50K records (25K per class)...\n",
      "[30%] Selecting feature set...\n",
      "[40%] Splitting train/test sets...\n",
      "[50%] Scaling features...\n",
      "[70%] Tuning RBF-SVM hyperparameters...\n",
      " C=0.1, gamma=0.01 → F1 Score: 0.5820\n",
      " C=0.1, gamma=0.1 → F1 Score: 0.6178\n",
      " C=0.1, gamma=1 → F1 Score: 0.6959\n",
      " C=1, gamma=0.01 → F1 Score: 0.5832\n",
      " C=1, gamma=0.1 → F1 Score: 0.6427\n",
      " C=1, gamma=1 → F1 Score: 0.7159\n",
      " C=5, gamma=0.01 → F1 Score: 0.5862\n",
      " C=5, gamma=0.1 → F1 Score: 0.6576\n",
      " C=5, gamma=1 → F1 Score: 0.7194\n",
      "[80%] Best Params: {'C': 5, 'gamma': 1} | Macro F1 Score: 0.7194\n",
      "[90%] Final Evaluation...\n",
      "Accuracy: 0.7257\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.82      0.58      0.68      5000\n",
      "  Legitimate       0.67      0.88      0.76      5000\n",
      "\n",
      "    accuracy                           0.73     10000\n",
      "   macro avg       0.75      0.73      0.72     10000\n",
      "weighted avg       0.75      0.73      0.72     10000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Saving RBF-SVM model and scaler...\n",
      "Model and scaler saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n",
    "\n",
    "print(\"[10%] Loading preprocessed dataset...\")\n",
    "df = pd.read_csv('/kaggle/working/phishing_processed.csv')\n",
    "\n",
    "print(\"[20%] Sampling 50K records (25K per class)...\")\n",
    "df_sampled = df.groupby('label_encoded', group_keys=False).apply(\n",
    "    lambda x: x.sample(25000, random_state=42)\n",
    ").reset_index(drop=True)\n",
    "\n",
    "\n",
    "print(\"[30%] Selecting feature set...\")\n",
    "features = [\n",
    "    'url_length', 'use_of_ip', 'abnormal_url',\n",
    "    'digit_count', 'letter_count', 'shortening_service',\n",
    "    'count_@', 'count_?', 'count_-', 'count_=', 'count_//'\n",
    "]\n",
    "X = df_sampled[features]\n",
    "y = df_sampled['label_encoded']\n",
    "\n",
    "print(\"[40%] Splitting train/test sets...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "print(\"[50%] Scaling features...\")\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Hyperparameter grid\n",
    "C_values = [0.1, 1, 5]\n",
    "gamma_values = [0.01, 0.1, 1]\n",
    "\n",
    "print(\"[70%] Tuning RBF-SVM hyperparameters...\")\n",
    "best_score = 0\n",
    "best_model = None\n",
    "best_params = {}\n",
    "\n",
    "for C in C_values:\n",
    "    for gamma in gamma_values:\n",
    "        model = SVC(kernel='rbf', C=C, gamma=gamma, class_weight='balanced')\n",
    "        model.fit(X_train_scaled, y_train)\n",
    "        y_pred = model.predict(X_test_scaled)\n",
    "        score = f1_score(y_test, y_pred, average='macro')\n",
    "\n",
    "        print(f\" C={C}, gamma={gamma} → F1 Score: {score:.4f}\")\n",
    "\n",
    "        if score > best_score:\n",
    "            best_score = score\n",
    "            best_model = model\n",
    "            best_params = {'C': C, 'gamma': gamma}\n",
    "\n",
    "print(f\"[80%] Best Params: {best_params} | Macro F1 Score: {best_score:.4f}\")\n",
    "\n",
    "# Final prediction\n",
    "svm_model = best_model\n",
    "y_pred_svm = svm_model.predict(X_test_scaled)\n",
    "\n",
    "print(\"[90%] Final Evaluation...\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_svm, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_svm)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=[\"Phishing\", \"Legitimate\"],\n",
    "            yticklabels=[\"Phishing\", \"Legitimate\"])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('RBF-SVM Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "print(\"[100%] Saving RBF-SVM model and scaler...\")\n",
    "joblib.dump(svm_model, 'svm_rbf_model.pkl')\n",
    "joblib.dump(scaler, 'svm_rbf_scaler.pkl')\n",
    "print(\"Model and scaler saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d878efb6",
   "metadata": {
    "papermill": {
     "duration": 0.360002,
     "end_time": "2025-04-27T16:46:41.337294",
     "exception": false,
     "start_time": "2025-04-27T16:46:40.977292",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MLP**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "97e55d09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:46:42.074194Z",
     "iopub.status.busy": "2025-04-27T16:46:42.073813Z",
     "iopub.status.idle": "2025-04-27T16:51:46.238811Z",
     "shell.execute_reply": "2025-04-27T16:51:46.237814Z"
    },
    "papermill": {
     "duration": 304.520249,
     "end_time": "2025-04-27T16:51:46.240242",
     "exception": false,
     "start_time": "2025-04-27T16:46:41.719993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10%] Loading preprocessed dataset...\n",
      "[20%] Feature engineering (advanced)...\n",
      "[40%] Creating full feature matrix and target vector...\n",
      "[50%] Dataset size: 549346 samples, 23 features\n",
      "[60%] Splitting full dataset (80% train / 20% test)...\n",
      "[70%] Scaling features...\n",
      "[80%] Building deeper regularized MLP model...\n",
      "[90%] Training MLP on full dataset (this may take ~2–5 mins)...\n",
      "Epoch 1/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 15ms/step - accuracy: 0.7341 - loss: 0.5478 - val_accuracy: 0.7976 - val_loss: 0.4374\n",
      "Epoch 2/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8049 - loss: 0.4402 - val_accuracy: 0.8137 - val_loss: 0.4112\n",
      "Epoch 3/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8153 - loss: 0.4196 - val_accuracy: 0.8194 - val_loss: 0.4012\n",
      "Epoch 4/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8220 - loss: 0.4065 - val_accuracy: 0.8274 - val_loss: 0.3874\n",
      "Epoch 5/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8285 - loss: 0.3948 - val_accuracy: 0.8308 - val_loss: 0.3813\n",
      "Epoch 6/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 14ms/step - accuracy: 0.8309 - loss: 0.3906 - val_accuracy: 0.8334 - val_loss: 0.3806\n",
      "Epoch 7/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8325 - loss: 0.3852 - val_accuracy: 0.8358 - val_loss: 0.3732\n",
      "Epoch 8/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8348 - loss: 0.3815 - val_accuracy: 0.8373 - val_loss: 0.3702\n",
      "Epoch 9/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8357 - loss: 0.3790 - val_accuracy: 0.8376 - val_loss: 0.3688\n",
      "Epoch 10/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8361 - loss: 0.3770 - val_accuracy: 0.8385 - val_loss: 0.3657\n",
      "Epoch 11/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8371 - loss: 0.3757 - val_accuracy: 0.8394 - val_loss: 0.3653\n",
      "Epoch 12/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8385 - loss: 0.3717 - val_accuracy: 0.8407 - val_loss: 0.3658\n",
      "Epoch 13/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8394 - loss: 0.3697 - val_accuracy: 0.8403 - val_loss: 0.3626\n",
      "Epoch 14/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8395 - loss: 0.3699 - val_accuracy: 0.8400 - val_loss: 0.3632\n",
      "Epoch 15/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8403 - loss: 0.3690 - val_accuracy: 0.8391 - val_loss: 0.3668\n",
      "Epoch 16/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8419 - loss: 0.3655 - val_accuracy: 0.8438 - val_loss: 0.3577\n",
      "Epoch 17/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8413 - loss: 0.3662 - val_accuracy: 0.8412 - val_loss: 0.3609\n",
      "Epoch 18/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8434 - loss: 0.3630 - val_accuracy: 0.8433 - val_loss: 0.3560\n",
      "Epoch 19/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8412 - loss: 0.3650 - val_accuracy: 0.8420 - val_loss: 0.3583\n",
      "Epoch 20/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 14ms/step - accuracy: 0.8427 - loss: 0.3630 - val_accuracy: 0.8422 - val_loss: 0.3587\n",
      "[95%] Evaluating on test set...\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1ms/step\n",
      "MLP Accuracy: 0.847965777737326\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.85      0.57      0.68     31285\n",
      "  Legitimate       0.85      0.96      0.90     78585\n",
      "\n",
      "    accuracy                           0.85    109870\n",
      "   macro avg       0.85      0.76      0.79    109870\n",
      "weighted avg       0.85      0.85      0.84    109870\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Saving full-trained MLP model and scaler...\n",
      "Full MLP model and scaler saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from urllib.parse import urlparse\n",
    "from scipy.stats import entropy\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "print(\"[10%] Loading preprocessed dataset...\")\n",
    "df = pd.read_csv('/kaggle/working/phishing_processed.csv')\n",
    "features_df = df.copy()\n",
    "\n",
    "print(\"[20%] Feature engineering (advanced)...\")\n",
    "\n",
    "def has_ip(url): return 1 if re.search(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', url) else 0\n",
    "def abnormal_url(url): return 1 if not re.findall(r\"https?://([^/]+)\", url) else 0\n",
    "def https_token(url): return 1 if 'https' in url.lower() else 0\n",
    "def subdomain_count(url): \n",
    "    try: return urlparse(url).hostname.count('.') - 1\n",
    "    except: return 0\n",
    "def tld_length(url): \n",
    "    try: return len(urlparse(url).hostname.split('.')[-1])\n",
    "    except: return 0\n",
    "def url_entropy(url):\n",
    "    prob = [url.count(c)/len(url) for c in set(url)]\n",
    "    return round(entropy(prob, base=2), 4)\n",
    "\n",
    "features_df['url_length'] = features_df['URL'].apply(len)\n",
    "features_df['use_of_ip'] = features_df['URL'].apply(has_ip)\n",
    "features_df['abnormal_url'] = features_df['URL'].apply(abnormal_url)\n",
    "features_df['https_token'] = features_df['URL'].apply(https_token)\n",
    "features_df['subdomain_count'] = features_df['URL'].apply(subdomain_count)\n",
    "features_df['tld_length'] = features_df['URL'].apply(tld_length)\n",
    "features_df['url_entropy'] = features_df['URL'].apply(url_entropy)\n",
    "\n",
    "for ch in ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']:\n",
    "    features_df[f'count_{ch}'] = features_df['URL'].apply(lambda x: x.count(ch))\n",
    "\n",
    "features_df['digit_count'] = features_df['URL'].apply(lambda x: sum(c.isdigit() for c in x))\n",
    "features_df['letter_count'] = features_df['URL'].apply(lambda x: sum(c.isalpha() for c in x))\n",
    "features_df['shortening_service'] = features_df['URL'].apply(lambda x: 1 if re.search(r\"bit\\.ly|tinyurl|t\\.co\", x) else 0)\n",
    "\n",
    "print(\"[40%] Creating full feature matrix and target vector...\")\n",
    "X = features_df.drop(columns=['URL', 'Label', 'label_encoded'], errors='ignore')\n",
    "y = features_df['label_encoded']\n",
    "\n",
    "print(f\"[50%] Dataset size: {X.shape[0]} samples, {X.shape[1]} features\")\n",
    "\n",
    "print(\"[60%] Splitting full dataset (80% train / 20% test)...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, stratify=y, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "print(\"[70%] Scaling features...\")\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "print(\"[80%] Building deeper regularized MLP model...\")\n",
    "mlp_model = Sequential([\n",
    "    Dense(256, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "mlp_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "print(\"[90%] Training MLP on full dataset (this may take ~2–5 mins)...\")\n",
    "mlp_model.fit(\n",
    "    X_train_scaled, y_train,\n",
    "    validation_split=0.1,\n",
    "    epochs=20,\n",
    "    batch_size=1024,\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "print(\"[95%] Evaluating on test set...\")\n",
    "y_pred_mlp = (mlp_model.predict(X_test_scaled) > 0.5).astype(int).flatten()\n",
    "\n",
    "print(\"MLP Accuracy:\", accuracy_score(y_test, y_pred_mlp))\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_mlp, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_mlp)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Phishing', 'Legitimate'],\n",
    "            yticklabels=['Phishing', 'Legitimate'])\n",
    "plt.title('MLP Confusion Matrix (100% Dataset)')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "print(\"[100%] Saving full-trained MLP model and scaler...\")\n",
    "mlp_model.save('mlp_full_model.h5')\n",
    "joblib.dump(scaler, 'mlp_full_scaler.pkl')\n",
    "print(\"Full MLP model and scaler saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08e9adfe",
   "metadata": {
    "papermill": {
     "duration": 0.453921,
     "end_time": "2025-04-27T16:51:47.232080",
     "exception": false,
     "start_time": "2025-04-27T16:51:46.778159",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e5b8cea2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:51:48.222164Z",
     "iopub.status.busy": "2025-04-27T16:51:48.221794Z",
     "iopub.status.idle": "2025-04-27T16:51:48.628232Z",
     "shell.execute_reply": "2025-04-27T16:51:48.627189Z"
    },
    "papermill": {
     "duration": 0.953427,
     "end_time": "2025-04-27T16:51:48.629928",
     "exception": false,
     "start_time": "2025-04-27T16:51:47.676501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Best Weights (CNN, SVM, MLP): (0.6, 0.1, 0.30000000000000004)\n",
      "Weighted Ensemble Accuracy: 0.9675\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.96      0.92      0.94      2859\n",
      "  Legitimate       0.97      0.98      0.98      7141\n",
      "\n",
      "    accuracy                           0.97     10000\n",
      "   macro avg       0.97      0.95      0.96     10000\n",
      "weighted avg       0.97      0.97      0.97     10000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Ensemble model saved as 'ensemble_model.pkl'\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "\n",
    "# Step 1: Ensuring all predictions and test labels are trimmed to the same length\n",
    "min_len = min(len(y_pred_cnn), len(y_pred_svm), len(y_pred_mlp))\n",
    "y_pred_cnn_trimmed = y_pred_cnn[:min_len].flatten()\n",
    "y_pred_svm_trimmed = y_pred_svm[:min_len]\n",
    "y_pred_mlp_trimmed = y_pred_mlp[:min_len]\n",
    "y_test_trimmed = y_test[:min_len]\n",
    "\n",
    "# Step 2: Generate weight combinations for (cnn, svm, mlp) where sum = 1\n",
    "weight_grid = [\n",
    "    (w1, w2, 1 - w1 - w2)\n",
    "    for w1 in np.arange(0.1, 0.9, 0.1)\n",
    "    for w2 in np.arange(0.1, 0.9, 0.1)\n",
    "    if 0 < 1 - w1 - w2 < 1\n",
    "]\n",
    "\n",
    "best_score = 0\n",
    "best_weights = (0.33, 0.33, 0.34)\n",
    "best_preds = None\n",
    "\n",
    "# Step 3: Trying each weight combination\n",
    "for w_cnn, w_svm, w_mlp in weight_grid:\n",
    "    combined = (w_cnn * y_pred_cnn_trimmed +\n",
    "                w_svm * y_pred_svm_trimmed +\n",
    "                w_mlp * y_pred_mlp_trimmed)\n",
    "    \n",
    "    y_pred_weighted = np.round(combined).astype(int)\n",
    "    f1 = f1_score(y_test_trimmed, y_pred_weighted, average='macro')\n",
    "    \n",
    "    if f1 > best_score:\n",
    "        best_score = f1\n",
    "        best_weights = (w_cnn, w_svm, w_mlp)\n",
    "        best_preds = y_pred_weighted\n",
    "\n",
    "# Step 4: Final Evaluation with Best Weights\n",
    "print(\"\\n Best Weights (CNN, SVM, MLP):\", best_weights)\n",
    "print(\"Weighted Ensemble Accuracy:\", accuracy_score(y_test_trimmed, best_preds))\n",
    "print(classification_report(y_test_trimmed, best_preds, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "# Step 5: Confusion Matrix\n",
    "cm = confusion_matrix(y_test_trimmed, best_preds)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Phishing', 'Legitimate'],\n",
    "            yticklabels=['Phishing', 'Legitimate'])\n",
    "plt.title('Weighted Ensemble Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "# Step 6: Save ensemble weights and predictions\n",
    "joblib.dump({'weights': best_weights, 'predictions': best_preds}, 'ensemble_model.pkl')\n",
    "print(\"\\n Ensemble model saved as 'ensemble_model.pkl'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "84b7eabc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:51:49.559335Z",
     "iopub.status.busy": "2025-04-27T16:51:49.559012Z",
     "iopub.status.idle": "2025-04-27T16:51:55.728169Z",
     "shell.execute_reply": "2025-04-27T16:51:55.727224Z"
    },
    "papermill": {
     "duration": 6.629189,
     "end_time": "2025-04-27T16:51:55.729599",
     "exception": false,
     "start_time": "2025-04-27T16:51:49.100410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tldextract\r\n",
      "  Downloading tldextract-5.3.0-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from tldextract) (3.10)\r\n",
      "Requirement already satisfied: requests>=2.1.0 in /usr/local/lib/python3.11/dist-packages (from tldextract) (2.32.3)\r\n",
      "Collecting requests-file>=1.4 (from tldextract)\r\n",
      "  Downloading requests_file-2.1.0-py2.py3-none-any.whl.metadata (1.7 kB)\r\n",
      "Requirement already satisfied: filelock>=3.0.8 in /usr/local/lib/python3.11/dist-packages (from tldextract) (3.18.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (3.4.1)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (2025.1.31)\r\n",
      "Downloading tldextract-5.3.0-py3-none-any.whl (107 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.4/107.4 kB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading requests_file-2.1.0-py2.py3-none-any.whl (4.2 kB)\r\n",
      "Installing collected packages: requests-file, tldextract\r\n",
      "Successfully installed requests-file-2.1.0 tldextract-5.3.0\r\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 131ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 92ms/step\n",
      "{'URL': 'nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526', 'Ensemble (Weighted)': 'Phishing'}\n"
     ]
    }
   ],
   "source": [
    "!pip install tldextract\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import tldextract\n",
    "import joblib\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Load all models and transformers \n",
    "mlp_model = load_model(\"/kaggle/working/mlp_full_model.h5\")\n",
    "cnn_model = load_model(\"/kaggle/working/cnn_model.h5\")\n",
    "svm_model = joblib.load(\"/kaggle/working/svm_rbf_model.pkl\")\n",
    "mlp_scaler = joblib.load(\"/kaggle/working/mlp_full_scaler.pkl\")\n",
    "svm_scaler = joblib.load(\"/kaggle/working/svm_rbf_scaler.pkl\")\n",
    "tokenizer = joblib.load(\"/kaggle/working/cnn_tokenizer.pkl\")\n",
    "ensemble_data = joblib.load(\"/kaggle/working/ensemble_model.pkl\")\n",
    "w_cnn, w_svm, w_mlp = ensemble_data['weights']\n",
    "\n",
    "# === Feature sets used during training ===\n",
    "svm_features = ['url_length', 'use_of_ip', 'abnormal_url',\n",
    "                'digit_count', 'letter_count', 'shortening_service',\n",
    "                'count_@', 'count_?', 'count_-', 'count_=', 'count_//']\n",
    "\n",
    "mlp_features = ['url_length', 'use_of_ip', 'abnormal_url',\n",
    "                'count_@', 'count_?', 'count_-', 'count_=', 'count_.',\n",
    "                'count_#', 'count_%', 'count_+', 'count_$', 'count_!',\n",
    "                'count_*', 'count_,', 'count_//', 'digit_count',\n",
    "                'letter_count', 'shortening_service', 'https_token',\n",
    "                'subdomain_count', 'tld_length', 'url_entropy']\n",
    "\n",
    "# Feature extraction for both models\n",
    "def extract_features_for_models(url):\n",
    "    def abnormal_url(url): return 1 if re.search(r\"https?://([^/]+)\", url) == [] else 0\n",
    "    def having_ip_address(url): return 1 if re.search(r\"\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b\", url) else 0\n",
    "    def digit_count(url): return sum(c.isdigit() for c in url)\n",
    "    def letter_count(url): return sum(c.isalpha() for c in url)\n",
    "    def shortening_service(url): return 1 if re.search(r\"bit\\.ly|goo\\.gl|tinyurl\\.com|ow\\.ly|t\\.co|bitly\\.com\", url) else 0\n",
    "    def https_token(url): return 1 if 'https' in url.lower() else 0\n",
    "    def subdomain_count(url): return len(tldextract.extract(url).subdomain.split('.')) if tldextract.extract(url).subdomain else 0\n",
    "    def tld_length(url): return len(tldextract.extract(url).suffix)\n",
    "    \n",
    "    def url_entropy(url):\n",
    "        entropy = 0\n",
    "        for c in set(url):\n",
    "            p = url.count(c) / len(url)\n",
    "            if p > 0:\n",
    "                entropy -= p * np.log2(p)\n",
    "        return entropy\n",
    "\n",
    "    # Count of special characters\n",
    "    specials = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "    specials_dict = {f'count_{c}': url.count(c) for c in specials}\n",
    "\n",
    "    features = {\n",
    "        'url_length': len(url),\n",
    "        'use_of_ip': having_ip_address(url),\n",
    "        'abnormal_url': abnormal_url(url),\n",
    "        'digit_count': digit_count(url),\n",
    "        'letter_count': letter_count(url),\n",
    "        'shortening_service': shortening_service(url),\n",
    "        'https_token': https_token(url),\n",
    "        'subdomain_count': subdomain_count(url),\n",
    "        'tld_length': tld_length(url),\n",
    "        'url_entropy': url_entropy(url)\n",
    "    }\n",
    "    features.update(specials_dict)\n",
    "\n",
    "    # Create aligned feature sets\n",
    "    svm_vector = pd.DataFrame([[features.get(f, 0) for f in svm_features]], columns=svm_features)\n",
    "    mlp_vector = pd.DataFrame([[features.get(f, 0) for f in mlp_features]], columns=mlp_features)\n",
    "    return svm_vector, mlp_vector\n",
    "\n",
    "#  Prediction function \n",
    "def check_url(url):\n",
    "    svm_input, mlp_input = extract_features_for_models(url)\n",
    "\n",
    "    # SVM\n",
    "    svm_pred = svm_model.predict(svm_scaler.transform(svm_input))[0]\n",
    "\n",
    "    # MLP\n",
    "    mlp_pred = int(mlp_model.predict(mlp_scaler.transform(mlp_input))[0][0] > 0.5)\n",
    "\n",
    "    # CNN\n",
    "    padded = pad_sequences(tokenizer.texts_to_sequences([url]), maxlen=200, padding='post')\n",
    "    cnn_pred = int(cnn_model.predict(padded)[0][0] > 0.5)\n",
    "\n",
    "    # Ensemble Voting\n",
    "    weighted = w_cnn * cnn_pred + w_svm * svm_pred + w_mlp * mlp_pred\n",
    "    ensemble_pred = int(round(weighted))\n",
    "\n",
    "    label_map = {0: \"Phishing\", 1: \"Legitimate\"}\n",
    "    return {\n",
    "        \"URL\": url,\n",
    "        \"Ensemble (Weighted)\": label_map[ensemble_pred]\n",
    "    }\n",
    "\n",
    "# Test on dataset sample\n",
    "df = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")\n",
    "result = check_url(df['URL'].iloc[0])\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b05df64c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:51:56.719110Z",
     "iopub.status.busy": "2025-04-27T16:51:56.718571Z",
     "iopub.status.idle": "2025-04-27T16:51:58.184716Z",
     "shell.execute_reply": "2025-04-27T16:51:58.183830Z"
    },
    "papermill": {
     "duration": 1.930117,
     "end_time": "2025-04-27T16:51:58.186104",
     "exception": false,
     "start_time": "2025-04-27T16:51:56.255987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking first 10 URLs...\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "1. nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "2. www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_home-customer&nav=1/loading.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "3. serviciosbys.com/paypal.cgi.bin.get-into.herf.secure.dispatch35463256rzr321654641dsf654321874/href/href/href/secure/center/update/limit/seccure/4d7a1ff5c55825a2e632a679c2fd5353/\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "4. mail.printakid.com/www.online.americanexpress.com/index.html\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "5. thewhiskeydregs.com/wp-content/themes/widescreen/includes/temp/promocoessmiles/?84784787824HDJNDJDSJSHD//2724782784/\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "6. smilesvoegol.servebbs.org/voegol.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "7. premierpaymentprocessing.com/includes/boleto-2via-07-2012.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "8. myxxxcollection.com/v1/js/jih321/bpd.com.do/do/l.popular.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "9. super1000.info/docs\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "10. horizonsgallery.com/js/bin/ssl1/_id/www.paypal.com/fr/cgi-bin/webscr/cmd=_registration-run/login.php?cmd=_login-run&amp;dispatch=1471c4bdb044ae2be9e2fc3ec514b88b1471c4bdb044ae2be9e2fc3ec514b88b\n",
      "   ➤ Ensemble: Phishing\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test the first 10 URLs in the dataset\n",
    "print(\"Checking first 10 URLs...\\n\")\n",
    "for i, url in enumerate(df['URL'].head(10), start=1):\n",
    "    result = check_url(url)\n",
    "    print(f\"{i}. {result['URL']}\\n   ➤ Ensemble: {result['Ensemble (Weighted)']}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "460ef993",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:51:59.202856Z",
     "iopub.status.busy": "2025-04-27T16:51:59.201657Z",
     "iopub.status.idle": "2025-04-27T16:52:00.182304Z",
     "shell.execute_reply": "2025-04-27T16:52:00.181561Z"
    },
    "papermill": {
     "duration": 1.51745,
     "end_time": "2025-04-27T16:52:00.183534",
     "exception": false,
     "start_time": "2025-04-27T16:51:58.666084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Legitimate URL: www\u000eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\u0003Ë\n",
      "jlÛW¿]ø¾µj¿;\b·ªo!ÒPì ·ÊïH§#'3\u001bø@CÄR\u0002õ²çÇ\u0017\u0017Ý®\u0016ö\u001d",
      "QBÇÆg`Èå",
      "Zéê D\u001c",
      "îÂm®ÎÝQó*x;9?\u000fÁ\u0019Òâbùt\u001bÖ\u0007Ù®mÞNP¯°^MQ\n",
      "(\u001f-\u0004\u0006§;¬ÔAèUèé\\\u0010¨øíÌdB\\\u0001\u0012[q½=ÿVuÃ\u0001»\u0007râæH\u001bäô/µ}",
      "»7!2=´ÂÏ4¿ª¡j91\u0004]\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'URL': \"www\\x0eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\\x03Ë\\nÓ\\x176(rTÃ\\x06u\\x0f\\x8f\\x7fæ\\x82\\x0c\\x99=g\\x810¾\\x96÷mÖi\\x12Ó-;\\x9bXZ\\\\%êýü\\x05Éfn&\\x87\\\\°%7õÙ:¹u\\x96\\x0f\\x161ÌÑêFÄòW<\\x18\\x80$cï\\x86¦t[\\x910ò\\x9f>Þj\\x93®ÆeV2\\x92à\\x1bpù-íàÇ$E¤ZëÈ²ú\\x16SÌ¶\\tp\\x1fáSò°i°vþ[«³»]¹\\rjlÛW¿\\x95\\x9b\\x8a]ø¾µj¿;\\x08·ªo!\\x94ÒPì\\xa0·Ê\\x8bïH§#'\\x823\\x1bø@CÄR\\x02õ²çÇ\\x17\\x17Ý®\\x16ö\\x1d\\x7fQBÇÆg`Èå\\x85Zéê\\xa0D\\x1cîÂm\\x9e®ÎÝQó*x;9?\\x0fÁ\\x19\\x81Òâ\\x88\\x99bùt\\x1bÖ\\x07\\x96Ù®mÞ\\x80N\\x94\\x97P¯°^M\\x8eQ\\n(\\x1f-\\x04\\x06§;¬ÔAèUè\\x99é\\\\\\x10¨ø\\x95íÌ\\x88dB\\\\\\x01\\x8b\\x12[q½=ÿVuÃ\\x01»\\x07râæH\\x1bä\\x8dô/µ}\\x85»7!2=´ÂÏ4¿ª¡j91\\x04\\x86]\",\n",
       " 'Ensemble (Weighted)': 'Phishing'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Re-load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")\n",
    "\n",
    "# Get the second legitimate URL\n",
    "legit_url = df[df['Label'].str.lower() == 'good']['URL'].iloc[1]\n",
    "print(\"Legitimate URL:\", legit_url)\n",
    "\n",
    "# Run it through the model\n",
    "check_url(legit_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2c9b7629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:52:01.096920Z",
     "iopub.status.busy": "2025-04-27T16:52:01.096545Z",
     "iopub.status.idle": "2025-04-27T16:52:02.780164Z",
     "shell.execute_reply": "2025-04-27T16:52:02.779143Z"
    },
    "papermill": {
     "duration": 2.141233,
     "end_time": "2025-04-27T16:52:02.781567",
     "exception": false,
     "start_time": "2025-04-27T16:52:00.640334",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking 10 legitimate URLs...\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "1. depositaccounts.com/savings/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "2. citypages.com/related/to/Dave+Simonett/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "3. askart.com/askart/c/kate_carew/kate_carew.aspx\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "4. brianwattsphoto.com/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "5. thefreedictionary.com/action+deferred\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "6. desifunny.com/videos/pranks_n_gags/just_4_laughs_gags_trying_on_swimsuits-2582-1.aspx\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "7. www.consumerreports.org/cro/electronics-computers/cell-phones/cell-phones-sub/index.htm\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "8. guitarpartsresource.com/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "9. youtube.com/watch?v=N6DMMOOGtX4\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "10. absoluteastronomy.com/topics/Casimir_Pierre_Perier\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Sample 10 random legitimate URLs\n",
    "legit_urls = df[df[\"Label\"].str.lower() == \"good\"][\"URL\"].sample(10, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Check each legitimate URL with the model\n",
    "print(\"Checking 10 legitimate URLs...\\n\")\n",
    "for i, url in enumerate(legit_urls, start=1):\n",
    "    result = check_url(url)\n",
    "    print(f\"{i}. {result['URL']}\\n   ➤ Ensemble: {result['Ensemble (Weighted)']}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ec7ec867",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-27T16:52:03.792780Z",
     "iopub.status.busy": "2025-04-27T16:52:03.792422Z",
     "iopub.status.idle": "2025-04-27T16:52:03.944265Z",
     "shell.execute_reply": "2025-04-27T16:52:03.943570Z"
    },
    "papermill": {
     "duration": 0.698272,
     "end_time": "2025-04-27T16:52:03.945666",
     "exception": false,
     "start_time": "2025-04-27T16:52:03.247394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'URL': 'mail.printakid.com/www.online.americanexpress.com/index.html',\n",
       " 'Ensemble (Weighted)': 'Phishing'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_url(\"mail.printakid.com/www.online.americanexpress.com/index.html\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 791543,
     "sourceId": 1359146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1533.010995,
   "end_time": "2025-04-27T16:52:07.130244",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-27T16:26:34.119249",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

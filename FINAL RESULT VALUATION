{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "89e24355",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:11.429889Z",
     "iopub.status.busy": "2025-04-22T12:09:11.429544Z",
     "iopub.status.idle": "2025-04-22T12:09:13.327427Z",
     "shell.execute_reply": "2025-04-22T12:09:13.326404Z"
    },
    "papermill": {
     "duration": 1.907839,
     "end_time": "2025-04-22T12:09:13.329207",
     "exception": false,
     "start_time": "2025-04-22T12:09:11.421368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/phishing-site-urls/phishing_site_urls.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aede28a1",
   "metadata": {
    "papermill": {
     "duration": 0.005591,
     "end_time": "2025-04-22T12:09:13.341856",
     "exception": false,
     "start_time": "2025-04-22T12:09:13.336265",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Dataset Analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "201571c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:13.356627Z",
     "iopub.status.busy": "2025-04-22T12:09:13.356149Z",
     "iopub.status.idle": "2025-04-22T12:09:14.462122Z",
     "shell.execute_reply": "2025-04-22T12:09:14.461212Z"
    },
    "papermill": {
     "duration": 1.115031,
     "end_time": "2025-04-22T12:09:14.464161",
     "exception": false,
     "start_time": "2025-04-22T12:09:13.349130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d093c73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:14.477456Z",
     "iopub.status.busy": "2025-04-22T12:09:14.477068Z",
     "iopub.status.idle": "2025-04-22T12:09:14.506260Z",
     "shell.execute_reply": "2025-04-22T12:09:14.505130Z"
    },
    "papermill": {
     "duration": 0.037748,
     "end_time": "2025-04-22T12:09:14.508022",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.470274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f0242aed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:14.528378Z",
     "iopub.status.busy": "2025-04-22T12:09:14.527995Z",
     "iopub.status.idle": "2025-04-22T12:09:14.539691Z",
     "shell.execute_reply": "2025-04-22T12:09:14.538480Z"
    },
    "papermill": {
     "duration": 0.024646,
     "end_time": "2025-04-22T12:09:14.541959",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.517313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5624b566",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:14.557430Z",
     "iopub.status.busy": "2025-04-22T12:09:14.557116Z",
     "iopub.status.idle": "2025-04-22T12:09:14.562373Z",
     "shell.execute_reply": "2025-04-22T12:09:14.561189Z"
    },
    "papermill": {
     "duration": 0.014989,
     "end_time": "2025-04-22T12:09:14.564357",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.549368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (549346, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset shape:\", df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "db549ce1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:14.584248Z",
     "iopub.status.busy": "2025-04-22T12:09:14.583555Z",
     "iopub.status.idle": "2025-04-22T12:09:14.591821Z",
     "shell.execute_reply": "2025-04-22T12:09:14.590643Z"
    },
    "papermill": {
     "duration": 0.020874,
     "end_time": "2025-04-22T12:09:14.593510",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.572636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['URL', 'Label'], dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2d08ee0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:14.607670Z",
     "iopub.status.busy": "2025-04-22T12:09:14.607375Z",
     "iopub.status.idle": "2025-04-22T12:09:14.677051Z",
     "shell.execute_reply": "2025-04-22T12:09:14.676119Z"
    },
    "papermill": {
     "duration": 0.07817,
     "end_time": "2025-04-22T12:09:14.678501",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.600331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70b3d49f",
   "metadata": {
    "papermill": {
     "duration": 0.007099,
     "end_time": "2025-04-22T12:09:14.694786",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.687687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "41f96487",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:14.712157Z",
     "iopub.status.busy": "2025-04-22T12:09:14.711195Z",
     "iopub.status.idle": "2025-04-22T12:09:16.260538Z",
     "shell.execute_reply": "2025-04-22T12:09:16.259259Z"
    },
    "papermill": {
     "duration": 1.559545,
     "end_time": "2025-04-22T12:09:16.262298",
     "exception": false,
     "start_time": "2025-04-22T12:09:14.702753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "448c47ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:16.277739Z",
     "iopub.status.busy": "2025-04-22T12:09:16.277273Z",
     "iopub.status.idle": "2025-04-22T12:09:16.391785Z",
     "shell.execute_reply": "2025-04-22T12:09:16.390544Z"
    },
    "papermill": {
     "duration": 0.123912,
     "end_time": "2025-04-22T12:09:16.393405",
     "exception": false,
     "start_time": "2025-04-22T12:09:16.269493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  label_encoded\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad              0\n",
       "1       www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad              0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad              0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad              0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad              0\n",
       "...                                                   ...   ...            ...\n",
       "549341                                    23.227.196.215/   bad              0\n",
       "549342                                 apple-checker.org/   bad              0\n",
       "549343                                  apple-iclods.org/   bad              0\n",
       "549344                                 apple-uptoday.org/   bad              0\n",
       "549345                                  apple-search.info   bad              0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode labels: 'good' → 1, 'bad' → 0\n",
    "df['label_encoded'] = LabelEncoder().fit_transform(df['Label'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b05935ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:16.409632Z",
     "iopub.status.busy": "2025-04-22T12:09:16.408394Z",
     "iopub.status.idle": "2025-04-22T12:09:16.734045Z",
     "shell.execute_reply": "2025-04-22T12:09:16.733039Z"
    },
    "papermill": {
     "duration": 0.335382,
     "end_time": "2025-04-22T12:09:16.735544",
     "exception": false,
     "start_time": "2025-04-22T12:09:16.400162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  label_encoded\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad              0\n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad              0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad              0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad              0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad              0\n",
       "...                                                   ...   ...            ...\n",
       "549341                                    23.227.196.215/   bad              0\n",
       "549342                                 apple-checker.org/   bad              0\n",
       "549343                                  apple-iclods.org/   bad              0\n",
       "549344                                 apple-uptoday.org/   bad              0\n",
       "549345                                  apple-search.info   bad              0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove 'www.' from URLs\n",
    "df['URL'] = df['URL'].str.replace(r'^www\\.', '', regex=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5556ab76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:16.751564Z",
     "iopub.status.busy": "2025-04-22T12:09:16.751216Z",
     "iopub.status.idle": "2025-04-22T12:09:16.979013Z",
     "shell.execute_reply": "2025-04-22T12:09:16.978049Z"
    },
    "papermill": {
     "duration": 0.237964,
     "end_time": "2025-04-22T12:09:16.980898",
     "exception": false,
     "start_time": "2025-04-22T12:09:16.742934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "      <th>url_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "...                                                   ...   ...   \n",
       "549341                                    23.227.196.215/   bad   \n",
       "549342                                 apple-checker.org/   bad   \n",
       "549343                                  apple-iclods.org/   bad   \n",
       "549344                                 apple-uptoday.org/   bad   \n",
       "549345                                  apple-search.info   bad   \n",
       "\n",
       "        label_encoded  url_length  \n",
       "0                   0         225  \n",
       "1                   0          77  \n",
       "2                   0         177  \n",
       "3                   0          60  \n",
       "4                   0         116  \n",
       "...               ...         ...  \n",
       "549341              0          15  \n",
       "549342              0          18  \n",
       "549343              0          17  \n",
       "549344              0          18  \n",
       "549345              0          17  \n",
       "\n",
       "[549346 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 1: Length of URL\n",
    "df['url_length'] = df['URL'].apply(lambda x: len(str(x)))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c0a1e761",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:16.998225Z",
     "iopub.status.busy": "2025-04-22T12:09:16.997744Z",
     "iopub.status.idle": "2025-04-22T12:09:18.165202Z",
     "shell.execute_reply": "2025-04-22T12:09:18.163923Z"
    },
    "papermill": {
     "duration": 1.177233,
     "end_time": "2025-04-22T12:09:18.166977",
     "exception": false,
     "start_time": "2025-04-22T12:09:16.989744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 2: Use of IP address\n",
    "def has_ip(url):\n",
    "    return 1 if re.search(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', url) else 0\n",
    "\n",
    "df['use_of_ip'] = df['URL'].apply(has_ip)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "27849fd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:18.183391Z",
     "iopub.status.busy": "2025-04-22T12:09:18.183105Z",
     "iopub.status.idle": "2025-04-22T12:09:18.673592Z",
     "shell.execute_reply": "2025-04-22T12:09:18.672735Z"
    },
    "papermill": {
     "duration": 0.50017,
     "end_time": "2025-04-22T12:09:18.675358",
     "exception": false,
     "start_time": "2025-04-22T12:09:18.175188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 3: Abnormal URL (absence of hostname)\n",
    "def abnormal_url(url):\n",
    "    hostname = re.findall(r\"https?://([^/]+)\", url)\n",
    "    return 1 if not hostname else 0\n",
    "\n",
    "df['abnormal_url'] = df['URL'].apply(abnormal_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6ddb4765",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:18.691361Z",
     "iopub.status.busy": "2025-04-22T12:09:18.690609Z",
     "iopub.status.idle": "2025-04-22T12:09:22.225620Z",
     "shell.execute_reply": "2025-04-22T12:09:22.224466Z"
    },
    "papermill": {
     "duration": 3.545063,
     "end_time": "2025-04-22T12:09:22.227499",
     "exception": false,
     "start_time": "2025-04-22T12:09:18.682436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 4: Count of suspicious special characters\n",
    "special_chars = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "for char in special_chars:\n",
    "    df[f'count_{char}'] = df['URL'].apply(lambda x: x.count(char))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5276fd18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:22.244452Z",
     "iopub.status.busy": "2025-04-22T12:09:22.244126Z",
     "iopub.status.idle": "2025-04-22T12:09:26.397449Z",
     "shell.execute_reply": "2025-04-22T12:09:26.396449Z"
    },
    "papermill": {
     "duration": 4.164244,
     "end_time": "2025-04-22T12:09:26.399165",
     "exception": false,
     "start_time": "2025-04-22T12:09:22.234921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "      <th>url_length</th>\n",
       "      <th>use_of_ip</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>count_@</th>\n",
       "      <th>count_?</th>\n",
       "      <th>count_-</th>\n",
       "      <th>count_=</th>\n",
       "      <th>...</th>\n",
       "      <th>count_#</th>\n",
       "      <th>count_%</th>\n",
       "      <th>count_+</th>\n",
       "      <th>count_$</th>\n",
       "      <th>count_!</th>\n",
       "      <th>count_*</th>\n",
       "      <th>count_,</th>\n",
       "      <th>count_//</th>\n",
       "      <th>digit_count</th>\n",
       "      <th>letter_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "...                                                   ...   ...   \n",
       "549341                                    23.227.196.215/   bad   \n",
       "549342                                 apple-checker.org/   bad   \n",
       "549343                                  apple-iclods.org/   bad   \n",
       "549344                                 apple-uptoday.org/   bad   \n",
       "549345                                  apple-search.info   bad   \n",
       "\n",
       "        label_encoded  url_length  use_of_ip  abnormal_url  count_@  count_?  \\\n",
       "0                   0         225          0             1        0        1   \n",
       "1                   0          77          0             1        0        0   \n",
       "2                   0         177          0             1        0        0   \n",
       "3                   0          60          0             1        0        0   \n",
       "4                   0         116          0             1        0        1   \n",
       "...               ...         ...        ...           ...      ...      ...   \n",
       "549341              0          15          1             1        0        0   \n",
       "549342              0          18          0             1        0        0   \n",
       "549343              0          17          0             1        0        0   \n",
       "549344              0          18          0             1        0        0   \n",
       "549345              0          17          0             1        0        0   \n",
       "\n",
       "        count_-  count_=  ...  count_#  count_%  count_+  count_$  count_!  \\\n",
       "0             4        4  ...        0        0        0        0        0   \n",
       "1             2        2  ...        0        0        0        0        0   \n",
       "2             1        0  ...        0        0        0        0        0   \n",
       "3             0        0  ...        0        0        0        0        0   \n",
       "4             1        0  ...        0        0        0        0        0   \n",
       "...         ...      ...  ...      ...      ...      ...      ...      ...   \n",
       "549341        0        0  ...        0        0        0        0        0   \n",
       "549342        1        0  ...        0        0        0        0        0   \n",
       "549343        1        0  ...        0        0        0        0        0   \n",
       "549344        1        0  ...        0        0        0        0        0   \n",
       "549345        1        0  ...        0        0        0        0        0   \n",
       "\n",
       "        count_*  count_,  count_//  digit_count  letter_count  \n",
       "0             0        0         0           58           135  \n",
       "1             0        0         0            1            62  \n",
       "2             0        0         0           47           111  \n",
       "3             0        0         0            0            52  \n",
       "4             0        0         1           21            82  \n",
       "...         ...      ...       ...          ...           ...  \n",
       "549341        0        0         0           11             0  \n",
       "549342        0        0         0            0            15  \n",
       "549343        0        0         0            0            14  \n",
       "549344        0        0         0            0            15  \n",
       "549345        0        0         0            0            15  \n",
       "\n",
       "[549346 rows x 21 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 5: Count digits and letters\n",
    "df['digit_count'] = df['URL'].apply(lambda x: sum(c.isdigit() for c in x))\n",
    "df['letter_count'] = df['URL'].apply(lambda x: sum(c.isalpha() for c in x))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a76f23a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:26.416303Z",
     "iopub.status.busy": "2025-04-22T12:09:26.415977Z",
     "iopub.status.idle": "2025-04-22T12:09:27.668421Z",
     "shell.execute_reply": "2025-04-22T12:09:27.667534Z"
    },
    "papermill": {
     "duration": 1.263131,
     "end_time": "2025-04-22T12:09:27.670194",
     "exception": false,
     "start_time": "2025-04-22T12:09:26.407063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 6: Shortening services detection\n",
    "shorteners = r\"bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc\"\n",
    "df['shortening_service'] = df['URL'].apply(lambda x: 1 if re.search(shorteners, x) else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8f03e29c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:27.688114Z",
     "iopub.status.busy": "2025-04-22T12:09:27.687801Z",
     "iopub.status.idle": "2025-04-22T12:09:27.760362Z",
     "shell.execute_reply": "2025-04-22T12:09:27.759193Z"
    },
    "papermill": {
     "duration": 0.083454,
     "end_time": "2025-04-22T12:09:27.762129",
     "exception": false,
     "start_time": "2025-04-22T12:09:27.678675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Final feature matrix (X) and label vector (y)\n",
    "X = df.drop(columns=['URL', 'Label', 'label_encoded'])\n",
    "y = df['label_encoded']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "566b2189",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:27.779217Z",
     "iopub.status.busy": "2025-04-22T12:09:27.778877Z",
     "iopub.status.idle": "2025-04-22T12:09:31.319551Z",
     "shell.execute_reply": "2025-04-22T12:09:31.318343Z"
    },
    "papermill": {
     "duration": 3.551105,
     "end_time": "2025-04-22T12:09:31.321270",
     "exception": false,
     "start_time": "2025-04-22T12:09:27.770165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Preprocessed model is ready for use.\n"
     ]
    }
   ],
   "source": [
    "# Save cleaned version for inspection or modeling\n",
    "df.drop(columns=['Label']).to_csv('/kaggle/working/phishing_processed.csv', index=False)\n",
    "\n",
    "print(\" Preprocessed model is ready for use.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aee06bfb",
   "metadata": {
    "papermill": {
     "duration": 0.007265,
     "end_time": "2025-04-22T12:09:31.336115",
     "exception": false,
     "start_time": "2025-04-22T12:09:31.328850",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Development**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "babed68e",
   "metadata": {
    "papermill": {
     "duration": 0.007831,
     "end_time": "2025-04-22T12:09:31.351829",
     "exception": false,
     "start_time": "2025-04-22T12:09:31.343998",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**CNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5d581af7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:09:31.369220Z",
     "iopub.status.busy": "2025-04-22T12:09:31.368852Z",
     "iopub.status.idle": "2025-04-22T12:16:59.114589Z",
     "shell.execute_reply": "2025-04-22T12:16:59.113611Z"
    },
    "papermill": {
     "duration": 447.757185,
     "end_time": "2025-04-22T12:16:59.116361",
     "exception": false,
     "start_time": "2025-04-22T12:09:31.359176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-22 12:09:34.110925: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745323774.386424      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745323774.476418      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-22 12:10:03.711206: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 50ms/step - accuracy: 0.8794 - loss: 0.2864 - val_accuracy: 0.9531 - val_loss: 0.1315\n",
      "Epoch 2/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m78s\u001b[0m 50ms/step - accuracy: 0.9557 - loss: 0.1233 - val_accuracy: 0.9594 - val_loss: 0.1140\n",
      "Epoch 3/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 51ms/step - accuracy: 0.9621 - loss: 0.1050 - val_accuracy: 0.9609 - val_loss: 0.1092\n",
      "Epoch 4/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m78s\u001b[0m 50ms/step - accuracy: 0.9655 - loss: 0.0963 - val_accuracy: 0.9641 - val_loss: 0.1017\n",
      "Epoch 5/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 51ms/step - accuracy: 0.9674 - loss: 0.0906 - val_accuracy: 0.9594 - val_loss: 0.1126\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step\n",
      "Accuracy: 0.9645945207973059\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.95      0.92      0.94     31285\n",
      "  Legitimate       0.97      0.98      0.98     78585\n",
      "\n",
      "    accuracy                           0.96    109870\n",
      "   macro avg       0.96      0.95      0.96    109870\n",
      "weighted avg       0.96      0.96      0.96    109870\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "['cnn_tokenizer.pkl']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import joblib\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "# Load and prepare dataset\n",
    "df = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')\n",
    "df['label_encoded'] = LabelEncoder().fit_transform(df['Label'])\n",
    "\n",
    "# Tokenizer: char-level\n",
    "tokenizer = Tokenizer(char_level=True, oov_token='OOV')\n",
    "tokenizer.fit_on_texts(df['URL'])\n",
    "\n",
    "# Convert URLs to padded sequences\n",
    "sequences = tokenizer.texts_to_sequences(df['URL'])\n",
    "max_len = 200\n",
    "X = pad_sequences(sequences, maxlen=max_len, padding='post', truncating='post')\n",
    "y = df['label_encoded'].values\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "# Define CNN model\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "\n",
    "cnn_model = Sequential([\n",
    "    Embedding(input_dim=vocab_size, output_dim=32, input_length=max_len),\n",
    "    Conv1D(64, kernel_size=5, activation='relu'),\n",
    "    GlobalMaxPooling1D(),\n",
    "    Dense(32, activation='relu'),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "cnn_model.build(input_shape=(None, max_len))\n",
    "cnn_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "cnn_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=5,\n",
    "    batch_size=256,\n",
    "    validation_split=0.1,\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Predict\n",
    "y_pred_cnn = (cnn_model.predict(X_test) > 0.5).astype(int)\n",
    "\n",
    "# Evaluate\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_cnn))\n",
    "print(classification_report(y_test, y_pred_cnn, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred_cnn)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=[\"Phishing\", \"Legitimate\"],\n",
    "            yticklabels=[\"Phishing\", \"Legitimate\"])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('CNN Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Save model and tokenizer\n",
    "cnn_model.save('cnn_model.h5')\n",
    "joblib.dump(tokenizer, 'cnn_tokenizer.pkl')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0785f3a",
   "metadata": {
    "papermill": {
     "duration": 0.246659,
     "end_time": "2025-04-22T12:16:59.678561",
     "exception": false,
     "start_time": "2025-04-22T12:16:59.431902",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**SVM**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b49ef527",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:17:00.163833Z",
     "iopub.status.busy": "2025-04-22T12:17:00.163498Z",
     "iopub.status.idle": "2025-04-22T12:29:33.883628Z",
     "shell.execute_reply": "2025-04-22T12:29:33.882560Z"
    },
    "papermill": {
     "duration": 753.964859,
     "end_time": "2025-04-22T12:29:33.885601",
     "exception": false,
     "start_time": "2025-04-22T12:16:59.920742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10%] Loading preprocessed dataset...\n",
      "[20%] Sampling 50K records (25K per class)...\n",
      "[30%] Selecting feature set...\n",
      "[40%] Splitting train/test sets...\n",
      "[50%] Scaling features...\n",
      "[70%] Tuning RBF-SVM hyperparameters...\n",
      " C=0.1, gamma=0.01 → F1 Score: 0.5820\n",
      " C=0.1, gamma=0.1 → F1 Score: 0.6178\n",
      " C=0.1, gamma=1 → F1 Score: 0.6959\n",
      " C=1, gamma=0.01 → F1 Score: 0.5832\n",
      " C=1, gamma=0.1 → F1 Score: 0.6427\n",
      " C=1, gamma=1 → F1 Score: 0.7159\n",
      " C=5, gamma=0.01 → F1 Score: 0.5862\n",
      " C=5, gamma=0.1 → F1 Score: 0.6576\n",
      " C=5, gamma=1 → F1 Score: 0.7194\n",
      "[80%] Best Params: {'C': 5, 'gamma': 1} | Macro F1 Score: 0.7194\n",
      "[90%] Final Evaluation...\n",
      "Accuracy: 0.7257\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.82      0.58      0.68      5000\n",
      "  Legitimate       0.67      0.88      0.76      5000\n",
      "\n",
      "    accuracy                           0.73     10000\n",
      "   macro avg       0.75      0.73      0.72     10000\n",
      "weighted avg       0.75      0.73      0.72     10000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Saving RBF-SVM model and scaler...\n",
      "Model and scaler saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n",
    "\n",
    "print(\"[10%] Loading preprocessed dataset...\")\n",
    "df = pd.read_csv('/kaggle/working/phishing_processed.csv')\n",
    "\n",
    "print(\"[20%] Sampling 50K records (25K per class)...\")\n",
    "df_sampled = df.groupby('label_encoded', group_keys=False).apply(\n",
    "    lambda x: x.sample(25000, random_state=42)\n",
    ").reset_index(drop=True)\n",
    "\n",
    "\n",
    "print(\"[30%] Selecting feature set...\")\n",
    "features = [\n",
    "    'url_length', 'use_of_ip', 'abnormal_url',\n",
    "    'digit_count', 'letter_count', 'shortening_service',\n",
    "    'count_@', 'count_?', 'count_-', 'count_=', 'count_//'\n",
    "]\n",
    "X = df_sampled[features]\n",
    "y = df_sampled['label_encoded']\n",
    "\n",
    "print(\"[40%] Splitting train/test sets...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "print(\"[50%] Scaling features...\")\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Hyperparameter grid\n",
    "C_values = [0.1, 1, 5]\n",
    "gamma_values = [0.01, 0.1, 1]\n",
    "\n",
    "print(\"[70%] Tuning RBF-SVM hyperparameters...\")\n",
    "best_score = 0\n",
    "best_model = None\n",
    "best_params = {}\n",
    "\n",
    "for C in C_values:\n",
    "    for gamma in gamma_values:\n",
    "        model = SVC(kernel='rbf', C=C, gamma=gamma, class_weight='balanced')\n",
    "        model.fit(X_train_scaled, y_train)\n",
    "        y_pred = model.predict(X_test_scaled)\n",
    "        score = f1_score(y_test, y_pred, average='macro')\n",
    "\n",
    "        print(f\" C={C}, gamma={gamma} → F1 Score: {score:.4f}\")\n",
    "\n",
    "        if score > best_score:\n",
    "            best_score = score\n",
    "            best_model = model\n",
    "            best_params = {'C': C, 'gamma': gamma}\n",
    "\n",
    "print(f\"[80%] Best Params: {best_params} | Macro F1 Score: {best_score:.4f}\")\n",
    "\n",
    "# Final prediction\n",
    "svm_model = best_model\n",
    "y_pred_svm = svm_model.predict(X_test_scaled)\n",
    "\n",
    "print(\"[90%] Final Evaluation...\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_svm, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_svm)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=[\"Phishing\", \"Legitimate\"],\n",
    "            yticklabels=[\"Phishing\", \"Legitimate\"])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('RBF-SVM Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "print(\"[100%] Saving RBF-SVM model and scaler...\")\n",
    "joblib.dump(svm_model, 'svm_rbf_model.pkl')\n",
    "joblib.dump(scaler, 'svm_rbf_scaler.pkl')\n",
    "print(\"Model and scaler saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07bfca14",
   "metadata": {
    "papermill": {
     "duration": 0.256055,
     "end_time": "2025-04-22T12:29:34.391977",
     "exception": false,
     "start_time": "2025-04-22T12:29:34.135922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MLP**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8780b702",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:29:34.907184Z",
     "iopub.status.busy": "2025-04-22T12:29:34.906868Z",
     "iopub.status.idle": "2025-04-22T12:34:32.063537Z",
     "shell.execute_reply": "2025-04-22T12:34:32.062455Z"
    },
    "papermill": {
     "duration": 297.398964,
     "end_time": "2025-04-22T12:34:32.065309",
     "exception": false,
     "start_time": "2025-04-22T12:29:34.666345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10%] Loading preprocessed dataset...\n",
      "[20%] Feature engineering (advanced)...\n",
      "[40%] Creating full feature matrix and target vector...\n",
      "[50%] Dataset size: 549346 samples, 23 features\n",
      "[60%] Splitting full dataset (80% train / 20% test)...\n",
      "[70%] Scaling features...\n",
      "[80%] Building deeper regularized MLP model...\n",
      "[90%] Training MLP on full dataset (this may take ~2–5 mins)...\n",
      "Epoch 1/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 16ms/step - accuracy: 0.7401 - loss: 0.5357 - val_accuracy: 0.7973 - val_loss: 0.4387\n",
      "Epoch 2/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8072 - loss: 0.4348 - val_accuracy: 0.8176 - val_loss: 0.4066\n",
      "Epoch 3/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8178 - loss: 0.4157 - val_accuracy: 0.8267 - val_loss: 0.3932\n",
      "Epoch 4/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8234 - loss: 0.4048 - val_accuracy: 0.8226 - val_loss: 0.3916\n",
      "Epoch 5/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8288 - loss: 0.3939 - val_accuracy: 0.8355 - val_loss: 0.3784\n",
      "Epoch 6/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8327 - loss: 0.3875 - val_accuracy: 0.8327 - val_loss: 0.3762\n",
      "Epoch 7/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8328 - loss: 0.3847 - val_accuracy: 0.8373 - val_loss: 0.3708\n",
      "Epoch 8/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8362 - loss: 0.3799 - val_accuracy: 0.8392 - val_loss: 0.3672\n",
      "Epoch 9/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8359 - loss: 0.3779 - val_accuracy: 0.8387 - val_loss: 0.3675\n",
      "Epoch 10/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8371 - loss: 0.3751 - val_accuracy: 0.8389 - val_loss: 0.3676\n",
      "Epoch 11/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8378 - loss: 0.3732 - val_accuracy: 0.8397 - val_loss: 0.3635\n",
      "Epoch 12/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8397 - loss: 0.3705 - val_accuracy: 0.8398 - val_loss: 0.3653\n",
      "Epoch 13/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8395 - loss: 0.3703 - val_accuracy: 0.8408 - val_loss: 0.3617\n",
      "Epoch 14/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8402 - loss: 0.3678 - val_accuracy: 0.8398 - val_loss: 0.3626\n",
      "Epoch 15/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8404 - loss: 0.3670 - val_accuracy: 0.8378 - val_loss: 0.3696\n",
      "Epoch 16/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8417 - loss: 0.3658 - val_accuracy: 0.8406 - val_loss: 0.3629\n",
      "[95%] Evaluating on test set...\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1ms/step\n",
      "MLP Accuracy: 0.8444161281514517\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.86      0.54      0.66     31285\n",
      "  Legitimate       0.84      0.97      0.90     78585\n",
      "\n",
      "    accuracy                           0.84    109870\n",
      "   macro avg       0.85      0.75      0.78    109870\n",
      "weighted avg       0.85      0.84      0.83    109870\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Saving full-trained MLP model and scaler...\n",
      "Full MLP model and scaler saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from urllib.parse import urlparse\n",
    "from scipy.stats import entropy\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "print(\"[10%] Loading preprocessed dataset...\")\n",
    "df = pd.read_csv('/kaggle/working/phishing_processed.csv')\n",
    "features_df = df.copy()\n",
    "\n",
    "print(\"[20%] Feature engineering (advanced)...\")\n",
    "\n",
    "def has_ip(url): return 1 if re.search(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', url) else 0\n",
    "def abnormal_url(url): return 1 if not re.findall(r\"https?://([^/]+)\", url) else 0\n",
    "def https_token(url): return 1 if 'https' in url.lower() else 0\n",
    "def subdomain_count(url): \n",
    "    try: return urlparse(url).hostname.count('.') - 1\n",
    "    except: return 0\n",
    "def tld_length(url): \n",
    "    try: return len(urlparse(url).hostname.split('.')[-1])\n",
    "    except: return 0\n",
    "def url_entropy(url):\n",
    "    prob = [url.count(c)/len(url) for c in set(url)]\n",
    "    return round(entropy(prob, base=2), 4)\n",
    "\n",
    "features_df['url_length'] = features_df['URL'].apply(len)\n",
    "features_df['use_of_ip'] = features_df['URL'].apply(has_ip)\n",
    "features_df['abnormal_url'] = features_df['URL'].apply(abnormal_url)\n",
    "features_df['https_token'] = features_df['URL'].apply(https_token)\n",
    "features_df['subdomain_count'] = features_df['URL'].apply(subdomain_count)\n",
    "features_df['tld_length'] = features_df['URL'].apply(tld_length)\n",
    "features_df['url_entropy'] = features_df['URL'].apply(url_entropy)\n",
    "\n",
    "for ch in ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']:\n",
    "    features_df[f'count_{ch}'] = features_df['URL'].apply(lambda x: x.count(ch))\n",
    "\n",
    "features_df['digit_count'] = features_df['URL'].apply(lambda x: sum(c.isdigit() for c in x))\n",
    "features_df['letter_count'] = features_df['URL'].apply(lambda x: sum(c.isalpha() for c in x))\n",
    "features_df['shortening_service'] = features_df['URL'].apply(lambda x: 1 if re.search(r\"bit\\.ly|tinyurl|t\\.co\", x) else 0)\n",
    "\n",
    "print(\"[40%] Creating full feature matrix and target vector...\")\n",
    "X = features_df.drop(columns=['URL', 'Label', 'label_encoded'], errors='ignore')\n",
    "y = features_df['label_encoded']\n",
    "\n",
    "print(f\"[50%] Dataset size: {X.shape[0]} samples, {X.shape[1]} features\")\n",
    "\n",
    "print(\"[60%] Splitting full dataset (80% train / 20% test)...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, stratify=y, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "print(\"[70%] Scaling features...\")\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "print(\"[80%] Building deeper regularized MLP model...\")\n",
    "mlp_model = Sequential([\n",
    "    Dense(256, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "mlp_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "print(\"[90%] Training MLP on full dataset (this may take ~2–5 mins)...\")\n",
    "mlp_model.fit(\n",
    "    X_train_scaled, y_train,\n",
    "    validation_split=0.1,\n",
    "    epochs=20,\n",
    "    batch_size=1024,\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "print(\"[95%] Evaluating on test set...\")\n",
    "y_pred_mlp = (mlp_model.predict(X_test_scaled) > 0.5).astype(int).flatten()\n",
    "\n",
    "print(\"MLP Accuracy:\", accuracy_score(y_test, y_pred_mlp))\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_mlp, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_mlp)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Phishing', 'Legitimate'],\n",
    "            yticklabels=['Phishing', 'Legitimate'])\n",
    "plt.title('MLP Confusion Matrix (100% Dataset)')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "print(\"[100%] Saving full-trained MLP model and scaler...\")\n",
    "mlp_model.save('mlp_full_model.h5')\n",
    "joblib.dump(scaler, 'mlp_full_scaler.pkl')\n",
    "print(\"Full MLP model and scaler saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a1c916f",
   "metadata": {
    "papermill": {
     "duration": 0.408474,
     "end_time": "2025-04-22T12:34:32.806896",
     "exception": false,
     "start_time": "2025-04-22T12:34:32.398422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0514326a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:34:33.464477Z",
     "iopub.status.busy": "2025-04-22T12:34:33.464153Z",
     "iopub.status.idle": "2025-04-22T12:34:33.849559Z",
     "shell.execute_reply": "2025-04-22T12:34:33.848686Z"
    },
    "papermill": {
     "duration": 0.714219,
     "end_time": "2025-04-22T12:34:33.851210",
     "exception": false,
     "start_time": "2025-04-22T12:34:33.136991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Best Weights (CNN, SVM, MLP): (0.6, 0.1, 0.30000000000000004)\n",
      "Weighted Ensemble Accuracy: 0.965\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.95      0.92      0.94      2859\n",
      "  Legitimate       0.97      0.98      0.98      7141\n",
      "\n",
      "    accuracy                           0.96     10000\n",
      "   macro avg       0.96      0.95      0.96     10000\n",
      "weighted avg       0.96      0.96      0.96     10000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Ensemble model saved as 'ensemble_model.pkl'\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "\n",
    "# Step 1: Ensure all predictions and test labels are trimmed to the same length\n",
    "min_len = min(len(y_pred_cnn), len(y_pred_svm), len(y_pred_mlp))\n",
    "y_pred_cnn_trimmed = y_pred_cnn[:min_len].flatten()\n",
    "y_pred_svm_trimmed = y_pred_svm[:min_len]\n",
    "y_pred_mlp_trimmed = y_pred_mlp[:min_len]\n",
    "y_test_trimmed = y_test[:min_len]\n",
    "\n",
    "# Step 2: Generate weight combinations for (cnn, svm, mlp) where sum = 1\n",
    "weight_grid = [\n",
    "    (w1, w2, 1 - w1 - w2)\n",
    "    for w1 in np.arange(0.1, 0.9, 0.1)\n",
    "    for w2 in np.arange(0.1, 0.9, 0.1)\n",
    "    if 0 < 1 - w1 - w2 < 1\n",
    "]\n",
    "\n",
    "best_score = 0\n",
    "best_weights = (0.33, 0.33, 0.34)\n",
    "best_preds = None\n",
    "\n",
    "# Step 3: Try each weight combination\n",
    "for w_cnn, w_svm, w_mlp in weight_grid:\n",
    "    combined = (w_cnn * y_pred_cnn_trimmed +\n",
    "                w_svm * y_pred_svm_trimmed +\n",
    "                w_mlp * y_pred_mlp_trimmed)\n",
    "    \n",
    "    y_pred_weighted = np.round(combined).astype(int)\n",
    "    f1 = f1_score(y_test_trimmed, y_pred_weighted, average='macro')\n",
    "    \n",
    "    if f1 > best_score:\n",
    "        best_score = f1\n",
    "        best_weights = (w_cnn, w_svm, w_mlp)\n",
    "        best_preds = y_pred_weighted\n",
    "\n",
    "# Step 4: Final Evaluation with Best Weights\n",
    "print(\"\\n Best Weights (CNN, SVM, MLP):\", best_weights)\n",
    "print(\"Weighted Ensemble Accuracy:\", accuracy_score(y_test_trimmed, best_preds))\n",
    "print(classification_report(y_test_trimmed, best_preds, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "# Step 5: Confusion Matrix\n",
    "cm = confusion_matrix(y_test_trimmed, best_preds)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Phishing', 'Legitimate'],\n",
    "            yticklabels=['Phishing', 'Legitimate'])\n",
    "plt.title('Weighted Ensemble Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "# Step 6: Save ensemble weights and predictions\n",
    "joblib.dump({'weights': best_weights, 'predictions': best_preds}, 'ensemble_model.pkl')\n",
    "print(\"\\n Ensemble model saved as 'ensemble_model.pkl'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "908a678a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:34:34.515453Z",
     "iopub.status.busy": "2025-04-22T12:34:34.514800Z",
     "iopub.status.idle": "2025-04-22T12:34:41.415786Z",
     "shell.execute_reply": "2025-04-22T12:34:41.414321Z"
    },
    "papermill": {
     "duration": 7.244092,
     "end_time": "2025-04-22T12:34:41.418049",
     "exception": false,
     "start_time": "2025-04-22T12:34:34.173957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tldextract\r\n",
      "  Downloading tldextract-5.3.0-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from tldextract) (3.10)\r\n",
      "Requirement already satisfied: requests>=2.1.0 in /usr/local/lib/python3.11/dist-packages (from tldextract) (2.32.3)\r\n",
      "Collecting requests-file>=1.4 (from tldextract)\r\n",
      "  Downloading requests_file-2.1.0-py2.py3-none-any.whl.metadata (1.7 kB)\r\n",
      "Requirement already satisfied: filelock>=3.0.8 in /usr/local/lib/python3.11/dist-packages (from tldextract) (3.18.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (3.4.1)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (2025.1.31)\r\n",
      "Downloading tldextract-5.3.0-py3-none-any.whl (107 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.4/107.4 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading requests_file-2.1.0-py2.py3-none-any.whl (4.2 kB)\r\n",
      "Installing collected packages: requests-file, tldextract\r\n",
      "Successfully installed requests-file-2.1.0 tldextract-5.3.0\r\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 141ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 106ms/step\n",
      "{'URL': 'nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526', 'Ensemble (Weighted)': 'Phishing'}\n"
     ]
    }
   ],
   "source": [
    "!pip install tldextract\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import tldextract\n",
    "import joblib\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# === Load all models and transformers ===\n",
    "mlp_model = load_model(\"/kaggle/working/mlp_full_model.h5\")\n",
    "cnn_model = load_model(\"/kaggle/working/cnn_model.h5\")\n",
    "svm_model = joblib.load(\"/kaggle/working/svm_rbf_model.pkl\")\n",
    "mlp_scaler = joblib.load(\"/kaggle/working/mlp_full_scaler.pkl\")\n",
    "svm_scaler = joblib.load(\"/kaggle/working/svm_rbf_scaler.pkl\")\n",
    "tokenizer = joblib.load(\"/kaggle/working/cnn_tokenizer.pkl\")\n",
    "ensemble_data = joblib.load(\"/kaggle/working/ensemble_model.pkl\")\n",
    "w_cnn, w_svm, w_mlp = ensemble_data['weights']\n",
    "\n",
    "# === Feature sets used during training ===\n",
    "svm_features = ['url_length', 'use_of_ip', 'abnormal_url',\n",
    "                'digit_count', 'letter_count', 'shortening_service',\n",
    "                'count_@', 'count_?', 'count_-', 'count_=', 'count_//']\n",
    "\n",
    "mlp_features = ['url_length', 'use_of_ip', 'abnormal_url',\n",
    "                'count_@', 'count_?', 'count_-', 'count_=', 'count_.',\n",
    "                'count_#', 'count_%', 'count_+', 'count_$', 'count_!',\n",
    "                'count_*', 'count_,', 'count_//', 'digit_count',\n",
    "                'letter_count', 'shortening_service', 'https_token',\n",
    "                'subdomain_count', 'tld_length', 'url_entropy']\n",
    "\n",
    "# === Feature extraction for both models ===\n",
    "def extract_features_for_models(url):\n",
    "    def abnormal_url(url): return 1 if re.search(r\"https?://([^/]+)\", url) == [] else 0\n",
    "    def having_ip_address(url): return 1 if re.search(r\"\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b\", url) else 0\n",
    "    def digit_count(url): return sum(c.isdigit() for c in url)\n",
    "    def letter_count(url): return sum(c.isalpha() for c in url)\n",
    "    def shortening_service(url): return 1 if re.search(r\"bit\\.ly|goo\\.gl|tinyurl\\.com|ow\\.ly|t\\.co|bitly\\.com\", url) else 0\n",
    "    def https_token(url): return 1 if 'https' in url.lower() else 0\n",
    "    def subdomain_count(url): return len(tldextract.extract(url).subdomain.split('.')) if tldextract.extract(url).subdomain else 0\n",
    "    def tld_length(url): return len(tldextract.extract(url).suffix)\n",
    "    \n",
    "    def url_entropy(url):\n",
    "        entropy = 0\n",
    "        for c in set(url):\n",
    "            p = url.count(c) / len(url)\n",
    "            if p > 0:\n",
    "                entropy -= p * np.log2(p)\n",
    "        return entropy\n",
    "\n",
    "    # Count of special characters\n",
    "    specials = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "    specials_dict = {f'count_{c}': url.count(c) for c in specials}\n",
    "\n",
    "    features = {\n",
    "        'url_length': len(url),\n",
    "        'use_of_ip': having_ip_address(url),\n",
    "        'abnormal_url': abnormal_url(url),\n",
    "        'digit_count': digit_count(url),\n",
    "        'letter_count': letter_count(url),\n",
    "        'shortening_service': shortening_service(url),\n",
    "        'https_token': https_token(url),\n",
    "        'subdomain_count': subdomain_count(url),\n",
    "        'tld_length': tld_length(url),\n",
    "        'url_entropy': url_entropy(url)\n",
    "    }\n",
    "    features.update(specials_dict)\n",
    "\n",
    "    # Create aligned feature sets\n",
    "    svm_vector = pd.DataFrame([[features.get(f, 0) for f in svm_features]], columns=svm_features)\n",
    "    mlp_vector = pd.DataFrame([[features.get(f, 0) for f in mlp_features]], columns=mlp_features)\n",
    "    return svm_vector, mlp_vector\n",
    "\n",
    "# === Prediction function ===\n",
    "def check_url(url):\n",
    "    svm_input, mlp_input = extract_features_for_models(url)\n",
    "\n",
    "    # SVM\n",
    "    svm_pred = svm_model.predict(svm_scaler.transform(svm_input))[0]\n",
    "\n",
    "    # MLP\n",
    "    mlp_pred = int(mlp_model.predict(mlp_scaler.transform(mlp_input))[0][0] > 0.5)\n",
    "\n",
    "    # CNN\n",
    "    padded = pad_sequences(tokenizer.texts_to_sequences([url]), maxlen=200, padding='post')\n",
    "    cnn_pred = int(cnn_model.predict(padded)[0][0] > 0.5)\n",
    "\n",
    "    # Ensemble Voting\n",
    "    weighted = w_cnn * cnn_pred + w_svm * svm_pred + w_mlp * mlp_pred\n",
    "    ensemble_pred = int(round(weighted))\n",
    "\n",
    "    label_map = {0: \"Phishing\", 1: \"Legitimate\"}\n",
    "    return {\n",
    "        \"URL\": url,\n",
    "        \"Ensemble (Weighted)\": label_map[ensemble_pred]\n",
    "    }\n",
    "\n",
    "# === Test on dataset sample ===\n",
    "df = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")\n",
    "result = check_url(df['URL'].iloc[0])\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b5cf38d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:34:42.168170Z",
     "iopub.status.busy": "2025-04-22T12:34:42.167830Z",
     "iopub.status.idle": "2025-04-22T12:34:43.875962Z",
     "shell.execute_reply": "2025-04-22T12:34:43.874784Z"
    },
    "papermill": {
     "duration": 2.044214,
     "end_time": "2025-04-22T12:34:43.877782",
     "exception": false,
     "start_time": "2025-04-22T12:34:41.833568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking first 10 URLs...\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "1. nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "2. www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_home-customer&nav=1/loading.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "3. serviciosbys.com/paypal.cgi.bin.get-into.herf.secure.dispatch35463256rzr321654641dsf654321874/href/href/href/secure/center/update/limit/seccure/4d7a1ff5c55825a2e632a679c2fd5353/\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "4. mail.printakid.com/www.online.americanexpress.com/index.html\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "5. thewhiskeydregs.com/wp-content/themes/widescreen/includes/temp/promocoessmiles/?84784787824HDJNDJDSJSHD//2724782784/\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "6. smilesvoegol.servebbs.org/voegol.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "7. premierpaymentprocessing.com/includes/boleto-2via-07-2012.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "8. myxxxcollection.com/v1/js/jih321/bpd.com.do/do/l.popular.php\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "9. super1000.info/docs\n",
      "   ➤ Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "10. horizonsgallery.com/js/bin/ssl1/_id/www.paypal.com/fr/cgi-bin/webscr/cmd=_registration-run/login.php?cmd=_login-run&amp;dispatch=1471c4bdb044ae2be9e2fc3ec514b88b1471c4bdb044ae2be9e2fc3ec514b88b\n",
      "   ➤ Ensemble: Phishing\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test the first 10 URLs in the dataset\n",
    "print(\"Checking first 10 URLs...\\n\")\n",
    "for i, url in enumerate(df['URL'].head(10), start=1):\n",
    "    result = check_url(url)\n",
    "    print(f\"{i}. {result['URL']}\\n   ➤ Ensemble: {result['Ensemble (Weighted)']}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f36075db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:34:44.564262Z",
     "iopub.status.busy": "2025-04-22T12:34:44.563745Z",
     "iopub.status.idle": "2025-04-22T12:34:45.580945Z",
     "shell.execute_reply": "2025-04-22T12:34:45.580022Z"
    },
    "papermill": {
     "duration": 1.370987,
     "end_time": "2025-04-22T12:34:45.582434",
     "exception": false,
     "start_time": "2025-04-22T12:34:44.211447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Legitimate URL: www\u000eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\u0003Ë\n",
      "jlÛW¿]ø¾µj¿;\b·ªo!ÒPì ·ÊïH§#'3\u001bø@CÄR\u0002õ²çÇ\u0017\u0017Ý®\u0016ö\u001d",
      "QBÇÆg`Èå",
      "Zéê D\u001c",
      "îÂm®ÎÝQó*x;9?\u000fÁ\u0019Òâbùt\u001bÖ\u0007Ù®mÞNP¯°^MQ\n",
      "(\u001f-\u0004\u0006§;¬ÔAèUèé\\\u0010¨øíÌdB\\\u0001\u0012[q½=ÿVuÃ\u0001»\u0007râæH\u001bäô/µ}",
      "»7!2=´ÂÏ4¿ª¡j91\u0004]\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'URL': \"www\\x0eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\\x03Ë\\nÓ\\x176(rTÃ\\x06u\\x0f\\x8f\\x7fæ\\x82\\x0c\\x99=g\\x810¾\\x96÷mÖi\\x12Ó-;\\x9bXZ\\\\%êýü\\x05Éfn&\\x87\\\\°%7õÙ:¹u\\x96\\x0f\\x161ÌÑêFÄòW<\\x18\\x80$cï\\x86¦t[\\x910ò\\x9f>Þj\\x93®ÆeV2\\x92à\\x1bpù-íàÇ$E¤ZëÈ²ú\\x16SÌ¶\\tp\\x1fáSò°i°vþ[«³»]¹\\rjlÛW¿\\x95\\x9b\\x8a]ø¾µj¿;\\x08·ªo!\\x94ÒPì\\xa0·Ê\\x8bïH§#'\\x823\\x1bø@CÄR\\x02õ²çÇ\\x17\\x17Ý®\\x16ö\\x1d\\x7fQBÇÆg`Èå\\x85Zéê\\xa0D\\x1cîÂm\\x9e®ÎÝQó*x;9?\\x0fÁ\\x19\\x81Òâ\\x88\\x99bùt\\x1bÖ\\x07\\x96Ù®mÞ\\x80N\\x94\\x97P¯°^M\\x8eQ\\n(\\x1f-\\x04\\x06§;¬ÔAèUè\\x99é\\\\\\x10¨ø\\x95íÌ\\x88dB\\\\\\x01\\x8b\\x12[q½=ÿVuÃ\\x01»\\x07râæH\\x1bä\\x8dô/µ}\\x85»7!2=´ÂÏ4¿ª¡j91\\x04\\x86]\",\n",
       " 'Ensemble (Weighted)': 'Phishing'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Re-load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")\n",
    "\n",
    "# Get the second legitimate URL\n",
    "legit_url = df[df['Label'].str.lower() == 'good']['URL'].iloc[1]\n",
    "print(\"Legitimate URL:\", legit_url)\n",
    "\n",
    "# Run it through the model\n",
    "check_url(legit_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "772a8f68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:34:46.331783Z",
     "iopub.status.busy": "2025-04-22T12:34:46.331450Z",
     "iopub.status.idle": "2025-04-22T12:34:48.190618Z",
     "shell.execute_reply": "2025-04-22T12:34:48.189000Z"
    },
    "papermill": {
     "duration": 2.199754,
     "end_time": "2025-04-22T12:34:48.192543",
     "exception": false,
     "start_time": "2025-04-22T12:34:45.992789",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking 10 legitimate URLs...\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "1. depositaccounts.com/savings/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "2. citypages.com/related/to/Dave+Simonett/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "3. askart.com/askart/c/kate_carew/kate_carew.aspx\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "4. brianwattsphoto.com/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "5. thefreedictionary.com/action+deferred\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "6. desifunny.com/videos/pranks_n_gags/just_4_laughs_gags_trying_on_swimsuits-2582-1.aspx\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "7. www.consumerreports.org/cro/electronics-computers/cell-phones/cell-phones-sub/index.htm\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step\n",
      "8. guitarpartsresource.com/\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "9. youtube.com/watch?v=N6DMMOOGtX4\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "10. absoluteastronomy.com/topics/Casimir_Pierre_Perier\n",
      "   ➤ Ensemble: Legitimate\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Sample 10 random legitimate URLs\n",
    "legit_urls = df[df[\"Label\"].str.lower() == \"good\"][\"URL\"].sample(10, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Check each legitimate URL with the model\n",
    "print(\"Checking 10 legitimate URLs...\\n\")\n",
    "for i, url in enumerate(legit_urls, start=1):\n",
    "    result = check_url(url)\n",
    "    print(f\"{i}. {result['URL']}\\n   ➤ Ensemble: {result['Ensemble (Weighted)']}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "358613ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-22T12:34:48.905246Z",
     "iopub.status.busy": "2025-04-22T12:34:48.903345Z",
     "iopub.status.idle": "2025-04-22T12:34:49.074674Z",
     "shell.execute_reply": "2025-04-22T12:34:49.073725Z"
    },
    "papermill": {
     "duration": 0.51494,
     "end_time": "2025-04-22T12:34:49.076332",
     "exception": false,
     "start_time": "2025-04-22T12:34:48.561392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'URL': 'consumerreports.org/...', 'Ensemble (Weighted)': 'Phishing'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_url(\"consumerreports.org/...\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 791543,
     "sourceId": 1359146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1546.245828,
   "end_time": "2025-04-22T12:34:52.828677",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-22T12:09:06.582849",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

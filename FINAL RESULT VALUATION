{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2f74b797",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:39.779020Z",
     "iopub.status.busy": "2025-04-28T13:20:39.778709Z",
     "iopub.status.idle": "2025-04-28T13:20:41.765548Z",
     "shell.execute_reply": "2025-04-28T13:20:41.764456Z"
    },
    "papermill": {
     "duration": 1.997317,
     "end_time": "2025-04-28T13:20:41.767218",
     "exception": false,
     "start_time": "2025-04-28T13:20:39.769901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/phishing-site-urls/phishing_site_urls.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ca02e68",
   "metadata": {
    "papermill": {
     "duration": 0.006081,
     "end_time": "2025-04-28T13:20:41.779829",
     "exception": false,
     "start_time": "2025-04-28T13:20:41.773748",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Dataset Analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b709db9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:41.794638Z",
     "iopub.status.busy": "2025-04-28T13:20:41.794132Z",
     "iopub.status.idle": "2025-04-28T13:20:43.058705Z",
     "shell.execute_reply": "2025-04-28T13:20:43.057588Z"
    },
    "papermill": {
     "duration": 1.273204,
     "end_time": "2025-04-28T13:20:43.060388",
     "exception": false,
     "start_time": "2025-04-28T13:20:41.787184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dabe4722",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:43.073391Z",
     "iopub.status.busy": "2025-04-28T13:20:43.073086Z",
     "iopub.status.idle": "2025-04-28T13:20:43.099511Z",
     "shell.execute_reply": "2025-04-28T13:20:43.098389Z"
    },
    "papermill": {
     "duration": 0.034776,
     "end_time": "2025-04-28T13:20:43.101186",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.066410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ca4f80b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:43.114647Z",
     "iopub.status.busy": "2025-04-28T13:20:43.114248Z",
     "iopub.status.idle": "2025-04-28T13:20:43.122834Z",
     "shell.execute_reply": "2025-04-28T13:20:43.121979Z"
    },
    "papermill": {
     "duration": 0.016697,
     "end_time": "2025-04-28T13:20:43.124157",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.107460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "34a66d4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:43.138779Z",
     "iopub.status.busy": "2025-04-28T13:20:43.138071Z",
     "iopub.status.idle": "2025-04-28T13:20:43.142828Z",
     "shell.execute_reply": "2025-04-28T13:20:43.141802Z"
    },
    "papermill": {
     "duration": 0.013456,
     "end_time": "2025-04-28T13:20:43.144372",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.130916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (549346, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset shape:\", df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "65103599",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:43.158630Z",
     "iopub.status.busy": "2025-04-28T13:20:43.158032Z",
     "iopub.status.idle": "2025-04-28T13:20:43.165582Z",
     "shell.execute_reply": "2025-04-28T13:20:43.164443Z"
    },
    "papermill": {
     "duration": 0.016061,
     "end_time": "2025-04-28T13:20:43.167146",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.151085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['URL', 'Label'], dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc8fbda2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:43.181431Z",
     "iopub.status.busy": "2025-04-28T13:20:43.181084Z",
     "iopub.status.idle": "2025-04-28T13:20:43.251476Z",
     "shell.execute_reply": "2025-04-28T13:20:43.250580Z"
    },
    "papermill": {
     "duration": 0.079553,
     "end_time": "2025-04-28T13:20:43.253065",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.173512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5642cdd7",
   "metadata": {
    "papermill": {
     "duration": 0.006497,
     "end_time": "2025-04-28T13:20:43.266073",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.259576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "61d3d842",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:43.279604Z",
     "iopub.status.busy": "2025-04-28T13:20:43.279201Z",
     "iopub.status.idle": "2025-04-28T13:20:44.898701Z",
     "shell.execute_reply": "2025-04-28T13:20:44.897654Z"
    },
    "papermill": {
     "duration": 1.628126,
     "end_time": "2025-04-28T13:20:44.900322",
     "exception": false,
     "start_time": "2025-04-28T13:20:43.272196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "204dfae8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:44.915655Z",
     "iopub.status.busy": "2025-04-28T13:20:44.915163Z",
     "iopub.status.idle": "2025-04-28T13:20:45.030225Z",
     "shell.execute_reply": "2025-04-28T13:20:45.028929Z"
    },
    "papermill": {
     "duration": 0.125097,
     "end_time": "2025-04-28T13:20:45.032342",
     "exception": false,
     "start_time": "2025-04-28T13:20:44.907245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  label_encoded\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad              0\n",
       "1       www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad              0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad              0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad              0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad              0\n",
       "...                                                   ...   ...            ...\n",
       "549341                                    23.227.196.215/   bad              0\n",
       "549342                                 apple-checker.org/   bad              0\n",
       "549343                                  apple-iclods.org/   bad              0\n",
       "549344                                 apple-uptoday.org/   bad              0\n",
       "549345                                  apple-search.info   bad              0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode labels: 'good' - 1, 'bad' - 0\n",
    "df['label_encoded'] = LabelEncoder().fit_transform(df['Label'])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "44dc5842",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:45.048570Z",
     "iopub.status.busy": "2025-04-28T13:20:45.047588Z",
     "iopub.status.idle": "2025-04-28T13:20:45.377531Z",
     "shell.execute_reply": "2025-04-28T13:20:45.376635Z"
    },
    "papermill": {
     "duration": 0.339083,
     "end_time": "2025-04-28T13:20:45.378902",
     "exception": false,
     "start_time": "2025-04-28T13:20:45.039819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  label_encoded\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad              0\n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad              0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad              0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad              0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad              0\n",
       "...                                                   ...   ...            ...\n",
       "549341                                    23.227.196.215/   bad              0\n",
       "549342                                 apple-checker.org/   bad              0\n",
       "549343                                  apple-iclods.org/   bad              0\n",
       "549344                                 apple-uptoday.org/   bad              0\n",
       "549345                                  apple-search.info   bad              0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove 'www.' from URLs\n",
    "df['URL'] = df['URL'].str.replace(r'^www\\.', '', regex=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cfca5028",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:45.393311Z",
     "iopub.status.busy": "2025-04-28T13:20:45.393014Z",
     "iopub.status.idle": "2025-04-28T13:20:45.619256Z",
     "shell.execute_reply": "2025-04-28T13:20:45.618348Z"
    },
    "papermill": {
     "duration": 0.235147,
     "end_time": "2025-04-28T13:20:45.620711",
     "exception": false,
     "start_time": "2025-04-28T13:20:45.385564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "      <th>url_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "...                                                   ...   ...   \n",
       "549341                                    23.227.196.215/   bad   \n",
       "549342                                 apple-checker.org/   bad   \n",
       "549343                                  apple-iclods.org/   bad   \n",
       "549344                                 apple-uptoday.org/   bad   \n",
       "549345                                  apple-search.info   bad   \n",
       "\n",
       "        label_encoded  url_length  \n",
       "0                   0         225  \n",
       "1                   0          77  \n",
       "2                   0         177  \n",
       "3                   0          60  \n",
       "4                   0         116  \n",
       "...               ...         ...  \n",
       "549341              0          15  \n",
       "549342              0          18  \n",
       "549343              0          17  \n",
       "549344              0          18  \n",
       "549345              0          17  \n",
       "\n",
       "[549346 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 1: Length of URL\n",
    "df['url_length'] = df['URL'].apply(lambda x: len(str(x)))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0955ca42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:45.635519Z",
     "iopub.status.busy": "2025-04-28T13:20:45.635184Z",
     "iopub.status.idle": "2025-04-28T13:20:46.839875Z",
     "shell.execute_reply": "2025-04-28T13:20:46.838446Z"
    },
    "papermill": {
     "duration": 1.2143,
     "end_time": "2025-04-28T13:20:46.841983",
     "exception": false,
     "start_time": "2025-04-28T13:20:45.627683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 2: Use of IP address\n",
    "def has_ip(url):\n",
    "    return 1 if re.search(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', url) else 0\n",
    "\n",
    "df['use_of_ip'] = df['URL'].apply(has_ip)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "08f301c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:46.859194Z",
     "iopub.status.busy": "2025-04-28T13:20:46.858369Z",
     "iopub.status.idle": "2025-04-28T13:20:47.335752Z",
     "shell.execute_reply": "2025-04-28T13:20:47.334838Z"
    },
    "papermill": {
     "duration": 0.486669,
     "end_time": "2025-04-28T13:20:47.337303",
     "exception": false,
     "start_time": "2025-04-28T13:20:46.850634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 3: Abnormal URL (absence of hostname)\n",
    "def abnormal_url(url):\n",
    "    hostname = re.findall(r\"https?://([^/]+)\", url)\n",
    "    return 1 if not hostname else 0\n",
    "\n",
    "df['abnormal_url'] = df['URL'].apply(abnormal_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9d6b4c8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:47.353266Z",
     "iopub.status.busy": "2025-04-28T13:20:47.352413Z",
     "iopub.status.idle": "2025-04-28T13:20:50.898082Z",
     "shell.execute_reply": "2025-04-28T13:20:50.896970Z"
    },
    "papermill": {
     "duration": 3.555717,
     "end_time": "2025-04-28T13:20:50.900008",
     "exception": false,
     "start_time": "2025-04-28T13:20:47.344291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 4: Count of suspicious special characters\n",
    "special_chars = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "for char in special_chars:\n",
    "    df[f'count_{char}'] = df['URL'].apply(lambda x: x.count(char))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "265a5401",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:50.915451Z",
     "iopub.status.busy": "2025-04-28T13:20:50.915129Z",
     "iopub.status.idle": "2025-04-28T13:20:55.043959Z",
     "shell.execute_reply": "2025-04-28T13:20:55.043029Z"
    },
    "papermill": {
     "duration": 4.138453,
     "end_time": "2025-04-28T13:20:55.045820",
     "exception": false,
     "start_time": "2025-04-28T13:20:50.907367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>label_encoded</th>\n",
       "      <th>url_length</th>\n",
       "      <th>use_of_ip</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>count_@</th>\n",
       "      <th>count_?</th>\n",
       "      <th>count_-</th>\n",
       "      <th>count_=</th>\n",
       "      <th>...</th>\n",
       "      <th>count_#</th>\n",
       "      <th>count_%</th>\n",
       "      <th>count_+</th>\n",
       "      <th>count_$</th>\n",
       "      <th>count_!</th>\n",
       "      <th>count_*</th>\n",
       "      <th>count_,</th>\n",
       "      <th>count_//</th>\n",
       "      <th>digit_count</th>\n",
       "      <th>letter_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad   \n",
       "...                                                   ...   ...   \n",
       "549341                                    23.227.196.215/   bad   \n",
       "549342                                 apple-checker.org/   bad   \n",
       "549343                                  apple-iclods.org/   bad   \n",
       "549344                                 apple-uptoday.org/   bad   \n",
       "549345                                  apple-search.info   bad   \n",
       "\n",
       "        label_encoded  url_length  use_of_ip  abnormal_url  count_@  count_?  \\\n",
       "0                   0         225          0             1        0        1   \n",
       "1                   0          77          0             1        0        0   \n",
       "2                   0         177          0             1        0        0   \n",
       "3                   0          60          0             1        0        0   \n",
       "4                   0         116          0             1        0        1   \n",
       "...               ...         ...        ...           ...      ...      ...   \n",
       "549341              0          15          1             1        0        0   \n",
       "549342              0          18          0             1        0        0   \n",
       "549343              0          17          0             1        0        0   \n",
       "549344              0          18          0             1        0        0   \n",
       "549345              0          17          0             1        0        0   \n",
       "\n",
       "        count_-  count_=  ...  count_#  count_%  count_+  count_$  count_!  \\\n",
       "0             4        4  ...        0        0        0        0        0   \n",
       "1             2        2  ...        0        0        0        0        0   \n",
       "2             1        0  ...        0        0        0        0        0   \n",
       "3             0        0  ...        0        0        0        0        0   \n",
       "4             1        0  ...        0        0        0        0        0   \n",
       "...         ...      ...  ...      ...      ...      ...      ...      ...   \n",
       "549341        0        0  ...        0        0        0        0        0   \n",
       "549342        1        0  ...        0        0        0        0        0   \n",
       "549343        1        0  ...        0        0        0        0        0   \n",
       "549344        1        0  ...        0        0        0        0        0   \n",
       "549345        1        0  ...        0        0        0        0        0   \n",
       "\n",
       "        count_*  count_,  count_//  digit_count  letter_count  \n",
       "0             0        0         0           58           135  \n",
       "1             0        0         0            1            62  \n",
       "2             0        0         0           47           111  \n",
       "3             0        0         0            0            52  \n",
       "4             0        0         1           21            82  \n",
       "...         ...      ...       ...          ...           ...  \n",
       "549341        0        0         0           11             0  \n",
       "549342        0        0         0            0            15  \n",
       "549343        0        0         0            0            14  \n",
       "549344        0        0         0            0            15  \n",
       "549345        0        0         0            0            15  \n",
       "\n",
       "[549346 rows x 21 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Feature 5: Count digits and letters\n",
    "df['digit_count'] = df['URL'].apply(lambda x: sum(c.isdigit() for c in x))\n",
    "df['letter_count'] = df['URL'].apply(lambda x: sum(c.isalpha() for c in x))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3b98077a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:55.063164Z",
     "iopub.status.busy": "2025-04-28T13:20:55.062859Z",
     "iopub.status.idle": "2025-04-28T13:20:56.301924Z",
     "shell.execute_reply": "2025-04-28T13:20:56.301129Z"
    },
    "papermill": {
     "duration": 1.250207,
     "end_time": "2025-04-28T13:20:56.303638",
     "exception": false,
     "start_time": "2025-04-28T13:20:55.053431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature 6: Shortening services detection\n",
    "shorteners = r\"bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc\"\n",
    "df['shortening_service'] = df['URL'].apply(lambda x: 1 if re.search(shorteners, x) else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f00655a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:56.320998Z",
     "iopub.status.busy": "2025-04-28T13:20:56.320705Z",
     "iopub.status.idle": "2025-04-28T13:20:56.393812Z",
     "shell.execute_reply": "2025-04-28T13:20:56.392815Z"
    },
    "papermill": {
     "duration": 0.084488,
     "end_time": "2025-04-28T13:20:56.395867",
     "exception": false,
     "start_time": "2025-04-28T13:20:56.311379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Final feature matrix (X) and label vector (y)\n",
    "X = df.drop(columns=['URL', 'Label', 'label_encoded'])\n",
    "y = df['label_encoded']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "00ddf7f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:56.413302Z",
     "iopub.status.busy": "2025-04-28T13:20:56.412368Z",
     "iopub.status.idle": "2025-04-28T13:20:59.905738Z",
     "shell.execute_reply": "2025-04-28T13:20:59.904567Z"
    },
    "papermill": {
     "duration": 3.503562,
     "end_time": "2025-04-28T13:20:59.907392",
     "exception": false,
     "start_time": "2025-04-28T13:20:56.403830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Preprocessed model is ready for use.\n"
     ]
    }
   ],
   "source": [
    "# Save cleaned version for inspection or modeling\n",
    "df.drop(columns=['Label']).to_csv('/kaggle/working/phishing_processed.csv', index=False)\n",
    "\n",
    "print(\" Preprocessed model is ready for use.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9211731d",
   "metadata": {
    "papermill": {
     "duration": 0.007002,
     "end_time": "2025-04-28T13:20:59.921922",
     "exception": false,
     "start_time": "2025-04-28T13:20:59.914920",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Development**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6086da5",
   "metadata": {
    "papermill": {
     "duration": 0.006912,
     "end_time": "2025-04-28T13:20:59.936356",
     "exception": false,
     "start_time": "2025-04-28T13:20:59.929444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**CNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4e28c5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:20:59.952140Z",
     "iopub.status.busy": "2025-04-28T13:20:59.951805Z",
     "iopub.status.idle": "2025-04-28T13:28:26.691797Z",
     "shell.execute_reply": "2025-04-28T13:28:26.690819Z"
    },
    "papermill": {
     "duration": 446.749986,
     "end_time": "2025-04-28T13:28:26.693641",
     "exception": false,
     "start_time": "2025-04-28T13:20:59.943655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-28 13:21:02.650562: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745846462.915701      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745846462.994962      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-28 13:21:31.840568: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 52ms/step - accuracy: 0.8744 - loss: 0.2935 - val_accuracy: 0.9507 - val_loss: 0.1382\n",
      "Epoch 2/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 52ms/step - accuracy: 0.9541 - loss: 0.1271 - val_accuracy: 0.9567 - val_loss: 0.1202\n",
      "Epoch 3/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 51ms/step - accuracy: 0.9608 - loss: 0.1084 - val_accuracy: 0.9548 - val_loss: 0.1223\n",
      "Epoch 4/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 52ms/step - accuracy: 0.9632 - loss: 0.1022 - val_accuracy: 0.9613 - val_loss: 0.1065\n",
      "Epoch 5/5\n",
      "\u001b[1m1546/1546\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 51ms/step - accuracy: 0.9658 - loss: 0.0931 - val_accuracy: 0.9536 - val_loss: 0.1235\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step\n",
      "Accuracy: 0.963274779284609\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.95      0.92      0.93     31285\n",
      "  Legitimate       0.97      0.98      0.97     78585\n",
      "\n",
      "    accuracy                           0.96    109870\n",
      "   macro avg       0.96      0.95      0.95    109870\n",
      "weighted avg       0.96      0.96      0.96    109870\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "['cnn_tokenizer.pkl']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import joblib\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "# Load and prepare dataset\n",
    "df = pd.read_csv('/kaggle/input/phishing-site-urls/phishing_site_urls.csv')\n",
    "df['label_encoded'] = LabelEncoder().fit_transform(df['Label'])\n",
    "\n",
    "# Tokenizer: char-level\n",
    "tokenizer = Tokenizer(char_level=True, oov_token='OOV')\n",
    "tokenizer.fit_on_texts(df['URL'])\n",
    "\n",
    "# Convert URLs to padded sequences\n",
    "sequences = tokenizer.texts_to_sequences(df['URL'])\n",
    "max_len = 200\n",
    "X = pad_sequences(sequences, maxlen=max_len, padding='post', truncating='post')\n",
    "y = df['label_encoded'].values\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "# Define CNN model\n",
    "vocab_size = len(tokenizer.word_index) + 1\n",
    "\n",
    "cnn_model = Sequential([\n",
    "    Embedding(input_dim=vocab_size, output_dim=32, input_length=max_len),\n",
    "    Conv1D(64, kernel_size=5, activation='relu'),\n",
    "    GlobalMaxPooling1D(),\n",
    "    Dense(32, activation='relu'),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "cnn_model.build(input_shape=(None, max_len))\n",
    "cnn_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "cnn_model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs=5,\n",
    "    batch_size=256,\n",
    "    validation_split=0.1,\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "# Predict\n",
    "y_pred_cnn = (cnn_model.predict(X_test) > 0.5).astype(int)\n",
    "\n",
    "# Evaluate\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_cnn))\n",
    "print(classification_report(y_test, y_pred_cnn, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred_cnn)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=[\"Phishing\", \"Legitimate\"],\n",
    "            yticklabels=[\"Phishing\", \"Legitimate\"])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('CNN Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Save model and tokenizer\n",
    "cnn_model.save('cnn_model.h5')\n",
    "joblib.dump(tokenizer, 'cnn_tokenizer.pkl')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06f2650e",
   "metadata": {
    "papermill": {
     "duration": 0.266642,
     "end_time": "2025-04-28T13:28:27.231571",
     "exception": false,
     "start_time": "2025-04-28T13:28:26.964929",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**SVM**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "778959d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:28:27.850874Z",
     "iopub.status.busy": "2025-04-28T13:28:27.850551Z",
     "iopub.status.idle": "2025-04-28T13:41:00.570097Z",
     "shell.execute_reply": "2025-04-28T13:41:00.568909Z"
    },
    "papermill": {
     "duration": 752.993754,
     "end_time": "2025-04-28T13:41:00.572192",
     "exception": false,
     "start_time": "2025-04-28T13:28:27.578438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10%] Loading preprocessed dataset...\n",
      "[20%] Sampling 50K records (25K per class)...\n",
      "[30%] Selecting feature set...\n",
      "[40%] Splitting train/test sets...\n",
      "[50%] Scaling features...\n",
      "[70%] Tuning RBF-SVM hyperparameters...\n",
      " C=0.1, gamma=0.01 → F1 Score: 0.5820\n",
      " C=0.1, gamma=0.1 → F1 Score: 0.6178\n",
      " C=0.1, gamma=1 → F1 Score: 0.6959\n",
      " C=1, gamma=0.01 → F1 Score: 0.5832\n",
      " C=1, gamma=0.1 → F1 Score: 0.6427\n",
      " C=1, gamma=1 → F1 Score: 0.7159\n",
      " C=5, gamma=0.01 → F1 Score: 0.5862\n",
      " C=5, gamma=0.1 → F1 Score: 0.6576\n",
      " C=5, gamma=1 → F1 Score: 0.7194\n",
      "[80%] Best Params: {'C': 5, 'gamma': 1} | Macro F1 Score: 0.7194\n",
      "[90%] Final Evaluation...\n",
      "Accuracy: 0.7257\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.82      0.58      0.68      5000\n",
      "  Legitimate       0.67      0.88      0.76      5000\n",
      "\n",
      "    accuracy                           0.73     10000\n",
      "   macro avg       0.75      0.73      0.72     10000\n",
      "weighted avg       0.75      0.73      0.72     10000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Saving RBF-SVM model and scaler...\n",
      "Model and scaler saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n",
    "\n",
    "print(\"[10%] Loading preprocessed dataset...\")\n",
    "df = pd.read_csv('/kaggle/working/phishing_processed.csv')\n",
    "\n",
    "print(\"[20%] Sampling 50K records (25K per class)...\")\n",
    "df_sampled = df.groupby('label_encoded', group_keys=False).apply(\n",
    "    lambda x: x.sample(25000, random_state=42)\n",
    ").reset_index(drop=True)\n",
    "\n",
    "\n",
    "print(\"[30%] Selecting feature set...\")\n",
    "features = [\n",
    "    'url_length', 'use_of_ip', 'abnormal_url',\n",
    "    'digit_count', 'letter_count', 'shortening_service',\n",
    "    'count_@', 'count_?', 'count_-', 'count_=', 'count_//'\n",
    "]\n",
    "X = df_sampled[features]\n",
    "y = df_sampled['label_encoded']\n",
    "\n",
    "print(\"[40%] Splitting train/test sets...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "print(\"[50%] Scaling features...\")\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Hyperparameter grid\n",
    "C_values = [0.1, 1, 5]\n",
    "gamma_values = [0.01, 0.1, 1]\n",
    "\n",
    "print(\"[70%] Tuning RBF-SVM hyperparameters...\")\n",
    "best_score = 0\n",
    "best_model = None\n",
    "best_params = {}\n",
    "\n",
    "for C in C_values:\n",
    "    for gamma in gamma_values:\n",
    "        model = SVC(kernel='rbf', C=C, gamma=gamma, class_weight='balanced')\n",
    "        model.fit(X_train_scaled, y_train)\n",
    "        y_pred = model.predict(X_test_scaled)\n",
    "        score = f1_score(y_test, y_pred, average='macro')\n",
    "\n",
    "        print(f\" C={C}, gamma={gamma} → F1 Score: {score:.4f}\")\n",
    "\n",
    "        if score > best_score:\n",
    "            best_score = score\n",
    "            best_model = model\n",
    "            best_params = {'C': C, 'gamma': gamma}\n",
    "\n",
    "print(f\"[80%] Best Params: {best_params} | Macro F1 Score: {best_score:.4f}\")\n",
    "\n",
    "# Final prediction\n",
    "svm_model = best_model\n",
    "y_pred_svm = svm_model.predict(X_test_scaled)\n",
    "\n",
    "print(\"[90%] Final Evaluation...\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_svm, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_svm)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=[\"Phishing\", \"Legitimate\"],\n",
    "            yticklabels=[\"Phishing\", \"Legitimate\"])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('RBF-SVM Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "print(\"[100%] Saving RBF-SVM model and scaler...\")\n",
    "joblib.dump(svm_model, 'svm_rbf_model.pkl')\n",
    "joblib.dump(scaler, 'svm_rbf_scaler.pkl')\n",
    "print(\"Model and scaler saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "557ce630",
   "metadata": {
    "papermill": {
     "duration": 0.272124,
     "end_time": "2025-04-28T13:41:01.121335",
     "exception": false,
     "start_time": "2025-04-28T13:41:00.849211",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MLP**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4f8230bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:41:01.736354Z",
     "iopub.status.busy": "2025-04-28T13:41:01.736029Z",
     "iopub.status.idle": "2025-04-28T13:46:22.666560Z",
     "shell.execute_reply": "2025-04-28T13:46:22.665583Z"
    },
    "papermill": {
     "duration": 321.276607,
     "end_time": "2025-04-28T13:46:22.668176",
     "exception": false,
     "start_time": "2025-04-28T13:41:01.391569",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10%] Loading preprocessed dataset...\n",
      "[20%] Feature engineering (advanced)...\n",
      "[40%] Creating full feature matrix and target vector...\n",
      "[50%] Dataset size: 549346 samples, 23 features\n",
      "[60%] Splitting full dataset (80% train / 20% test)...\n",
      "[70%] Scaling features...\n",
      "[80%] Building deeper regularized MLP model...\n",
      "[90%] Training MLP on full dataset...\n",
      "Epoch 1/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 17ms/step - accuracy: 0.7520 - loss: 0.5239 - val_accuracy: 0.7960 - val_loss: 0.4368\n",
      "Epoch 2/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8054 - loss: 0.4373 - val_accuracy: 0.8184 - val_loss: 0.4123\n",
      "Epoch 3/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8183 - loss: 0.4149 - val_accuracy: 0.8177 - val_loss: 0.4039\n",
      "Epoch 4/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8258 - loss: 0.4007 - val_accuracy: 0.8312 - val_loss: 0.3835\n",
      "Epoch 5/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8307 - loss: 0.3915 - val_accuracy: 0.8310 - val_loss: 0.3808\n",
      "Epoch 6/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 17ms/step - accuracy: 0.8317 - loss: 0.3873 - val_accuracy: 0.8355 - val_loss: 0.3732\n",
      "Epoch 7/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8331 - loss: 0.3837 - val_accuracy: 0.8299 - val_loss: 0.3841\n",
      "Epoch 8/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8354 - loss: 0.3798 - val_accuracy: 0.8390 - val_loss: 0.3679\n",
      "Epoch 9/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8371 - loss: 0.3755 - val_accuracy: 0.8402 - val_loss: 0.3650\n",
      "Epoch 10/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8375 - loss: 0.3746 - val_accuracy: 0.8414 - val_loss: 0.3626\n",
      "Epoch 11/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8379 - loss: 0.3730 - val_accuracy: 0.8405 - val_loss: 0.3671\n",
      "Epoch 12/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8387 - loss: 0.3715 - val_accuracy: 0.8415 - val_loss: 0.3620\n",
      "Epoch 13/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8396 - loss: 0.3694 - val_accuracy: 0.8398 - val_loss: 0.3654\n",
      "Epoch 14/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8395 - loss: 0.3697 - val_accuracy: 0.8419 - val_loss: 0.3602\n",
      "Epoch 15/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 16ms/step - accuracy: 0.8417 - loss: 0.3654 - val_accuracy: 0.8358 - val_loss: 0.3704\n",
      "Epoch 16/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8418 - loss: 0.3655 - val_accuracy: 0.8434 - val_loss: 0.3582\n",
      "Epoch 17/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8414 - loss: 0.3653 - val_accuracy: 0.8426 - val_loss: 0.3613\n",
      "Epoch 18/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8408 - loss: 0.3660 - val_accuracy: 0.8439 - val_loss: 0.3569\n",
      "Epoch 19/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8415 - loss: 0.3646 - val_accuracy: 0.8450 - val_loss: 0.3541\n",
      "Epoch 20/20\n",
      "\u001b[1m387/387\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 15ms/step - accuracy: 0.8421 - loss: 0.3639 - val_accuracy: 0.8438 - val_loss: 0.3565\n",
      "[95%] Evaluating on test set...\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 1ms/step\n",
      "MLP Accuracy: 0.8485482843360335\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.84      0.57      0.68     31285\n",
      "  Legitimate       0.85      0.96      0.90     78585\n",
      "\n",
      "    accuracy                           0.85    109870\n",
      "   macro avg       0.85      0.77      0.79    109870\n",
      "weighted avg       0.85      0.85      0.84    109870\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Saving full-trained MLP model and scaler...\n",
      "Full MLP model and scaler saved successfully.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "from urllib.parse import urlparse\n",
    "from scipy.stats import entropy\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "print(\"[10%] Loading preprocessed dataset...\")\n",
    "df = pd.read_csv('/kaggle/working/phishing_processed.csv')\n",
    "features_df = df.copy()\n",
    "\n",
    "print(\"[20%] Feature engineering (advanced)...\")\n",
    "\n",
    "def has_ip(url): return 1 if re.search(r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b', url) else 0\n",
    "def abnormal_url(url): return 1 if not re.findall(r\"https?://([^/]+)\", url) else 0\n",
    "def https_token(url): return 1 if 'https' in url.lower() else 0\n",
    "def subdomain_count(url): \n",
    "    try: return urlparse(url).hostname.count('.') - 1\n",
    "    except: return 0\n",
    "def tld_length(url): \n",
    "    try: return len(urlparse(url).hostname.split('.')[-1])\n",
    "    except: return 0\n",
    "def url_entropy(url):\n",
    "    prob = [url.count(c)/len(url) for c in set(url)]\n",
    "    return round(entropy(prob, base=2), 4)\n",
    "\n",
    "features_df['url_length'] = features_df['URL'].apply(len)\n",
    "features_df['use_of_ip'] = features_df['URL'].apply(has_ip)\n",
    "features_df['abnormal_url'] = features_df['URL'].apply(abnormal_url)\n",
    "features_df['https_token'] = features_df['URL'].apply(https_token)\n",
    "features_df['subdomain_count'] = features_df['URL'].apply(subdomain_count)\n",
    "features_df['tld_length'] = features_df['URL'].apply(tld_length)\n",
    "features_df['url_entropy'] = features_df['URL'].apply(url_entropy)\n",
    "\n",
    "for ch in ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']:\n",
    "    features_df[f'count_{ch}'] = features_df['URL'].apply(lambda x: x.count(ch))\n",
    "\n",
    "features_df['digit_count'] = features_df['URL'].apply(lambda x: sum(c.isdigit() for c in x))\n",
    "features_df['letter_count'] = features_df['URL'].apply(lambda x: sum(c.isalpha() for c in x))\n",
    "features_df['shortening_service'] = features_df['URL'].apply(lambda x: 1 if re.search(r\"bit\\.ly|tinyurl|t\\.co\", x) else 0)\n",
    "\n",
    "print(\"[40%] Creating full feature matrix and target vector...\")\n",
    "X = features_df.drop(columns=['URL', 'Label', 'label_encoded'], errors='ignore')\n",
    "y = features_df['label_encoded']\n",
    "\n",
    "print(f\"[50%] Dataset size: {X.shape[0]} samples, {X.shape[1]} features\")\n",
    "\n",
    "print(\"[60%] Splitting full dataset (80% train / 20% test)...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, stratify=y, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "print(\"[70%] Scaling features...\")\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "print(\"[80%] Building deeper regularized MLP model...\")\n",
    "mlp_model = Sequential([\n",
    "    Dense(256, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.3),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "mlp_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "print(\"[90%] Training MLP on full dataset...\")\n",
    "mlp_model.fit(\n",
    "    X_train_scaled, y_train,\n",
    "    validation_split=0.1,\n",
    "    epochs=20,\n",
    "    batch_size=1024,\n",
    "    callbacks=[early_stop],\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "print(\"[95%] Evaluating on test set...\")\n",
    "y_pred_mlp = (mlp_model.predict(X_test_scaled) > 0.5).astype(int).flatten()\n",
    "\n",
    "print(\"MLP Accuracy:\", accuracy_score(y_test, y_pred_mlp))\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred_mlp, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_mlp)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Phishing', 'Legitimate'],\n",
    "            yticklabels=['Phishing', 'Legitimate'])\n",
    "plt.title('MLP Confusion Matrix (100% Dataset)')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "print(\"[100%] Saving full-trained MLP model and scaler...\")\n",
    "mlp_model.save('mlp_full_model.h5')\n",
    "joblib.dump(scaler, 'mlp_full_scaler.pkl')\n",
    "print(\"Full MLP model and scaler saved successfully.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddc0a7c7",
   "metadata": {
    "papermill": {
     "duration": 0.407383,
     "end_time": "2025-04-28T13:46:23.468914",
     "exception": false,
     "start_time": "2025-04-28T13:46:23.061531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "09deda68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:46:24.301897Z",
     "iopub.status.busy": "2025-04-28T13:46:24.301596Z",
     "iopub.status.idle": "2025-04-28T13:46:24.709039Z",
     "shell.execute_reply": "2025-04-28T13:46:24.707995Z"
    },
    "papermill": {
     "duration": 0.861136,
     "end_time": "2025-04-28T13:46:24.710567",
     "exception": false,
     "start_time": "2025-04-28T13:46:23.849431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Best Weights (CNN, SVM, MLP): (0.6, 0.1, 0.30000000000000004)\n",
      "Weighted Ensemble Accuracy: 0.9635\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    Phishing       0.95      0.92      0.94      2859\n",
      "  Legitimate       0.97      0.98      0.97      7141\n",
      "\n",
      "    accuracy                           0.96     10000\n",
      "   macro avg       0.96      0.95      0.95     10000\n",
      "weighted avg       0.96      0.96      0.96     10000\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Ensemble model saved as 'ensemble_model.pkl'\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import joblib\n",
    "\n",
    "# Step 1: Ensuring all predictions and test labels are trimmed to the same length\n",
    "min_len = min(len(y_pred_cnn), len(y_pred_svm), len(y_pred_mlp))\n",
    "y_pred_cnn_trimmed = y_pred_cnn[:min_len].flatten()\n",
    "y_pred_svm_trimmed = y_pred_svm[:min_len]\n",
    "y_pred_mlp_trimmed = y_pred_mlp[:min_len]\n",
    "y_test_trimmed = y_test[:min_len]\n",
    "\n",
    "# Step 2: Generate weight combinations for (cnn, svm, mlp) where sum = 1\n",
    "weight_grid = [\n",
    "    (w1, w2, 1 - w1 - w2)\n",
    "    for w1 in np.arange(0.1, 0.9, 0.1)\n",
    "    for w2 in np.arange(0.1, 0.9, 0.1)\n",
    "    if 0 < 1 - w1 - w2 < 1\n",
    "]\n",
    "\n",
    "best_score = 0\n",
    "best_weights = (0.33, 0.33, 0.34)\n",
    "best_preds = None\n",
    "\n",
    "# Step 3: Trying each weight combination\n",
    "for w_cnn, w_svm, w_mlp in weight_grid:\n",
    "    combined = (w_cnn * y_pred_cnn_trimmed +\n",
    "                w_svm * y_pred_svm_trimmed +\n",
    "                w_mlp * y_pred_mlp_trimmed)\n",
    "    \n",
    "    y_pred_weighted = np.round(combined).astype(int)\n",
    "    f1 = f1_score(y_test_trimmed, y_pred_weighted, average='macro')\n",
    "    \n",
    "    if f1 > best_score:\n",
    "        best_score = f1\n",
    "        best_weights = (w_cnn, w_svm, w_mlp)\n",
    "        best_preds = y_pred_weighted\n",
    "\n",
    "# Step 4: Final Evaluation with Best Weights\n",
    "print(\"\\n Best Weights (CNN, SVM, MLP):\", best_weights)\n",
    "print(\"Weighted Ensemble Accuracy:\", accuracy_score(y_test_trimmed, best_preds))\n",
    "print(classification_report(y_test_trimmed, best_preds, target_names=[\"Phishing\", \"Legitimate\"]))\n",
    "\n",
    "# Step 5: Confusion Matrix\n",
    "cm = confusion_matrix(y_test_trimmed, best_preds)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Phishing', 'Legitimate'],\n",
    "            yticklabels=['Phishing', 'Legitimate'])\n",
    "plt.title('Weighted Ensemble Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "# Step 6: Save ensemble weights and predictions\n",
    "joblib.dump({'weights': best_weights, 'predictions': best_preds}, 'ensemble_model.pkl')\n",
    "print(\"\\n Ensemble model saved as 'ensemble_model.pkl'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "858874f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:46:25.525141Z",
     "iopub.status.busy": "2025-04-28T13:46:25.524757Z",
     "iopub.status.idle": "2025-04-28T13:46:32.616723Z",
     "shell.execute_reply": "2025-04-28T13:46:32.615655Z"
    },
    "papermill": {
     "duration": 7.485043,
     "end_time": "2025-04-28T13:46:32.618281",
     "exception": false,
     "start_time": "2025-04-28T13:46:25.133238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tldextract\r\n",
      "  Downloading tldextract-5.3.0-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from tldextract) (3.10)\r\n",
      "Requirement already satisfied: requests>=2.1.0 in /usr/local/lib/python3.11/dist-packages (from tldextract) (2.32.3)\r\n",
      "Collecting requests-file>=1.4 (from tldextract)\r\n",
      "  Downloading requests_file-2.1.0-py2.py3-none-any.whl.metadata (1.7 kB)\r\n",
      "Requirement already satisfied: filelock>=3.0.8 in /usr/local/lib/python3.11/dist-packages (from tldextract) (3.18.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (3.4.1)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.1.0->tldextract) (2025.1.31)\r\n",
      "Downloading tldextract-5.3.0-py3-none-any.whl (107 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.4/107.4 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading requests_file-2.1.0-py2.py3-none-any.whl (4.2 kB)\r\n",
      "Installing collected packages: requests-file, tldextract\r\n",
      "Successfully installed requests-file-2.1.0 tldextract-5.3.0\r\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 152ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 101ms/step\n",
      "{'URL': 'nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526', 'Ensemble (Weighted)': 'Phishing'}\n"
     ]
    }
   ],
   "source": [
    "!pip install tldextract\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import tldextract\n",
    "import joblib\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Load all models and transformers \n",
    "mlp_model = load_model(\"/kaggle/working/mlp_full_model.h5\")\n",
    "cnn_model = load_model(\"/kaggle/working/cnn_model.h5\")\n",
    "svm_model = joblib.load(\"/kaggle/working/svm_rbf_model.pkl\")\n",
    "mlp_scaler = joblib.load(\"/kaggle/working/mlp_full_scaler.pkl\")\n",
    "svm_scaler = joblib.load(\"/kaggle/working/svm_rbf_scaler.pkl\")\n",
    "tokenizer = joblib.load(\"/kaggle/working/cnn_tokenizer.pkl\")\n",
    "ensemble_data = joblib.load(\"/kaggle/working/ensemble_model.pkl\")\n",
    "w_cnn, w_svm, w_mlp = ensemble_data['weights']\n",
    "\n",
    "# Feature sets used during training \n",
    "svm_features = ['url_length', 'use_of_ip', 'abnormal_url',\n",
    "                'digit_count', 'letter_count', 'shortening_service',\n",
    "                'count_@', 'count_?', 'count_-', 'count_=', 'count_//']\n",
    "\n",
    "mlp_features = ['url_length', 'use_of_ip', 'abnormal_url',\n",
    "                'count_@', 'count_?', 'count_-', 'count_=', 'count_.',\n",
    "                'count_#', 'count_%', 'count_+', 'count_$', 'count_!',\n",
    "                'count_*', 'count_,', 'count_//', 'digit_count',\n",
    "                'letter_count', 'shortening_service', 'https_token',\n",
    "                'subdomain_count', 'tld_length', 'url_entropy']\n",
    "\n",
    "# Feature extraction for both models\n",
    "def extract_features_for_models(url):\n",
    "    def abnormal_url(url): return 1 if re.search(r\"https?://([^/]+)\", url) == [] else 0\n",
    "    def having_ip_address(url): return 1 if re.search(r\"\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b\", url) else 0\n",
    "    def digit_count(url): return sum(c.isdigit() for c in url)\n",
    "    def letter_count(url): return sum(c.isalpha() for c in url)\n",
    "    def shortening_service(url): return 1 if re.search(r\"bit\\.ly|goo\\.gl|tinyurl\\.com|ow\\.ly|t\\.co|bitly\\.com\", url) else 0\n",
    "    def https_token(url): return 1 if 'https' in url.lower() else 0\n",
    "    def subdomain_count(url): return len(tldextract.extract(url).subdomain.split('.')) if tldextract.extract(url).subdomain else 0\n",
    "    def tld_length(url): return len(tldextract.extract(url).suffix)\n",
    "    \n",
    "    def url_entropy(url):\n",
    "        entropy = 0\n",
    "        for c in set(url):\n",
    "            p = url.count(c) / len(url)\n",
    "            if p > 0:\n",
    "                entropy -= p * np.log2(p)\n",
    "        return entropy\n",
    "\n",
    "    # Count of special characters\n",
    "    specials = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "    specials_dict = {f'count_{c}': url.count(c) for c in specials}\n",
    "\n",
    "    features = {\n",
    "        'url_length': len(url),\n",
    "        'use_of_ip': having_ip_address(url),\n",
    "        'abnormal_url': abnormal_url(url),\n",
    "        'digit_count': digit_count(url),\n",
    "        'letter_count': letter_count(url),\n",
    "        'shortening_service': shortening_service(url),\n",
    "        'https_token': https_token(url),\n",
    "        'subdomain_count': subdomain_count(url),\n",
    "        'tld_length': tld_length(url),\n",
    "        'url_entropy': url_entropy(url)\n",
    "    }\n",
    "    features.update(specials_dict)\n",
    "\n",
    "    # Create aligned feature sets\n",
    "    svm_vector = pd.DataFrame([[features.get(f, 0) for f in svm_features]], columns=svm_features)\n",
    "    mlp_vector = pd.DataFrame([[features.get(f, 0) for f in mlp_features]], columns=mlp_features)\n",
    "    return svm_vector, mlp_vector\n",
    "\n",
    "#  Prediction function \n",
    "def check_url(url):\n",
    "    svm_input, mlp_input = extract_features_for_models(url)\n",
    "\n",
    "    # SVM\n",
    "    svm_pred = svm_model.predict(svm_scaler.transform(svm_input))[0]\n",
    "\n",
    "    # MLP\n",
    "    mlp_pred = int(mlp_model.predict(mlp_scaler.transform(mlp_input))[0][0] > 0.5)\n",
    "\n",
    "    # CNN\n",
    "    padded = pad_sequences(tokenizer.texts_to_sequences([url]), maxlen=200, padding='post')\n",
    "    cnn_pred = int(cnn_model.predict(padded)[0][0] > 0.5)\n",
    "\n",
    "    # Ensemble Voting\n",
    "    weighted = w_cnn * cnn_pred + w_svm * svm_pred + w_mlp * mlp_pred\n",
    "    ensemble_pred = int(round(weighted))\n",
    "\n",
    "    label_map = {0: \"Phishing\", 1: \"Legitimate\"}\n",
    "    return {\n",
    "        \"URL\": url,\n",
    "        \"Ensemble (Weighted)\": label_map[ensemble_pred]\n",
    "    }\n",
    "\n",
    "# Test on dataset sample\n",
    "df = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")\n",
    "result = check_url(df['URL'].iloc[0])\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8d710376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:46:33.456085Z",
     "iopub.status.busy": "2025-04-28T13:46:33.455703Z",
     "iopub.status.idle": "2025-04-28T13:46:35.114788Z",
     "shell.execute_reply": "2025-04-28T13:46:35.113264Z"
    },
    "papermill": {
     "duration": 2.044204,
     "end_time": "2025-04-28T13:46:35.116452",
     "exception": false,
     "start_time": "2025-04-28T13:46:33.072248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking first 10 URLs...\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "1. nobell.it/70ffb52d079109dca5664cce6f317373782/login.SkyPe.com/en/cgi-bin/verification/login/70ffb52d079109dca5664cce6f317373/index.php?cmd=_profile-ach&outdated_page_tmpl=p/gen/failed-to-load&nav=0.5.1&login_access=1322408526\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "2. www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_home-customer&nav=1/loading.php\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "3. serviciosbys.com/paypal.cgi.bin.get-into.herf.secure.dispatch35463256rzr321654641dsf654321874/href/href/href/secure/center/update/limit/seccure/4d7a1ff5c55825a2e632a679c2fd5353/\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "4. mail.printakid.com/www.online.americanexpress.com/index.html\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "5. thewhiskeydregs.com/wp-content/themes/widescreen/includes/temp/promocoessmiles/?84784787824HDJNDJDSJSHD//2724782784/\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "6. smilesvoegol.servebbs.org/voegol.php\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "7. premierpaymentprocessing.com/includes/boleto-2via-07-2012.php\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "8. myxxxcollection.com/v1/js/jih321/bpd.com.do/do/l.popular.php\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "9. super1000.info/docs\n",
      "  Ensemble: Phishing\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "10. horizonsgallery.com/js/bin/ssl1/_id/www.paypal.com/fr/cgi-bin/webscr/cmd=_registration-run/login.php?cmd=_login-run&amp;dispatch=1471c4bdb044ae2be9e2fc3ec514b88b1471c4bdb044ae2be9e2fc3ec514b88b\n",
      "  Ensemble: Phishing\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Test the first 10 URLs in the dataset\n",
    "print(\"Checking first 10 URLs...\\n\")\n",
    "for i, url in enumerate(df['URL'].head(10), start=1):\n",
    "    result = check_url(url)\n",
    "    print(f\"{i}. {result['URL']}\\n  Ensemble: {result['Ensemble (Weighted)']}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4d1575e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:46:35.899647Z",
     "iopub.status.busy": "2025-04-28T13:46:35.899312Z",
     "iopub.status.idle": "2025-04-28T13:46:36.934336Z",
     "shell.execute_reply": "2025-04-28T13:46:36.933432Z"
    },
    "papermill": {
     "duration": 1.426453,
     "end_time": "2025-04-28T13:46:36.935870",
     "exception": false,
     "start_time": "2025-04-28T13:46:35.509417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Legitimate URL: www\u000eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\u0003Ë\n",
      "jlÛW¿]ø¾µj¿;\b·ªo!ÒPì ·ÊïH§#'3\u001bø@CÄR\u0002õ²çÇ\u0017\u0017Ý®\u0016ö\u001d",
      "QBÇÆg`Èå",
      "Zéê D\u001c",
      "îÂm®ÎÝQó*x;9?\u000fÁ\u0019Òâbùt\u001bÖ\u0007Ù®mÞNP¯°^MQ\n",
      "(\u001f-\u0004\u0006§;¬ÔAèUèé\\\u0010¨øíÌdB\\\u0001\u0012[q½=ÿVuÃ\u0001»\u0007râæH\u001bäô/µ}",
      "»7!2=´ÂÏ4¿ª¡j91\u0004]\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'URL': \"www\\x0eeira¯&nvinip¿ncH¯wVö%ÆåyDaHðû/ÏyEùu\\x03Ë\\nÓ\\x176(rTÃ\\x06u\\x0f\\x8f\\x7fæ\\x82\\x0c\\x99=g\\x810¾\\x96÷mÖi\\x12Ó-;\\x9bXZ\\\\%êýü\\x05Éfn&\\x87\\\\°%7õÙ:¹u\\x96\\x0f\\x161ÌÑêFÄòW<\\x18\\x80$cï\\x86¦t[\\x910ò\\x9f>Þj\\x93®ÆeV2\\x92à\\x1bpù-íàÇ$E¤ZëÈ²ú\\x16SÌ¶\\tp\\x1fáSò°i°vþ[«³»]¹\\rjlÛW¿\\x95\\x9b\\x8a]ø¾µj¿;\\x08·ªo!\\x94ÒPì\\xa0·Ê\\x8bïH§#'\\x823\\x1bø@CÄR\\x02õ²çÇ\\x17\\x17Ý®\\x16ö\\x1d\\x7fQBÇÆg`Èå\\x85Zéê\\xa0D\\x1cîÂm\\x9e®ÎÝQó*x;9?\\x0fÁ\\x19\\x81Òâ\\x88\\x99bùt\\x1bÖ\\x07\\x96Ù®mÞ\\x80N\\x94\\x97P¯°^M\\x8eQ\\n(\\x1f-\\x04\\x06§;¬ÔAèUè\\x99é\\\\\\x10¨ø\\x95íÌ\\x88dB\\\\\\x01\\x8b\\x12[q½=ÿVuÃ\\x01»\\x07râæH\\x1bä\\x8dô/µ}\\x85»7!2=´ÂÏ4¿ª¡j91\\x04\\x86]\",\n",
       " 'Ensemble (Weighted)': 'Phishing'}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Re-load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")\n",
    "\n",
    "# Get the second legitimate URL\n",
    "legit_url = df[df['Label'].str.lower() == 'good']['URL'].iloc[1]\n",
    "print(\"Legitimate URL:\", legit_url)\n",
    "\n",
    "# Run it through the model\n",
    "check_url(legit_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "947dee42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:46:37.776149Z",
     "iopub.status.busy": "2025-04-28T13:46:37.775456Z",
     "iopub.status.idle": "2025-04-28T13:46:39.607388Z",
     "shell.execute_reply": "2025-04-28T13:46:39.606518Z"
    },
    "papermill": {
     "duration": 2.285073,
     "end_time": "2025-04-28T13:46:39.609096",
     "exception": false,
     "start_time": "2025-04-28T13:46:37.324023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking 10 legitimate URLs...\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "1. depositaccounts.com/savings/\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "2. citypages.com/related/to/Dave+Simonett/\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "3. askart.com/askart/c/kate_carew/kate_carew.aspx\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "4. brianwattsphoto.com/\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "5. thefreedictionary.com/action+deferred\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "6. desifunny.com/videos/pranks_n_gags/just_4_laughs_gags_trying_on_swimsuits-2582-1.aspx\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "7. www.consumerreports.org/cro/electronics-computers/cell-phones/cell-phones-sub/index.htm\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "8. guitarpartsresource.com/\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "9. youtube.com/watch?v=N6DMMOOGtX4\n",
      "  Ensemble: Legitimate\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "10. absoluteastronomy.com/topics/Casimir_Pierre_Perier\n",
      "  Ensemble: Legitimate\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Sample 10 random legitimate URLs\n",
    "legit_urls = df[df[\"Label\"].str.lower() == \"good\"][\"URL\"].sample(10, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Check each legitimate URL with the model\n",
    "print(\"Checking 10 legitimate URLs...\\n\")\n",
    "for i, url in enumerate(legit_urls, start=1):\n",
    "    result = check_url(url)\n",
    "    print(f\"{i}. {result['URL']}\\n  Ensemble: {result['Ensemble (Weighted)']}\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6deb5885",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-28T13:46:40.378909Z",
     "iopub.status.busy": "2025-04-28T13:46:40.378618Z",
     "iopub.status.idle": "2025-04-28T13:46:40.545852Z",
     "shell.execute_reply": "2025-04-28T13:46:40.544947Z"
    },
    "papermill": {
     "duration": 0.558216,
     "end_time": "2025-04-28T13:46:40.547405",
     "exception": false,
     "start_time": "2025-04-28T13:46:39.989189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'URL': 'mail.printakid.com/www.online.americanexpress.com/index.html',\n",
       " 'Ensemble (Weighted)': 'Phishing'}"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_url(\"mail.printakid.com/www.online.americanexpress.com/index.html\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 791543,
     "sourceId": 1359146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1569.368601,
   "end_time": "2025-04-28T13:46:44.216704",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-28T13:20:34.848103",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8d46fadb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:37.363622Z",
     "iopub.status.busy": "2025-04-19T20:42:37.363291Z",
     "iopub.status.idle": "2025-04-19T20:42:38.043835Z",
     "shell.execute_reply": "2025-04-19T20:42:38.042626Z"
    },
    "papermill": {
     "duration": 0.690472,
     "end_time": "2025-04-19T20:42:38.045324",
     "exception": false,
     "start_time": "2025-04-19T20:42:37.354852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data source import complete.\n"
     ]
    }
   ],
   "source": [
    "import kagglehub\n",
    "taruntiwarihp_phishing_site_urls_path = kagglehub.dataset_download('taruntiwarihp/phishing-site-urls')\n",
    "\n",
    "print('Data source import complete.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4e13cf7d",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:38.062142Z",
     "iopub.status.busy": "2025-04-19T20:42:38.061275Z",
     "iopub.status.idle": "2025-04-19T20:42:39.956294Z",
     "shell.execute_reply": "2025-04-19T20:42:39.955332Z"
    },
    "papermill": {
     "duration": 1.905254,
     "end_time": "2025-04-19T20:42:39.957804",
     "exception": false,
     "start_time": "2025-04-19T20:42:38.052550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/phishing-site-urls/phishing_site_urls.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aaab14bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:39.973905Z",
     "iopub.status.busy": "2025-04-19T20:42:39.972918Z",
     "iopub.status.idle": "2025-04-19T20:42:41.023537Z",
     "shell.execute_reply": "2025-04-19T20:42:41.022685Z"
    },
    "papermill": {
     "duration": 1.060479,
     "end_time": "2025-04-19T20:42:41.025239",
     "exception": false,
     "start_time": "2025-04-19T20:42:39.964760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0834b804",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:41.040112Z",
     "iopub.status.busy": "2025-04-19T20:42:41.039815Z",
     "iopub.status.idle": "2025-04-19T20:42:41.063273Z",
     "shell.execute_reply": "2025-04-19T20:42:41.062386Z"
    },
    "papermill": {
     "duration": 0.032494,
     "end_time": "2025-04-19T20:42:41.064661",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.032167",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "79713c33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:41.079548Z",
     "iopub.status.busy": "2025-04-19T20:42:41.079251Z",
     "iopub.status.idle": "2025-04-19T20:42:41.087514Z",
     "shell.execute_reply": "2025-04-19T20:42:41.086777Z"
    },
    "papermill": {
     "duration": 0.017227,
     "end_time": "2025-04-19T20:42:41.088816",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.071589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "398a2373",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:41.103985Z",
     "iopub.status.busy": "2025-04-19T20:42:41.103680Z",
     "iopub.status.idle": "2025-04-19T20:42:41.109311Z",
     "shell.execute_reply": "2025-04-19T20:42:41.108252Z"
    },
    "papermill": {
     "duration": 0.014945,
     "end_time": "2025-04-19T20:42:41.110825",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.095880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (549346, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset shape:\", dataset.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f54a7be1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:41.126838Z",
     "iopub.status.busy": "2025-04-19T20:42:41.126033Z",
     "iopub.status.idle": "2025-04-19T20:42:41.132957Z",
     "shell.execute_reply": "2025-04-19T20:42:41.132151Z"
    },
    "papermill": {
     "duration": 0.016584,
     "end_time": "2025-04-19T20:42:41.134481",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.117897",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['URL', 'Label'], dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "812f98bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:41.150027Z",
     "iopub.status.busy": "2025-04-19T20:42:41.149716Z",
     "iopub.status.idle": "2025-04-19T20:42:41.234714Z",
     "shell.execute_reply": "2025-04-19T20:42:41.233775Z"
    },
    "papermill": {
     "duration": 0.094446,
     "end_time": "2025-04-19T20:42:41.236262",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.141816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd22c06f",
   "metadata": {
    "papermill": {
     "duration": 0.007469,
     "end_time": "2025-04-19T20:42:41.251419",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.243950",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6673016c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:41.267233Z",
     "iopub.status.busy": "2025-04-19T20:42:41.266336Z",
     "iopub.status.idle": "2025-04-19T20:42:43.253646Z",
     "shell.execute_reply": "2025-04-19T20:42:43.252670Z"
    },
    "papermill": {
     "duration": 1.9967,
     "end_time": "2025-04-19T20:42:43.255121",
     "exception": false,
     "start_time": "2025-04-19T20:42:41.258421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class distribution:\n",
      " class_url\n",
      "1    392924\n",
      "0    156422\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Top repeated URLs:\n",
      " URL\n",
      "jhomitevd2abj3fk.tor2web.org/    52\n",
      "jhomitevd2abj3fk.onion.to/       52\n",
      "zjfq4lnfbs7pncr5.onion.to/       44\n",
      "zjfq4lnfbs7pncr5.tor2web.org/    44\n",
      "5n7y4yihirccftc5.tor2web.org/    42\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Encode the 'Label' column into integers\n",
    "label_encoder = LabelEncoder()\n",
    "dataset['class_url'] = label_encoder.fit_transform(dataset['Label'])\n",
    "\n",
    "# Display the distribution of encoded classes\n",
    "print(\"Class distribution:\\n\", dataset['class_url'].value_counts())\n",
    "\n",
    "# Display the most frequent URLs\n",
    "print(\"\\nTop repeated URLs:\\n\", dataset['URL'].value_counts().head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e4175fc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:43.270714Z",
     "iopub.status.busy": "2025-04-19T20:42:43.270218Z",
     "iopub.status.idle": "2025-04-19T20:42:43.285018Z",
     "shell.execute_reply": "2025-04-19T20:42:43.284027Z"
    },
    "papermill": {
     "duration": 0.024237,
     "end_time": "2025-04-19T20:42:43.286392",
     "exception": false,
     "start_time": "2025-04-19T20:42:43.262155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0\n",
       "1       www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad          0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0\n",
       "...                                                   ...   ...        ...\n",
       "549341                                    23.227.196.215/   bad          0\n",
       "549342                                 apple-checker.org/   bad          0\n",
       "549343                                  apple-iclods.org/   bad          0\n",
       "549344                                 apple-uptoday.org/   bad          0\n",
       "549345                                  apple-search.info   bad          0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "eea74d67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:43.303033Z",
     "iopub.status.busy": "2025-04-19T20:42:43.302716Z",
     "iopub.status.idle": "2025-04-19T20:42:43.624805Z",
     "shell.execute_reply": "2025-04-19T20:42:43.623679Z"
    },
    "papermill": {
     "duration": 0.33217,
     "end_time": "2025-04-19T20:42:43.626414",
     "exception": false,
     "start_time": "2025-04-19T20:42:43.294244",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                      URL Label  class_url\n",
      "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0\n",
      "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0\n",
      "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0\n",
      "3       mail.printakid.com/www.online.americanexpress....   bad          0\n",
      "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0\n",
      "...                                                   ...   ...        ...\n",
      "549341                                    23.227.196.215/   bad          0\n",
      "549342                                 apple-checker.org/   bad          0\n",
      "549343                                  apple-iclods.org/   bad          0\n",
      "549344                                 apple-uptoday.org/   bad          0\n",
      "549345                                  apple-search.info   bad          0\n",
      "\n",
      "[549346 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# Remove 'www.' from URLs\n",
    "dataset['URL'] = dataset['URL'].str.replace(r'^www\\.', '', regex=True)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d78e990e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:43.643180Z",
     "iopub.status.busy": "2025-04-19T20:42:43.642463Z",
     "iopub.status.idle": "2025-04-19T20:42:43.862792Z",
     "shell.execute_reply": "2025-04-19T20:42:43.861815Z"
    },
    "papermill": {
     "duration": 0.23031,
     "end_time": "2025-04-19T20:42:43.864317",
     "exception": false,
     "start_time": "2025-04-19T20:42:43.634007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  \n",
       "0           225  \n",
       "1            77  \n",
       "2           177  \n",
       "3            60  \n",
       "4           116  \n",
       "...         ...  \n",
       "549341       15  \n",
       "549342       18  \n",
       "549343       17  \n",
       "549344       18  \n",
       "549345       17  \n",
       "\n",
       "[549346 rows x 4 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a feature for URL length\n",
    "dataset['url_len'] = dataset['URL'].apply(lambda x: len(str(x)))\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b68d805b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:43.881763Z",
     "iopub.status.busy": "2025-04-19T20:42:43.881379Z",
     "iopub.status.idle": "2025-04-19T20:42:48.994189Z",
     "shell.execute_reply": "2025-04-19T20:42:48.993085Z"
    },
    "papermill": {
     "duration": 5.123748,
     "end_time": "2025-04-19T20:42:48.996097",
     "exception": false,
     "start_time": "2025-04-19T20:42:43.872349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tld\r\n",
      "  Downloading tld-0.13-py2.py3-none-any.whl.metadata (9.4 kB)\r\n",
      "Downloading tld-0.13-py2.py3-none-any.whl (263 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m263.8/263.8 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tld\r\n",
      "Successfully installed tld-0.13\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tld"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2764e7f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:49.014740Z",
     "iopub.status.busy": "2025-04-19T20:42:49.013402Z",
     "iopub.status.idle": "2025-04-19T20:42:51.251900Z",
     "shell.execute_reply": "2025-04-19T20:42:51.250919Z"
    },
    "papermill": {
     "duration": 2.249079,
     "end_time": "2025-04-19T20:42:51.253358",
     "exception": false,
     "start_time": "2025-04-19T20:42:49.004279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  \n",
       "0           225             0  \n",
       "1            77             0  \n",
       "2           177             0  \n",
       "3            60             0  \n",
       "4           116             0  \n",
       "...         ...           ...  \n",
       "549341       15             0  \n",
       "549342       18             0  \n",
       "549343       17             0  \n",
       "549344       18             0  \n",
       "549345       17             0  \n",
       "\n",
       "[549346 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "import re\n",
    "\n",
    "# Function to check if the hostname appears in the full URL\n",
    "def abnormal_url(url):\n",
    "    hostname = urlparse(url).hostname\n",
    "    if hostname and re.search(re.escape(hostname), url):\n",
    "        return 1  # Normal URL\n",
    "    else:\n",
    "        return 0  # Abnormal URL\n",
    "\n",
    "# Apply the abnormal_url function to each URL in the dataset\n",
    "dataset['abnormal_url'] = dataset['URL'].apply(abnormal_url)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0d7bbaf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:51.271370Z",
     "iopub.status.busy": "2025-04-19T20:42:51.271046Z",
     "iopub.status.idle": "2025-04-19T20:42:51.280489Z",
     "shell.execute_reply": "2025-04-19T20:42:51.279627Z"
    },
    "papermill": {
     "duration": 0.019944,
     "end_time": "2025-04-19T20:42:51.281852",
     "exception": false,
     "start_time": "2025-04-19T20:42:51.261908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abnormal_url\n",
      "0    549217\n",
      "1       129\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of abnormal_url values\n",
    "print(dataset['abnormal_url'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2e3a35dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:51.306487Z",
     "iopub.status.busy": "2025-04-19T20:42:51.306042Z",
     "iopub.status.idle": "2025-04-19T20:42:54.359288Z",
     "shell.execute_reply": "2025-04-19T20:42:54.358406Z"
    },
    "papermill": {
     "duration": 3.069015,
     "end_time": "2025-04-19T20:42:54.360798",
     "exception": false,
     "start_time": "2025-04-19T20:42:51.291783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 URL  use_of_ip_address\n",
      "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...                  0\n",
      "1  dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...                  0\n",
      "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....                  0\n",
      "3  mail.printakid.com/www.online.americanexpress....                  0\n",
      "4  thewhiskeydregs.com/wp-content/themes/widescre...                  0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  \n",
       "0           225             0                  0  \n",
       "1            77             0                  0  \n",
       "2           177             0                  0  \n",
       "3            60             0                  0  \n",
       "4           116             0                  0  \n",
       "...         ...           ...                ...  \n",
       "549341       15             0                  1  \n",
       "549342       18             0                  0  \n",
       "549343       17             0                  0  \n",
       "549344       18             0                  0  \n",
       "549345       17             0                  0  \n",
       "\n",
       "[549346 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Function to detect if an IP address is present in the URL\n",
    "def having_ip_address(url: str) -> int:\n",
    "    # Regular expression for matching IPv4, hexadecimal IPv4, and IPv6 addresses\n",
    "    match = re.search(\n",
    "        r'(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4\n",
    "        r'((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)'  # Hexadecimal IPv4\n",
    "        r'(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # IPv6\n",
    "\n",
    "    if match:\n",
    "        return 1  # IP address found\n",
    "    else:\n",
    "        return 0  # No IP address found\n",
    "\n",
    "# Apply the function to the 'URL' column\n",
    "dataset['use_of_ip_address'] = dataset['URL'].apply(having_ip_address)\n",
    "\n",
    "# Preview the new feature\n",
    "print(dataset[['URL', 'use_of_ip_address']].head())\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2c729bed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:54.441538Z",
     "iopub.status.busy": "2025-04-19T20:42:54.440811Z",
     "iopub.status.idle": "2025-04-19T20:42:54.451150Z",
     "shell.execute_reply": "2025-04-19T20:42:54.449880Z"
    },
    "papermill": {
     "duration": 0.083152,
     "end_time": "2025-04-19T20:42:54.452669",
     "exception": false,
     "start_time": "2025-04-19T20:42:54.369517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "use_of_ip_address\n",
      "0    543634\n",
      "1      5712\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of use_of_ip_address values\n",
    "print(dataset['use_of_ip_address'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7b3b403c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:54.471947Z",
     "iopub.status.busy": "2025-04-19T20:42:54.471574Z",
     "iopub.status.idle": "2025-04-19T20:42:58.003527Z",
     "shell.execute_reply": "2025-04-19T20:42:58.002556Z"
    },
    "papermill": {
     "duration": 3.543781,
     "end_time": "2025-04-19T20:42:58.005240",
     "exception": false,
     "start_time": "2025-04-19T20:42:54.461459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  \n",
       "0       0  0  0   0  \n",
       "1       0  0  0   0  \n",
       "2       0  0  0   0  \n",
       "3       0  0  0   0  \n",
       "4       0  0  0   1  \n",
       "...    .. .. ..  ..  \n",
       "549341  0  0  0   0  \n",
       "549342  0  0  0   0  \n",
       "549343  0  0  0   0  \n",
       "549344  0  0  0   0  \n",
       "549345  0  0  0   0  \n",
       "\n",
       "[549346 rows x 19 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of special characters to count in URLs\n",
    "features = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "\n",
    "# Count occurrences of each feature in the 'URL' column and create new columns\n",
    "for feature in features:\n",
    "    dataset[feature] = dataset['URL'].apply(lambda url: url.count(feature))\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7129d2f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:42:58.025474Z",
     "iopub.status.busy": "2025-04-19T20:42:58.025149Z",
     "iopub.status.idle": "2025-04-19T20:43:01.552500Z",
     "shell.execute_reply": "2025-04-19T20:43:01.551606Z"
    },
    "papermill": {
     "duration": 3.539465,
     "end_time": "2025-04-19T20:43:01.554027",
     "exception": false,
     "start_time": "2025-04-19T20:42:58.014562",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  \n",
       "0       0  0  0   0  \n",
       "1       0  0  0   0  \n",
       "2       0  0  0   0  \n",
       "3       0  0  0   0  \n",
       "4       0  0  0   1  \n",
       "...    .. .. ..  ..  \n",
       "549341  0  0  0   0  \n",
       "549342  0  0  0   0  \n",
       "549343  0  0  0   0  \n",
       "549344  0  0  0   0  \n",
       "549345  0  0  0   0  \n",
       "\n",
       "[549346 rows x 19 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of special characters to count in URLs\n",
    "features = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "\n",
    "# Count occurrences of each special character in the 'URL' column and create new columns\n",
    "for feature in features:\n",
    "    dataset[feature] = dataset['URL'].apply(lambda url: url.count(feature))\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "130c260d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:01.574416Z",
     "iopub.status.busy": "2025-04-19T20:43:01.574078Z",
     "iopub.status.idle": "2025-04-19T20:43:03.525613Z",
     "shell.execute_reply": "2025-04-19T20:43:03.524819Z"
    },
    "papermill": {
     "duration": 1.963736,
     "end_time": "2025-04-19T20:43:03.527130",
     "exception": false,
     "start_time": "2025-04-19T20:43:01.563394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  https  \n",
       "0       0  0  0   0      0  \n",
       "1       0  0  0   0      0  \n",
       "2       0  0  0   0      0  \n",
       "3       0  0  0   0      0  \n",
       "4       0  0  0   1      0  \n",
       "...    .. .. ..  ..    ...  \n",
       "549341  0  0  0   0      0  \n",
       "549342  0  0  0   0      0  \n",
       "549343  0  0  0   0      0  \n",
       "549344  0  0  0   0      0  \n",
       "549345  0  0  0   0      0  \n",
       "\n",
       "[549346 rows x 20 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "\n",
    "# Function to check if the URL uses HTTPS\n",
    "def httpSecured(url: str) -> int:\n",
    "    scheme = urlparse(url).scheme  # Extract the scheme (http or https)\n",
    "    return 1 if scheme == 'https' else 0  # Return 1 if HTTPS, otherwise 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'https'\n",
    "dataset['https'] = dataset['URL'].apply(httpSecured)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7cee18aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:03.548041Z",
     "iopub.status.busy": "2025-04-19T20:43:03.547718Z",
     "iopub.status.idle": "2025-04-19T20:43:05.868813Z",
     "shell.execute_reply": "2025-04-19T20:43:05.867879Z"
    },
    "papermill": {
     "duration": 2.333168,
     "end_time": "2025-04-19T20:43:05.870390",
     "exception": false,
     "start_time": "2025-04-19T20:43:03.537222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 URL  digits\n",
      "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...      58\n",
      "1  dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...       1\n",
      "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....      47\n",
      "3  mail.printakid.com/www.online.americanexpress....       0\n",
      "4  thewhiskeydregs.com/wp-content/themes/widescre...      21\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  https  digits  \n",
       "0       0  0  0   0      0      58  \n",
       "1       0  0  0   0      0       1  \n",
       "2       0  0  0   0      0      47  \n",
       "3       0  0  0   0      0       0  \n",
       "4       0  0  0   1      0      21  \n",
       "...    .. .. ..  ..    ...     ...  \n",
       "549341  0  0  0   0      0      11  \n",
       "549342  0  0  0   0      0       0  \n",
       "549343  0  0  0   0      0       0  \n",
       "549344  0  0  0   0      0       0  \n",
       "549345  0  0  0   0      0       0  \n",
       "\n",
       "[549346 rows x 21 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to count the number of digits in the URL\n",
    "def digit_count(url: str) -> int:\n",
    "    # Count digits in the URL string\n",
    "    return sum(c.isnumeric() for c in url)\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'digits'\n",
    "dataset['digits'] = dataset['URL'].apply(digit_count)\n",
    "\n",
    "# Preview the new 'digits' feature\n",
    "print(dataset[['URL', 'digits']].head())\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "00f1796f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:05.892975Z",
     "iopub.status.busy": "2025-04-19T20:43:05.892626Z",
     "iopub.status.idle": "2025-04-19T20:43:08.207141Z",
     "shell.execute_reply": "2025-04-19T20:43:08.206014Z"
    },
    "papermill": {
     "duration": 2.327529,
     "end_time": "2025-04-19T20:43:08.208504",
     "exception": false,
     "start_time": "2025-04-19T20:43:05.880975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  %  +  $  !  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        *  ,  //  https  digits  letters  \n",
       "0       0  0   0      0      58      135  \n",
       "1       0  0   0      0       1       62  \n",
       "2       0  0   0      0      47      111  \n",
       "3       0  0   0      0       0       52  \n",
       "4       0  0   1      0      21       82  \n",
       "...    .. ..  ..    ...     ...      ...  \n",
       "549341  0  0   0      0      11        0  \n",
       "549342  0  0   0      0       0       15  \n",
       "549343  0  0   0      0       0       14  \n",
       "549344  0  0   0      0       0       15  \n",
       "549345  0  0   0      0       0       15  \n",
       "\n",
       "[549346 rows x 22 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to count the number of letters in the URL\n",
    "def letter_count(url: str) -> int:\n",
    "    # Count alphabetic characters (letters) in the URL string\n",
    "    return sum(c.isalpha() for c in url)\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'letters'\n",
    "dataset['letters'] = dataset['URL'].apply(letter_count)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e11d6075",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:08.231349Z",
     "iopub.status.busy": "2025-04-19T20:43:08.231028Z",
     "iopub.status.idle": "2025-04-19T20:43:12.734930Z",
     "shell.execute_reply": "2025-04-19T20:43:12.734084Z"
    },
    "papermill": {
     "duration": 4.517093,
     "end_time": "2025-04-19T20:43:12.736491",
     "exception": false,
     "start_time": "2025-04-19T20:43:08.219398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  +  $  !  *  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        ,  //  https  digits  letters  Shortining_Service  \n",
       "0       0   0      0      58      135                   0  \n",
       "1       0   0      0       1       62                   0  \n",
       "2       0   0      0      47      111                   0  \n",
       "3       0   0      0       0       52                   0  \n",
       "4       0   1      0      21       82                   0  \n",
       "...    ..  ..    ...     ...      ...                 ...  \n",
       "549341  0   0      0      11        0                   0  \n",
       "549342  0   0      0       0       15                   0  \n",
       "549343  0   0      0       0       14                   0  \n",
       "549344  0   0      0       0       15                   0  \n",
       "549345  0   0      0       0       15                   0  \n",
       "\n",
       "[549346 rows x 23 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Function to check if the URL uses a shortening service\n",
    "def Shortening_Service(url: str) -> int:\n",
    "    # List of common URL shortening services\n",
    "    shortening_services = (\n",
    "        'bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|yfrog\\.com|'\n",
    "        'migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|short\\.to|BudURL\\.com|'\n",
    "        'ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|doiop\\.com|short\\.ie|kl\\.am|'\n",
    "        'wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|'\n",
    "        'cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|'\n",
    "        'buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|'\n",
    "        'qr\\.net|1url\\.com|tweez\\.me|v\\.gd|tr\\.im|link\\.zip\\.net'\n",
    "    )\n",
    "    # Search for any matching shortening service in the URL\n",
    "    match = re.search(shortening_services, url)\n",
    "    \n",
    "    # Return 1 if match found, otherwise return 0\n",
    "    return 1 if match else 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'Shortining_Service'\n",
    "dataset['Shortining_Service'] = dataset['URL'].apply(Shortening_Service)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0d8805bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:12.759467Z",
     "iopub.status.busy": "2025-04-19T20:43:12.759168Z",
     "iopub.status.idle": "2025-04-19T20:43:16.690950Z",
     "shell.execute_reply": "2025-04-19T20:43:16.689742Z"
    },
    "papermill": {
     "duration": 3.945242,
     "end_time": "2025-04-19T20:43:16.692868",
     "exception": false,
     "start_time": "2025-04-19T20:43:12.747626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting googlesearch-python\r\n",
      "  Downloading googlesearch_python-1.3.0-py3-none-any.whl.metadata (3.4 kB)\r\n",
      "Requirement already satisfied: beautifulsoup4>=4.9 in /usr/local/lib/python3.11/dist-packages (from googlesearch-python) (4.13.3)\r\n",
      "Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.11/dist-packages (from googlesearch-python) (2.32.3)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.9->googlesearch-python) (2.6)\r\n",
      "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.9->googlesearch-python) (4.13.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (3.4.1)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (2025.1.31)\r\n",
      "Downloading googlesearch_python-1.3.0-py3-none-any.whl (5.6 kB)\r\n",
      "Installing collected packages: googlesearch-python\r\n",
      "Successfully installed googlesearch-python-1.3.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install googlesearch-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "73c64627",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:16.717115Z",
     "iopub.status.busy": "2025-04-19T20:43:16.716759Z",
     "iopub.status.idle": "2025-04-19T20:43:18.112384Z",
     "shell.execute_reply": "2025-04-19T20:43:18.111408Z"
    },
    "papermill": {
     "duration": 1.409671,
     "end_time": "2025-04-19T20:43:18.113933",
     "exception": false,
     "start_time": "2025-04-19T20:43:16.704262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "      <th>google_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  $  !  *  ,  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        //  https  digits  letters  Shortining_Service  google_index  \n",
       "0        0      0      58      135                   0             1  \n",
       "1        0      0       1       62                   0             1  \n",
       "2        0      0      47      111                   0             1  \n",
       "3        0      0       0       52                   0             1  \n",
       "4        1      0      21       82                   0             1  \n",
       "...     ..    ...     ...      ...                 ...           ...  \n",
       "549341   0      0      11        0                   0             1  \n",
       "549342   0      0       0       15                   0             1  \n",
       "549343   0      0       0       14                   0             1  \n",
       "549344   0      0       0       15                   0             1  \n",
       "549345   0      0       0       15                   0             1  \n",
       "\n",
       "[549346 rows x 24 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from googlesearch import search\n",
    "\n",
    "# Function to check if a URL is indexed by Google\n",
    "def google_index(url: str) -> int:\n",
    "    # Search the URL on Google and retrieve the top 5 results\n",
    "    site = search(url, num_results=5)\n",
    "    return 1 if site else 0  # Return 1 if indexed, otherwise 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'google_index'\n",
    "dataset['google_index'] = dataset['URL'].apply(google_index)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b5891836",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.139530Z",
     "iopub.status.busy": "2025-04-19T20:43:18.138675Z",
     "iopub.status.idle": "2025-04-19T20:43:18.229675Z",
     "shell.execute_reply": "2025-04-19T20:43:18.228844Z"
    },
    "papermill": {
     "duration": 0.105421,
     "end_time": "2025-04-19T20:43:18.231104",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.125683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL                   0\n",
       "Label                 0\n",
       "class_url             0\n",
       "url_len               0\n",
       "abnormal_url          0\n",
       "use_of_ip_address     0\n",
       "@                     0\n",
       "?                     0\n",
       "-                     0\n",
       "=                     0\n",
       ".                     0\n",
       "#                     0\n",
       "%                     0\n",
       "+                     0\n",
       "$                     0\n",
       "!                     0\n",
       "*                     0\n",
       ",                     0\n",
       "//                    0\n",
       "https                 0\n",
       "digits                0\n",
       "letters               0\n",
       "Shortining_Service    0\n",
       "google_index          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f77a97ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.255466Z",
     "iopub.status.busy": "2025-04-19T20:43:18.255165Z",
     "iopub.status.idle": "2025-04-19T20:43:18.260736Z",
     "shell.execute_reply": "2025-04-19T20:43:18.259912Z"
    },
    "papermill": {
     "duration": 0.019391,
     "end_time": "2025-04-19T20:43:18.262144",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.242753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(549346, 24)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14f9d7a3",
   "metadata": {
    "papermill": {
     "duration": 0.011279,
     "end_time": "2025-04-19T20:43:18.285058",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.273779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Training and Testing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "aa3b5d45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.311264Z",
     "iopub.status.busy": "2025-04-19T20:43:18.310482Z",
     "iopub.status.idle": "2025-04-19T20:43:18.337750Z",
     "shell.execute_reply": "2025-04-19T20:43:18.336871Z"
    },
    "papermill": {
     "duration": 0.042999,
     "end_time": "2025-04-19T20:43:18.339452",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.296453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dropping unnecessary columns and creating feature set 'X'\n",
    "X = dataset.drop(['URL', 'Label', 'class_url', '@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//'], axis=1)\n",
    "\n",
    "# Target variable 'y' is the class_url column\n",
    "y = dataset['class_url']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dad99995",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.364091Z",
     "iopub.status.busy": "2025-04-19T20:43:18.363788Z",
     "iopub.status.idle": "2025-04-19T20:43:18.374735Z",
     "shell.execute_reply": "2025-04-19T20:43:18.374026Z"
    },
    "papermill": {
     "duration": 0.024642,
     "end_time": "2025-04-19T20:43:18.376012",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.351370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "      <th>google_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        url_len  abnormal_url  use_of_ip_address  https  digits  letters  \\\n",
       "0           225             0                  0      0      58      135   \n",
       "1            77             0                  0      0       1       62   \n",
       "2           177             0                  0      0      47      111   \n",
       "3            60             0                  0      0       0       52   \n",
       "4           116             0                  0      0      21       82   \n",
       "...         ...           ...                ...    ...     ...      ...   \n",
       "549341       15             0                  1      0      11        0   \n",
       "549342       18             0                  0      0       0       15   \n",
       "549343       17             0                  0      0       0       14   \n",
       "549344       18             0                  0      0       0       15   \n",
       "549345       17             0                  0      0       0       15   \n",
       "\n",
       "        Shortining_Service  google_index  \n",
       "0                        0             1  \n",
       "1                        0             1  \n",
       "2                        0             1  \n",
       "3                        0             1  \n",
       "4                        0             1  \n",
       "...                    ...           ...  \n",
       "549341                   0             1  \n",
       "549342                   0             1  \n",
       "549343                   0             1  \n",
       "549344                   0             1  \n",
       "549345                   0             1  \n",
       "\n",
       "[549346 rows x 8 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "94193f42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.400937Z",
     "iopub.status.busy": "2025-04-19T20:43:18.400582Z",
     "iopub.status.idle": "2025-04-19T20:43:18.407175Z",
     "shell.execute_reply": "2025-04-19T20:43:18.406491Z"
    },
    "papermill": {
     "duration": 0.020604,
     "end_time": "2025-04-19T20:43:18.408549",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.387945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         0\n",
       "1         0\n",
       "2         0\n",
       "3         0\n",
       "4         0\n",
       "         ..\n",
       "549341    0\n",
       "549342    0\n",
       "549343    0\n",
       "549344    0\n",
       "549345    0\n",
       "Name: class_url, Length: 549346, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ab2d8090",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.433587Z",
     "iopub.status.busy": "2025-04-19T20:43:18.433272Z",
     "iopub.status.idle": "2025-04-19T20:43:18.652136Z",
     "shell.execute_reply": "2025-04-19T20:43:18.651339Z"
    },
    "papermill": {
     "duration": 0.23307,
     "end_time": "2025-04-19T20:43:18.653763",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.420693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "575fad07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.678989Z",
     "iopub.status.busy": "2025-04-19T20:43:18.678683Z",
     "iopub.status.idle": "2025-04-19T20:43:18.683880Z",
     "shell.execute_reply": "2025-04-19T20:43:18.682928Z"
    },
    "papermill": {
     "duration": 0.019212,
     "end_time": "2025-04-19T20:43:18.685251",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.666039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train Shape : (439476, 8)\n",
      "Y_train Shape : (439476,)\n",
      "X_test Shape : (109870, 8)\n",
      "Y_test Shape : (109870,)\n"
     ]
    }
   ],
   "source": [
    "print(f\"X_train Shape : {X_train.shape}\")  # Shape of the training features\n",
    "print(f\"Y_train Shape : {y_train.shape}\")  # Shape of the training target variable\n",
    "print(f\"X_test Shape : {X_test.shape}\")    # Shape of the test features\n",
    "print(f\"Y_test Shape : {y_test.shape}\")    # Shape of the test target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e7f3c4d",
   "metadata": {
    "papermill": {
     "duration": 0.011602,
     "end_time": "2025-04-19T20:43:18.709193",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.697591",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Developing CNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d83c88fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:43:18.733867Z",
     "iopub.status.busy": "2025-04-19T20:43:18.733483Z",
     "iopub.status.idle": "2025-04-19T20:46:45.918978Z",
     "shell.execute_reply": "2025-04-19T20:46:45.917837Z"
    },
    "papermill": {
     "duration": 207.200096,
     "end_time": "2025-04-19T20:46:45.920982",
     "exception": false,
     "start_time": "2025-04-19T20:43:18.720886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-19 20:43:20.780108: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745095400.998332      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745095401.065131      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-19 20:43:34.613265: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 3ms/step - accuracy: 0.7269 - loss: 0.6062 - val_accuracy: 0.7623 - val_loss: 0.5207\n",
      "Epoch 2/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7658 - loss: 0.5220 - val_accuracy: 0.7757 - val_loss: 0.5042\n",
      "Epoch 3/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 3ms/step - accuracy: 0.7721 - loss: 0.5118 - val_accuracy: 0.7763 - val_loss: 0.5032\n",
      "Epoch 4/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7767 - loss: 0.5079 - val_accuracy: 0.7808 - val_loss: 0.5001\n",
      "Epoch 5/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7802 - loss: 0.5034 - val_accuracy: 0.7829 - val_loss: 0.5009\n",
      "Epoch 6/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7788 - loss: 0.5042 - val_accuracy: 0.7834 - val_loss: 0.4970\n",
      "Epoch 7/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7823 - loss: 0.4999 - val_accuracy: 0.7841 - val_loss: 0.4967\n",
      "Epoch 8/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7802 - loss: 0.5025 - val_accuracy: 0.7850 - val_loss: 0.4958\n",
      "Epoch 9/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7812 - loss: 0.5006 - val_accuracy: 0.7848 - val_loss: 0.4980\n",
      "Epoch 10/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.7822 - loss: 0.5003 - val_accuracy: 0.7806 - val_loss: 0.4984\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 1ms/step\n",
      "Tuned CNN Accuracy: 78.87%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.34      0.48     31288\n",
      "           1       0.79      0.97      0.87     78582\n",
      "\n",
      "    accuracy                           0.79    109870\n",
      "   macro avg       0.80      0.65      0.67    109870\n",
      "weighted avg       0.79      0.79      0.76    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout, Input\n",
    "from keras.callbacks import EarlyStopping\n",
    "\n",
    "\n",
    "# Reshape data for CNN input\n",
    "X_train_cnn = np.expand_dims(X_train.values, axis=2)\n",
    "X_test_cnn = np.expand_dims(X_test.values, axis=2)\n",
    "\n",
    "# Build tuned CNN model\n",
    "cnn = Sequential([\n",
    "    Input(shape=(X_train_cnn.shape[1], 1)),  # Automatically adjusts to your data\n",
    "    Conv1D(filters=32, kernel_size=3, activation='relu', padding='same'),\n",
    "    MaxPooling1D(pool_size=2),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Conv1D(filters=64, kernel_size=3, activation='relu', padding='same'),\n",
    "    MaxPooling1D(pool_size=2),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Flatten(),  # Flatten to match the output size\n",
    "    Dense(128, activation='relu'),  # Dense layer to match the flattened size\n",
    "    Dropout(0.3),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "\n",
    "\n",
    "# Compile the model\n",
    "cnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Early stopping to prevent overfitting\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "# Train the model with validation split\n",
    "cnn.fit(X_train_cnn, y_train,\n",
    "        epochs=10,  # Slightly higher, but with early stopping\n",
    "        batch_size=64,  # Larger batch size for faster training\n",
    "        validation_split=0.2,\n",
    "        callbacks=[early_stop],\n",
    "        verbose=1)\n",
    "\n",
    "# Predict and evaluate\n",
    "cnn_pred = cnn.predict(X_test_cnn).ravel()\n",
    "y_pred = (cnn_pred > 0.5).astype(int)\n",
    "\n",
    "# Accuracy\n",
    "accuracy = cnn.evaluate(X_test_cnn, y_test, verbose=0)\n",
    "print(f\"Tuned CNN Accuracy: {accuracy[1]:.2%}\")\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.title('Tuned CNN Confusion Matrix')\n",
    "plt.xlabel('Predicted labels')\n",
    "plt.ylabel('True labels')\n",
    "plt.show()\n",
    "\n",
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c7ca06f",
   "metadata": {
    "papermill": {
     "duration": 0.171445,
     "end_time": "2025-04-19T20:46:46.267213",
     "exception": false,
     "start_time": "2025-04-19T20:46:46.095768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**svm**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "51502c16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:46:46.608550Z",
     "iopub.status.busy": "2025-04-19T20:46:46.607485Z",
     "iopub.status.idle": "2025-04-19T20:47:37.118626Z",
     "shell.execute_reply": "2025-04-19T20:47:37.117686Z"
    },
    "papermill": {
     "duration": 50.697395,
     "end_time": "2025-04-19T20:47:37.135063",
     "exception": false,
     "start_time": "2025-04-19T20:46:46.437668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy: 73.77%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.09      0.16     31288\n",
      "           1       0.73      1.00      0.84     78582\n",
      "\n",
      "    accuracy                           0.74    109870\n",
      "   macro avg       0.83      0.54      0.50    109870\n",
      "weighted avg       0.79      0.74      0.65    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Train SVM on a smaller sample due to performance\n",
    "X_train_small = X_train[:5000]\n",
    "y_train_small = y_train[:5000]\n",
    "\n",
    "# Train SVM model\n",
    "svm = SVC(probability=True)\n",
    "svm.fit(X_train_small, y_train_small)\n",
    "\n",
    "# Predict probabilities for ensemble\n",
    "svm_pred = svm.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Predict class labels\n",
    "y_pred = svm.predict(X_test)\n",
    "\n",
    "# Accuracy & Evaluation\n",
    "def print_results(model, X_test, y_test, model_name):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted labels\")\n",
    "    plt.ylabel(\"True labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Evaluate\n",
    "print_results(svm, X_test, y_test, 'SVM')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b450629c",
   "metadata": {
    "papermill": {
     "duration": 0.168941,
     "end_time": "2025-04-19T20:47:37.545127",
     "exception": false,
     "start_time": "2025-04-19T20:47:37.376186",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MLP**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0274d672",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:47:37.887120Z",
     "iopub.status.busy": "2025-04-19T20:47:37.886793Z",
     "iopub.status.idle": "2025-04-19T20:47:43.005094Z",
     "shell.execute_reply": "2025-04-19T20:47:43.003978Z"
    },
    "papermill": {
     "duration": 5.292683,
     "end_time": "2025-04-19T20:47:43.006829",
     "exception": false,
     "start_time": "2025-04-19T20:47:37.714146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (3) reached and the optimization hasn't converged yet.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MLP Accuracy: 79.85%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.34      0.49     31288\n",
      "           1       0.79      0.98      0.87     78582\n",
      "\n",
      "    accuracy                           0.80    109870\n",
      "   macro avg       0.83      0.66      0.68    109870\n",
      "weighted avg       0.81      0.80      0.76    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Train MLP\n",
    "mlp = MLPClassifier(max_iter=3)\n",
    "mlp.fit(X_train, y_train)\n",
    "\n",
    "# Predict probabilities for ensemble\n",
    "mlp_pred = mlp.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Predict class labels\n",
    "y_pred = mlp.predict(X_test)\n",
    "\n",
    "# Accuracy & Evaluation\n",
    "def print_results(model, X_test, y_test, model_name):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted labels\")\n",
    "    plt.ylabel(\"True labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Evaluate\n",
    "print_results(mlp, X_test, y_test, 'MLP')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0aba06c9",
   "metadata": {
    "papermill": {
     "duration": 0.171236,
     "end_time": "2025-04-19T20:47:43.352959",
     "exception": false,
     "start_time": "2025-04-19T20:47:43.181723",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3b755f4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-19T20:47:43.697174Z",
     "iopub.status.busy": "2025-04-19T20:47:43.696519Z",
     "iopub.status.idle": "2025-04-19T20:47:43.996719Z",
     "shell.execute_reply": "2025-04-19T20:47:43.995655Z"
    },
    "papermill": {
     "duration": 0.471768,
     "end_time": "2025-04-19T20:47:43.998139",
     "exception": false,
     "start_time": "2025-04-19T20:47:43.526371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ensemble Model Accuracy: 78.29%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.27      0.42     31288\n",
      "           1       0.77      0.99      0.87     78582\n",
      "\n",
      "    accuracy                           0.78    109870\n",
      "   macro avg       0.83      0.63      0.64    109870\n",
      "weighted avg       0.80      0.78      0.74    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "# Combine predictions (averaging probabilities)\n",
    "ensemble_pred = (svm_pred + mlp_pred + cnn_pred) / 3\n",
    "\n",
    "# Convert to class labels based on threshold\n",
    "ensemble_pred_class = (ensemble_pred > 0.5).astype(int)\n",
    "\n",
    "# Function to print evaluation results\n",
    "def print_results(y_true, y_pred, model_name):\n",
    "    acc = accuracy_score(y_true, y_pred)\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    # Confusion Matrix\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted Labels\")\n",
    "    plt.ylabel(\"True Labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    # Classification Report\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_true, y_pred))\n",
    "\n",
    "# Call the function for ensemble model\n",
    "print_results(y_test, ensemble_pred_class, \"Ensemble Model\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc38942",
   "metadata": {
    "papermill": {
     "duration": 0.168288,
     "end_time": "2025-04-19T20:47:44.342325",
     "exception": false,
     "start_time": "2025-04-19T20:47:44.174037",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 791543,
     "sourceId": 1359146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 315.221735,
   "end_time": "2025-04-19T20:47:47.908228",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-19T20:42:32.686493",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f64f354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:07.067051Z",
     "iopub.status.busy": "2025-04-21T08:17:07.066687Z",
     "iopub.status.idle": "2025-04-21T08:17:07.617385Z",
     "shell.execute_reply": "2025-04-21T08:17:07.616134Z"
    },
    "papermill": {
     "duration": 0.561562,
     "end_time": "2025-04-21T08:17:07.619130",
     "exception": false,
     "start_time": "2025-04-21T08:17:07.057568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data source import complete.\n"
     ]
    }
   ],
   "source": [
    "import kagglehub\n",
    "taruntiwarihp_phishing_site_urls_path = kagglehub.dataset_download('taruntiwarihp/phishing-site-urls')\n",
    "\n",
    "print('Data source import complete.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6e045172",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:07.636459Z",
     "iopub.status.busy": "2025-04-21T08:17:07.635434Z",
     "iopub.status.idle": "2025-04-21T08:17:09.784630Z",
     "shell.execute_reply": "2025-04-21T08:17:09.783487Z"
    },
    "papermill": {
     "duration": 2.16007,
     "end_time": "2025-04-21T08:17:09.786444",
     "exception": false,
     "start_time": "2025-04-21T08:17:07.626374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/phishing-site-urls/phishing_site_urls.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dccbfb35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:09.802528Z",
     "iopub.status.busy": "2025-04-21T08:17:09.801951Z",
     "iopub.status.idle": "2025-04-21T08:17:11.194546Z",
     "shell.execute_reply": "2025-04-21T08:17:11.193330Z"
    },
    "papermill": {
     "duration": 1.402869,
     "end_time": "2025-04-21T08:17:11.196669",
     "exception": false,
     "start_time": "2025-04-21T08:17:09.793800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f9596522",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:11.213698Z",
     "iopub.status.busy": "2025-04-21T08:17:11.213323Z",
     "iopub.status.idle": "2025-04-21T08:17:11.237916Z",
     "shell.execute_reply": "2025-04-21T08:17:11.236874Z"
    },
    "papermill": {
     "duration": 0.035463,
     "end_time": "2025-04-21T08:17:11.239949",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.204486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2d1a8d08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:11.256726Z",
     "iopub.status.busy": "2025-04-21T08:17:11.256439Z",
     "iopub.status.idle": "2025-04-21T08:17:11.265574Z",
     "shell.execute_reply": "2025-04-21T08:17:11.264658Z"
    },
    "papermill": {
     "duration": 0.018438,
     "end_time": "2025-04-21T08:17:11.267045",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.248607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7f2aef0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:11.283273Z",
     "iopub.status.busy": "2025-04-21T08:17:11.282219Z",
     "iopub.status.idle": "2025-04-21T08:17:11.288009Z",
     "shell.execute_reply": "2025-04-21T08:17:11.286643Z"
    },
    "papermill": {
     "duration": 0.015395,
     "end_time": "2025-04-21T08:17:11.289477",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.274082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (549346, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset shape:\", dataset.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f7c7180b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:11.306159Z",
     "iopub.status.busy": "2025-04-21T08:17:11.305800Z",
     "iopub.status.idle": "2025-04-21T08:17:11.314081Z",
     "shell.execute_reply": "2025-04-21T08:17:11.313105Z"
    },
    "papermill": {
     "duration": 0.018809,
     "end_time": "2025-04-21T08:17:11.315850",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.297041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['URL', 'Label'], dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b307cdc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:11.332710Z",
     "iopub.status.busy": "2025-04-21T08:17:11.332310Z",
     "iopub.status.idle": "2025-04-21T08:17:11.408577Z",
     "shell.execute_reply": "2025-04-21T08:17:11.407672Z"
    },
    "papermill": {
     "duration": 0.086316,
     "end_time": "2025-04-21T08:17:11.410108",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.323792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7d45bdd",
   "metadata": {
    "papermill": {
     "duration": 0.006967,
     "end_time": "2025-04-21T08:17:11.424346",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.417379",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c5a6aec9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:11.440208Z",
     "iopub.status.busy": "2025-04-21T08:17:11.439831Z",
     "iopub.status.idle": "2025-04-21T08:17:13.745711Z",
     "shell.execute_reply": "2025-04-21T08:17:13.744363Z"
    },
    "papermill": {
     "duration": 2.316152,
     "end_time": "2025-04-21T08:17:13.747648",
     "exception": false,
     "start_time": "2025-04-21T08:17:11.431496",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class distribution:\n",
      " class_url\n",
      "1    392924\n",
      "0    156422\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Top repeated URLs:\n",
      " URL\n",
      "jhomitevd2abj3fk.tor2web.org/    52\n",
      "jhomitevd2abj3fk.onion.to/       52\n",
      "zjfq4lnfbs7pncr5.onion.to/       44\n",
      "zjfq4lnfbs7pncr5.tor2web.org/    44\n",
      "5n7y4yihirccftc5.tor2web.org/    42\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Encode the 'Label' column into integers\n",
    "label_encoder = LabelEncoder()\n",
    "dataset['class_url'] = label_encoder.fit_transform(dataset['Label'])\n",
    "\n",
    "# Display the distribution of encoded classes\n",
    "print(\"Class distribution:\\n\", dataset['class_url'].value_counts())\n",
    "\n",
    "# Display the most frequent URLs\n",
    "print(\"\\nTop repeated URLs:\\n\", dataset['URL'].value_counts().head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cac077e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:13.766538Z",
     "iopub.status.busy": "2025-04-21T08:17:13.765878Z",
     "iopub.status.idle": "2025-04-21T08:17:13.782828Z",
     "shell.execute_reply": "2025-04-21T08:17:13.781651Z"
    },
    "papermill": {
     "duration": 0.028844,
     "end_time": "2025-04-21T08:17:13.784803",
     "exception": false,
     "start_time": "2025-04-21T08:17:13.755959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0\n",
       "1       www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad          0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0\n",
       "...                                                   ...   ...        ...\n",
       "549341                                    23.227.196.215/   bad          0\n",
       "549342                                 apple-checker.org/   bad          0\n",
       "549343                                  apple-iclods.org/   bad          0\n",
       "549344                                 apple-uptoday.org/   bad          0\n",
       "549345                                  apple-search.info   bad          0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "418682bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:13.801723Z",
     "iopub.status.busy": "2025-04-21T08:17:13.801370Z",
     "iopub.status.idle": "2025-04-21T08:17:14.138467Z",
     "shell.execute_reply": "2025-04-21T08:17:14.137204Z"
    },
    "papermill": {
     "duration": 0.347557,
     "end_time": "2025-04-21T08:17:14.140290",
     "exception": false,
     "start_time": "2025-04-21T08:17:13.792733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                      URL Label  class_url\n",
      "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0\n",
      "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0\n",
      "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0\n",
      "3       mail.printakid.com/www.online.americanexpress....   bad          0\n",
      "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0\n",
      "...                                                   ...   ...        ...\n",
      "549341                                    23.227.196.215/   bad          0\n",
      "549342                                 apple-checker.org/   bad          0\n",
      "549343                                  apple-iclods.org/   bad          0\n",
      "549344                                 apple-uptoday.org/   bad          0\n",
      "549345                                  apple-search.info   bad          0\n",
      "\n",
      "[549346 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# Remove 'www.' from URLs\n",
    "dataset['URL'] = dataset['URL'].str.replace(r'^www\\.', '', regex=True)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b2279be6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:14.157623Z",
     "iopub.status.busy": "2025-04-21T08:17:14.157290Z",
     "iopub.status.idle": "2025-04-21T08:17:14.386027Z",
     "shell.execute_reply": "2025-04-21T08:17:14.385064Z"
    },
    "papermill": {
     "duration": 0.239385,
     "end_time": "2025-04-21T08:17:14.387550",
     "exception": false,
     "start_time": "2025-04-21T08:17:14.148165",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  \n",
       "0           225  \n",
       "1            77  \n",
       "2           177  \n",
       "3            60  \n",
       "4           116  \n",
       "...         ...  \n",
       "549341       15  \n",
       "549342       18  \n",
       "549343       17  \n",
       "549344       18  \n",
       "549345       17  \n",
       "\n",
       "[549346 rows x 4 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a feature for URL length\n",
    "dataset['url_len'] = dataset['URL'].apply(lambda x: len(str(x)))\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "12e77538",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:14.404561Z",
     "iopub.status.busy": "2025-04-21T08:17:14.404226Z",
     "iopub.status.idle": "2025-04-21T08:17:19.678778Z",
     "shell.execute_reply": "2025-04-21T08:17:19.677479Z"
    },
    "papermill": {
     "duration": 5.285335,
     "end_time": "2025-04-21T08:17:19.680653",
     "exception": false,
     "start_time": "2025-04-21T08:17:14.395318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tld\r\n",
      "  Downloading tld-0.13-py2.py3-none-any.whl.metadata (9.4 kB)\r\n",
      "Downloading tld-0.13-py2.py3-none-any.whl (263 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m263.8/263.8 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tld\r\n",
      "Successfully installed tld-0.13\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tld"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0be8ee2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:19.705066Z",
     "iopub.status.busy": "2025-04-21T08:17:19.704232Z",
     "iopub.status.idle": "2025-04-21T08:17:22.031888Z",
     "shell.execute_reply": "2025-04-21T08:17:22.030600Z"
    },
    "papermill": {
     "duration": 2.341274,
     "end_time": "2025-04-21T08:17:22.033476",
     "exception": false,
     "start_time": "2025-04-21T08:17:19.692202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  \n",
       "0           225             0  \n",
       "1            77             0  \n",
       "2           177             0  \n",
       "3            60             0  \n",
       "4           116             0  \n",
       "...         ...           ...  \n",
       "549341       15             0  \n",
       "549342       18             0  \n",
       "549343       17             0  \n",
       "549344       18             0  \n",
       "549345       17             0  \n",
       "\n",
       "[549346 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "import re\n",
    "\n",
    "# Function to check if the hostname appears in the full URL\n",
    "def abnormal_url(url):\n",
    "    hostname = urlparse(url).hostname\n",
    "    if hostname and re.search(re.escape(hostname), url):\n",
    "        return 1  # Normal URL\n",
    "    else:\n",
    "        return 0  # Abnormal URL\n",
    "\n",
    "# Apply the abnormal_url function to each URL in the dataset\n",
    "dataset['abnormal_url'] = dataset['URL'].apply(abnormal_url)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "788d9a07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:22.052052Z",
     "iopub.status.busy": "2025-04-21T08:17:22.051711Z",
     "iopub.status.idle": "2025-04-21T08:17:22.063203Z",
     "shell.execute_reply": "2025-04-21T08:17:22.061945Z"
    },
    "papermill": {
     "duration": 0.02291,
     "end_time": "2025-04-21T08:17:22.064852",
     "exception": false,
     "start_time": "2025-04-21T08:17:22.041942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abnormal_url\n",
      "0    549217\n",
      "1       129\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of abnormal_url values\n",
    "print(dataset['abnormal_url'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2d55752d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:22.083440Z",
     "iopub.status.busy": "2025-04-21T08:17:22.083018Z",
     "iopub.status.idle": "2025-04-21T08:17:25.038386Z",
     "shell.execute_reply": "2025-04-21T08:17:25.037323Z"
    },
    "papermill": {
     "duration": 2.966624,
     "end_time": "2025-04-21T08:17:25.040051",
     "exception": false,
     "start_time": "2025-04-21T08:17:22.073427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 URL  use_of_ip_address\n",
      "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...                  0\n",
      "1  dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...                  0\n",
      "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....                  0\n",
      "3  mail.printakid.com/www.online.americanexpress....                  0\n",
      "4  thewhiskeydregs.com/wp-content/themes/widescre...                  0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  \n",
       "0           225             0                  0  \n",
       "1            77             0                  0  \n",
       "2           177             0                  0  \n",
       "3            60             0                  0  \n",
       "4           116             0                  0  \n",
       "...         ...           ...                ...  \n",
       "549341       15             0                  1  \n",
       "549342       18             0                  0  \n",
       "549343       17             0                  0  \n",
       "549344       18             0                  0  \n",
       "549345       17             0                  0  \n",
       "\n",
       "[549346 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Function to detect if an IP address is present in the URL\n",
    "def having_ip_address(url: str) -> int:\n",
    "    # Regular expression for matching IPv4, hexadecimal IPv4, and IPv6 addresses\n",
    "    match = re.search(\n",
    "        r'(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4\n",
    "        r'((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)'  # Hexadecimal IPv4\n",
    "        r'(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # IPv6\n",
    "\n",
    "    if match:\n",
    "        return 1  # IP address found\n",
    "    else:\n",
    "        return 0  # No IP address found\n",
    "\n",
    "# Apply the function to the 'URL' column\n",
    "dataset['use_of_ip_address'] = dataset['URL'].apply(having_ip_address)\n",
    "\n",
    "# Preview the new feature\n",
    "print(dataset[['URL', 'use_of_ip_address']].head())\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2f1c4e78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:25.128960Z",
     "iopub.status.busy": "2025-04-21T08:17:25.128320Z",
     "iopub.status.idle": "2025-04-21T08:17:25.138834Z",
     "shell.execute_reply": "2025-04-21T08:17:25.137434Z"
    },
    "papermill": {
     "duration": 0.089761,
     "end_time": "2025-04-21T08:17:25.140232",
     "exception": false,
     "start_time": "2025-04-21T08:17:25.050471",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "use_of_ip_address\n",
      "0    543634\n",
      "1      5712\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of use_of_ip_address values\n",
    "print(dataset['use_of_ip_address'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cce655ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:25.159612Z",
     "iopub.status.busy": "2025-04-21T08:17:25.159213Z",
     "iopub.status.idle": "2025-04-21T08:17:28.829221Z",
     "shell.execute_reply": "2025-04-21T08:17:28.828251Z"
    },
    "papermill": {
     "duration": 3.681905,
     "end_time": "2025-04-21T08:17:28.831085",
     "exception": false,
     "start_time": "2025-04-21T08:17:25.149180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  \n",
       "0       0  0  0   0  \n",
       "1       0  0  0   0  \n",
       "2       0  0  0   0  \n",
       "3       0  0  0   0  \n",
       "4       0  0  0   1  \n",
       "...    .. .. ..  ..  \n",
       "549341  0  0  0   0  \n",
       "549342  0  0  0   0  \n",
       "549343  0  0  0   0  \n",
       "549344  0  0  0   0  \n",
       "549345  0  0  0   0  \n",
       "\n",
       "[549346 rows x 19 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of special characters to count in URLs\n",
    "features = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "\n",
    "# Count occurrences of each feature in the 'URL' column and create new columns\n",
    "for feature in features:\n",
    "    dataset[feature] = dataset['URL'].apply(lambda url: url.count(feature))\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "45efa8ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:28.852221Z",
     "iopub.status.busy": "2025-04-21T08:17:28.851856Z",
     "iopub.status.idle": "2025-04-21T08:17:32.499649Z",
     "shell.execute_reply": "2025-04-21T08:17:32.498472Z"
    },
    "papermill": {
     "duration": 3.659941,
     "end_time": "2025-04-21T08:17:32.501092",
     "exception": false,
     "start_time": "2025-04-21T08:17:28.841151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  \n",
       "0       0  0  0   0  \n",
       "1       0  0  0   0  \n",
       "2       0  0  0   0  \n",
       "3       0  0  0   0  \n",
       "4       0  0  0   1  \n",
       "...    .. .. ..  ..  \n",
       "549341  0  0  0   0  \n",
       "549342  0  0  0   0  \n",
       "549343  0  0  0   0  \n",
       "549344  0  0  0   0  \n",
       "549345  0  0  0   0  \n",
       "\n",
       "[549346 rows x 19 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of special characters to count in URLs\n",
    "features = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "\n",
    "# Count occurrences of each special character in the 'URL' column and create new columns\n",
    "for feature in features:\n",
    "    dataset[feature] = dataset['URL'].apply(lambda url: url.count(feature))\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c975d151",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:32.522576Z",
     "iopub.status.busy": "2025-04-21T08:17:32.522190Z",
     "iopub.status.idle": "2025-04-21T08:17:34.479253Z",
     "shell.execute_reply": "2025-04-21T08:17:34.478053Z"
    },
    "papermill": {
     "duration": 1.969914,
     "end_time": "2025-04-21T08:17:34.481057",
     "exception": false,
     "start_time": "2025-04-21T08:17:32.511143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  https  \n",
       "0       0  0  0   0      0  \n",
       "1       0  0  0   0      0  \n",
       "2       0  0  0   0      0  \n",
       "3       0  0  0   0      0  \n",
       "4       0  0  0   1      0  \n",
       "...    .. .. ..  ..    ...  \n",
       "549341  0  0  0   0      0  \n",
       "549342  0  0  0   0      0  \n",
       "549343  0  0  0   0      0  \n",
       "549344  0  0  0   0      0  \n",
       "549345  0  0  0   0      0  \n",
       "\n",
       "[549346 rows x 20 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "\n",
    "# Function to check if the URL uses HTTPS\n",
    "def httpSecured(url: str) -> int:\n",
    "    scheme = urlparse(url).scheme  # Extract the scheme (http or https)\n",
    "    return 1 if scheme == 'https' else 0  # Return 1 if HTTPS, otherwise 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'https'\n",
    "dataset['https'] = dataset['URL'].apply(httpSecured)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "96eb800e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:34.502507Z",
     "iopub.status.busy": "2025-04-21T08:17:34.502124Z",
     "iopub.status.idle": "2025-04-21T08:17:37.094073Z",
     "shell.execute_reply": "2025-04-21T08:17:37.093012Z"
    },
    "papermill": {
     "duration": 2.604595,
     "end_time": "2025-04-21T08:17:37.095852",
     "exception": false,
     "start_time": "2025-04-21T08:17:34.491257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 URL  digits\n",
      "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...      58\n",
      "1  dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...       1\n",
      "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....      47\n",
      "3  mail.printakid.com/www.online.americanexpress....       0\n",
      "4  thewhiskeydregs.com/wp-content/themes/widescre...      21\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  https  digits  \n",
       "0       0  0  0   0      0      58  \n",
       "1       0  0  0   0      0       1  \n",
       "2       0  0  0   0      0      47  \n",
       "3       0  0  0   0      0       0  \n",
       "4       0  0  0   1      0      21  \n",
       "...    .. .. ..  ..    ...     ...  \n",
       "549341  0  0  0   0      0      11  \n",
       "549342  0  0  0   0      0       0  \n",
       "549343  0  0  0   0      0       0  \n",
       "549344  0  0  0   0      0       0  \n",
       "549345  0  0  0   0      0       0  \n",
       "\n",
       "[549346 rows x 21 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to count the number of digits in the URL\n",
    "def digit_count(url: str) -> int:\n",
    "    # Count digits in the URL string\n",
    "    return sum(c.isnumeric() for c in url)\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'digits'\n",
    "dataset['digits'] = dataset['URL'].apply(digit_count)\n",
    "\n",
    "# Preview the new 'digits' feature\n",
    "print(dataset[['URL', 'digits']].head())\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7b79cc8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:37.118780Z",
     "iopub.status.busy": "2025-04-21T08:17:37.118434Z",
     "iopub.status.idle": "2025-04-21T08:17:39.682717Z",
     "shell.execute_reply": "2025-04-21T08:17:39.681588Z"
    },
    "papermill": {
     "duration": 2.577878,
     "end_time": "2025-04-21T08:17:39.684493",
     "exception": false,
     "start_time": "2025-04-21T08:17:37.106615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  %  +  $  !  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        *  ,  //  https  digits  letters  \n",
       "0       0  0   0      0      58      135  \n",
       "1       0  0   0      0       1       62  \n",
       "2       0  0   0      0      47      111  \n",
       "3       0  0   0      0       0       52  \n",
       "4       0  0   1      0      21       82  \n",
       "...    .. ..  ..    ...     ...      ...  \n",
       "549341  0  0   0      0      11        0  \n",
       "549342  0  0   0      0       0       15  \n",
       "549343  0  0   0      0       0       14  \n",
       "549344  0  0   0      0       0       15  \n",
       "549345  0  0   0      0       0       15  \n",
       "\n",
       "[549346 rows x 22 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to count the number of letters in the URL\n",
    "def letter_count(url: str) -> int:\n",
    "    # Count alphabetic characters (letters) in the URL string\n",
    "    return sum(c.isalpha() for c in url)\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'letters'\n",
    "dataset['letters'] = dataset['URL'].apply(letter_count)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8e3dd491",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:39.709575Z",
     "iopub.status.busy": "2025-04-21T08:17:39.709186Z",
     "iopub.status.idle": "2025-04-21T08:17:44.376480Z",
     "shell.execute_reply": "2025-04-21T08:17:44.375484Z"
    },
    "papermill": {
     "duration": 4.68152,
     "end_time": "2025-04-21T08:17:44.378141",
     "exception": false,
     "start_time": "2025-04-21T08:17:39.696621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  +  $  !  *  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        ,  //  https  digits  letters  Shortining_Service  \n",
       "0       0   0      0      58      135                   0  \n",
       "1       0   0      0       1       62                   0  \n",
       "2       0   0      0      47      111                   0  \n",
       "3       0   0      0       0       52                   0  \n",
       "4       0   1      0      21       82                   0  \n",
       "...    ..  ..    ...     ...      ...                 ...  \n",
       "549341  0   0      0      11        0                   0  \n",
       "549342  0   0      0       0       15                   0  \n",
       "549343  0   0      0       0       14                   0  \n",
       "549344  0   0      0       0       15                   0  \n",
       "549345  0   0      0       0       15                   0  \n",
       "\n",
       "[549346 rows x 23 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Function to check if the URL uses a shortening service\n",
    "def Shortening_Service(url: str) -> int:\n",
    "    # List of common URL shortening services\n",
    "    shortening_services = (\n",
    "        'bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|yfrog\\.com|'\n",
    "        'migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|short\\.to|BudURL\\.com|'\n",
    "        'ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|doiop\\.com|short\\.ie|kl\\.am|'\n",
    "        'wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|'\n",
    "        'cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|'\n",
    "        'buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|'\n",
    "        'qr\\.net|1url\\.com|tweez\\.me|v\\.gd|tr\\.im|link\\.zip\\.net'\n",
    "    )\n",
    "    # Search for any matching shortening service in the URL\n",
    "    match = re.search(shortening_services, url)\n",
    "    \n",
    "    # Return 1 if match found, otherwise return 0\n",
    "    return 1 if match else 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'Shortining_Service'\n",
    "dataset['Shortining_Service'] = dataset['URL'].apply(Shortening_Service)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fb55ceaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:44.401868Z",
     "iopub.status.busy": "2025-04-21T08:17:44.401493Z",
     "iopub.status.idle": "2025-04-21T08:17:48.329525Z",
     "shell.execute_reply": "2025-04-21T08:17:48.328254Z"
    },
    "papermill": {
     "duration": 3.942412,
     "end_time": "2025-04-21T08:17:48.331832",
     "exception": false,
     "start_time": "2025-04-21T08:17:44.389420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting googlesearch-python\r\n",
      "  Downloading googlesearch_python-1.3.0-py3-none-any.whl.metadata (3.4 kB)\r\n",
      "Requirement already satisfied: beautifulsoup4>=4.9 in /usr/local/lib/python3.11/dist-packages (from googlesearch-python) (4.13.3)\r\n",
      "Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.11/dist-packages (from googlesearch-python) (2.32.3)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.9->googlesearch-python) (2.6)\r\n",
      "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.9->googlesearch-python) (4.13.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (3.4.1)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (2025.1.31)\r\n",
      "Downloading googlesearch_python-1.3.0-py3-none-any.whl (5.6 kB)\r\n",
      "Installing collected packages: googlesearch-python\r\n",
      "Successfully installed googlesearch-python-1.3.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install googlesearch-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f0983748",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:48.357290Z",
     "iopub.status.busy": "2025-04-21T08:17:48.356939Z",
     "iopub.status.idle": "2025-04-21T08:17:50.019542Z",
     "shell.execute_reply": "2025-04-21T08:17:50.018385Z"
    },
    "papermill": {
     "duration": 1.677427,
     "end_time": "2025-04-21T08:17:50.021467",
     "exception": false,
     "start_time": "2025-04-21T08:17:48.344040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "      <th>google_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  $  !  *  ,  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        //  https  digits  letters  Shortining_Service  google_index  \n",
       "0        0      0      58      135                   0             1  \n",
       "1        0      0       1       62                   0             1  \n",
       "2        0      0      47      111                   0             1  \n",
       "3        0      0       0       52                   0             1  \n",
       "4        1      0      21       82                   0             1  \n",
       "...     ..    ...     ...      ...                 ...           ...  \n",
       "549341   0      0      11        0                   0             1  \n",
       "549342   0      0       0       15                   0             1  \n",
       "549343   0      0       0       14                   0             1  \n",
       "549344   0      0       0       15                   0             1  \n",
       "549345   0      0       0       15                   0             1  \n",
       "\n",
       "[549346 rows x 24 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from googlesearch import search\n",
    "\n",
    "# Function to check if a URL is indexed by Google\n",
    "def google_index(url: str) -> int:\n",
    "    # Search the URL on Google and retrieve the top 5 results\n",
    "    site = search(url, num_results=5)\n",
    "    return 1 if site else 0  # Return 1 if indexed, otherwise 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'google_index'\n",
    "dataset['google_index'] = dataset['URL'].apply(google_index)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ea524515",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.047964Z",
     "iopub.status.busy": "2025-04-21T08:17:50.047345Z",
     "iopub.status.idle": "2025-04-21T08:17:50.150348Z",
     "shell.execute_reply": "2025-04-21T08:17:50.149490Z"
    },
    "papermill": {
     "duration": 0.118293,
     "end_time": "2025-04-21T08:17:50.152369",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.034076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL                   0\n",
       "Label                 0\n",
       "class_url             0\n",
       "url_len               0\n",
       "abnormal_url          0\n",
       "use_of_ip_address     0\n",
       "@                     0\n",
       "?                     0\n",
       "-                     0\n",
       "=                     0\n",
       ".                     0\n",
       "#                     0\n",
       "%                     0\n",
       "+                     0\n",
       "$                     0\n",
       "!                     0\n",
       "*                     0\n",
       ",                     0\n",
       "//                    0\n",
       "https                 0\n",
       "digits                0\n",
       "letters               0\n",
       "Shortining_Service    0\n",
       "google_index          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f2c30db6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.177300Z",
     "iopub.status.busy": "2025-04-21T08:17:50.176518Z",
     "iopub.status.idle": "2025-04-21T08:17:50.183199Z",
     "shell.execute_reply": "2025-04-21T08:17:50.182302Z"
    },
    "papermill": {
     "duration": 0.020707,
     "end_time": "2025-04-21T08:17:50.184745",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.164038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(549346, 24)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "400077f5",
   "metadata": {
    "papermill": {
     "duration": 0.011663,
     "end_time": "2025-04-21T08:17:50.208291",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.196628",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Training and Testing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bfa1dd94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.233332Z",
     "iopub.status.busy": "2025-04-21T08:17:50.232652Z",
     "iopub.status.idle": "2025-04-21T08:17:50.260346Z",
     "shell.execute_reply": "2025-04-21T08:17:50.259581Z"
    },
    "papermill": {
     "duration": 0.042213,
     "end_time": "2025-04-21T08:17:50.262231",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.220018",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dropping unnecessary columns and creating feature set 'X'\n",
    "X = dataset.drop(['URL', 'Label', 'class_url', '@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//'], axis=1)\n",
    "\n",
    "# Target variable 'y' is the class_url column\n",
    "y = dataset['class_url']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "20920e41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.288246Z",
     "iopub.status.busy": "2025-04-21T08:17:50.287909Z",
     "iopub.status.idle": "2025-04-21T08:17:50.300068Z",
     "shell.execute_reply": "2025-04-21T08:17:50.299186Z"
    },
    "papermill": {
     "duration": 0.027331,
     "end_time": "2025-04-21T08:17:50.301857",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.274526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "      <th>google_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        url_len  abnormal_url  use_of_ip_address  https  digits  letters  \\\n",
       "0           225             0                  0      0      58      135   \n",
       "1            77             0                  0      0       1       62   \n",
       "2           177             0                  0      0      47      111   \n",
       "3            60             0                  0      0       0       52   \n",
       "4           116             0                  0      0      21       82   \n",
       "...         ...           ...                ...    ...     ...      ...   \n",
       "549341       15             0                  1      0      11        0   \n",
       "549342       18             0                  0      0       0       15   \n",
       "549343       17             0                  0      0       0       14   \n",
       "549344       18             0                  0      0       0       15   \n",
       "549345       17             0                  0      0       0       15   \n",
       "\n",
       "        Shortining_Service  google_index  \n",
       "0                        0             1  \n",
       "1                        0             1  \n",
       "2                        0             1  \n",
       "3                        0             1  \n",
       "4                        0             1  \n",
       "...                    ...           ...  \n",
       "549341                   0             1  \n",
       "549342                   0             1  \n",
       "549343                   0             1  \n",
       "549344                   0             1  \n",
       "549345                   0             1  \n",
       "\n",
       "[549346 rows x 8 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f4afc472",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.328543Z",
     "iopub.status.busy": "2025-04-21T08:17:50.327430Z",
     "iopub.status.idle": "2025-04-21T08:17:50.335143Z",
     "shell.execute_reply": "2025-04-21T08:17:50.334209Z"
    },
    "papermill": {
     "duration": 0.022647,
     "end_time": "2025-04-21T08:17:50.336786",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.314139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         0\n",
       "1         0\n",
       "2         0\n",
       "3         0\n",
       "4         0\n",
       "         ..\n",
       "549341    0\n",
       "549342    0\n",
       "549343    0\n",
       "549344    0\n",
       "549345    0\n",
       "Name: class_url, Length: 549346, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1c76fc1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.363632Z",
     "iopub.status.busy": "2025-04-21T08:17:50.362498Z",
     "iopub.status.idle": "2025-04-21T08:17:50.625749Z",
     "shell.execute_reply": "2025-04-21T08:17:50.624761Z"
    },
    "papermill": {
     "duration": 0.278265,
     "end_time": "2025-04-21T08:17:50.627766",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.349501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f4c28512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.654549Z",
     "iopub.status.busy": "2025-04-21T08:17:50.654179Z",
     "iopub.status.idle": "2025-04-21T08:17:50.660696Z",
     "shell.execute_reply": "2025-04-21T08:17:50.659327Z"
    },
    "papermill": {
     "duration": 0.022152,
     "end_time": "2025-04-21T08:17:50.662520",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.640368",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train Shape : (439476, 8)\n",
      "Y_train Shape : (439476,)\n",
      "X_test Shape : (109870, 8)\n",
      "Y_test Shape : (109870,)\n"
     ]
    }
   ],
   "source": [
    "print(f\"X_train Shape : {X_train.shape}\")  # Shape of the training features\n",
    "print(f\"Y_train Shape : {y_train.shape}\")  # Shape of the training target variable\n",
    "print(f\"X_test Shape : {X_test.shape}\")    # Shape of the test features\n",
    "print(f\"Y_test Shape : {y_test.shape}\")    # Shape of the test target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6096fe38",
   "metadata": {
    "papermill": {
     "duration": 0.011759,
     "end_time": "2025-04-21T08:17:50.686571",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.674812",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Developing CNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bb5456a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:17:50.712577Z",
     "iopub.status.busy": "2025-04-21T08:17:50.712209Z",
     "iopub.status.idle": "2025-04-21T08:22:36.932252Z",
     "shell.execute_reply": "2025-04-21T08:22:36.930849Z"
    },
    "papermill": {
     "duration": 286.235468,
     "end_time": "2025-04-21T08:22:36.934163",
     "exception": false,
     "start_time": "2025-04-21T08:17:50.698695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-21 08:17:53.104484: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745223473.369469      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745223473.442636      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-21 08:18:08.863326: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 5ms/step - accuracy: 0.7250 - loss: 0.6180 - val_accuracy: 0.7725 - val_loss: 0.5108\n",
      "Epoch 2/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7704 - loss: 0.5151 - val_accuracy: 0.7779 - val_loss: 0.5030\n",
      "Epoch 3/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7763 - loss: 0.5081 - val_accuracy: 0.7816 - val_loss: 0.4987\n",
      "Epoch 4/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7794 - loss: 0.5039 - val_accuracy: 0.7823 - val_loss: 0.4995\n",
      "Epoch 5/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7804 - loss: 0.5023 - val_accuracy: 0.7834 - val_loss: 0.4978\n",
      "Epoch 6/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7809 - loss: 0.5019 - val_accuracy: 0.7831 - val_loss: 0.4969\n",
      "Epoch 7/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7816 - loss: 0.5012 - val_accuracy: 0.7852 - val_loss: 0.4941\n",
      "Epoch 8/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7826 - loss: 0.4997 - val_accuracy: 0.7834 - val_loss: 0.4972\n",
      "Epoch 9/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7824 - loss: 0.5000 - val_accuracy: 0.7844 - val_loss: 0.4966\n",
      "Epoch 10/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 5ms/step - accuracy: 0.7830 - loss: 0.4984 - val_accuracy: 0.7837 - val_loss: 0.4944\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step\n",
      "Tuned CNN Accuracy: 78.77%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.36      0.49     31288\n",
      "           1       0.79      0.96      0.87     78582\n",
      "\n",
      "    accuracy                           0.79    109870\n",
      "   macro avg       0.78      0.66      0.68    109870\n",
      "weighted avg       0.79      0.79      0.76    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout, Input\n",
    "from keras.callbacks import EarlyStopping\n",
    "\n",
    "\n",
    "# Reshape data for CNN input\n",
    "X_train_cnn = np.expand_dims(X_train.values, axis=2)\n",
    "X_test_cnn = np.expand_dims(X_test.values, axis=2)\n",
    "\n",
    "# Build tuned CNN model\n",
    "cnn = Sequential([\n",
    "    Input(shape=(X_train_cnn.shape[1], 1)),  # Automatically adjusts to your data\n",
    "    Conv1D(filters=32, kernel_size=3, activation='relu', padding='same'),\n",
    "    MaxPooling1D(pool_size=2),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Conv1D(filters=64, kernel_size=3, activation='relu', padding='same'),\n",
    "    MaxPooling1D(pool_size=2),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Flatten(),  # Flatten to match the output size\n",
    "    Dense(128, activation='relu'),  # Dense layer to match the flattened size\n",
    "    Dropout(0.3),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "\n",
    "\n",
    "# Compile the model\n",
    "cnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Early stopping to prevent overfitting\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "# Train the model with validation split\n",
    "cnn.fit(X_train_cnn, y_train,\n",
    "        epochs=10,  # Slightly higher, but with early stopping\n",
    "        batch_size=64,  # Larger batch size for faster training\n",
    "        validation_split=0.2,\n",
    "        callbacks=[early_stop],\n",
    "        verbose=1)\n",
    "\n",
    "# Predict and evaluate\n",
    "cnn_pred = cnn.predict(X_test_cnn).ravel()\n",
    "y_pred = (cnn_pred > 0.5).astype(int)\n",
    "\n",
    "# Accuracy\n",
    "accuracy = cnn.evaluate(X_test_cnn, y_test, verbose=0)\n",
    "print(f\"Tuned CNN Accuracy: {accuracy[1]:.2%}\")\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.title('Tuned CNN Confusion Matrix')\n",
    "plt.xlabel('Predicted labels')\n",
    "plt.ylabel('True labels')\n",
    "plt.show()\n",
    "\n",
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72620912",
   "metadata": {
    "papermill": {
     "duration": 0.36032,
     "end_time": "2025-04-21T08:22:37.540764",
     "exception": false,
     "start_time": "2025-04-21T08:22:37.180444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**svm**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9a902386",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:22:38.033836Z",
     "iopub.status.busy": "2025-04-21T08:22:38.032981Z",
     "iopub.status.idle": "2025-04-21T08:23:13.959431Z",
     "shell.execute_reply": "2025-04-21T08:23:13.958156Z"
    },
    "papermill": {
     "duration": 36.341539,
     "end_time": "2025-04-21T08:23:14.126045",
     "exception": false,
     "start_time": "2025-04-21T08:22:37.784506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tuned SVM Accuracy: 74.25%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.10      0.19     31288\n",
      "           1       0.74      1.00      0.85     78582\n",
      "\n",
      "    accuracy                           0.74    109870\n",
      "   macro avg       0.84      0.55      0.52    109870\n",
      "weighted avg       0.79      0.74      0.66    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Use the same smaller training set\n",
    "X_train_small = X_train[:5000]\n",
    "y_train_small = y_train[:5000]\n",
    "\n",
    "# Tuned SVM model\n",
    "svm = SVC(C=5, gamma='scale', kernel='rbf', probability=True, random_state=42)\n",
    "svm.fit(X_train_small, y_train_small)\n",
    "\n",
    "# Predict probabilities for ensemble\n",
    "svm_pred = svm.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Evaluation function (same as yours)\n",
    "def print_results(model, X_test, y_test, model_name):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted labels\")\n",
    "    plt.ylabel(\"True labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Evaluate tuned SVM\n",
    "print_results(svm, X_test, y_test, 'Tuned SVM')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32ddc9bc",
   "metadata": {
    "papermill": {
     "duration": 0.364664,
     "end_time": "2025-04-21T08:23:14.726732",
     "exception": false,
     "start_time": "2025-04-21T08:23:14.362068",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MLP**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c3bd989e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:23:15.226599Z",
     "iopub.status.busy": "2025-04-21T08:23:15.225528Z",
     "iopub.status.idle": "2025-04-21T08:26:43.834235Z",
     "shell.execute_reply": "2025-04-21T08:26:43.833181Z"
    },
    "papermill": {
     "duration": 208.91122,
     "end_time": "2025-04-21T08:26:43.889680",
     "exception": false,
     "start_time": "2025-04-21T08:23:14.978460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tuned MLP Accuracy: 80.79%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.40      0.54     31288\n",
      "           1       0.80      0.97      0.88     78582\n",
      "\n",
      "    accuracy                           0.81    109870\n",
      "   macro avg       0.82      0.68      0.71    109870\n",
      "weighted avg       0.81      0.81      0.78    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Tuned MLP model\n",
    "mlp = MLPClassifier(hidden_layer_sizes=(64, 32),\n",
    "                    activation='relu',\n",
    "                    solver='adam',\n",
    "                    max_iter=100,\n",
    "                    early_stopping=True,\n",
    "                    random_state=42)\n",
    "\n",
    "mlp.fit(X_train, y_train)\n",
    "\n",
    "# Predict probabilities for ensemble\n",
    "mlp_pred = mlp.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Evaluation function (same as yours)\n",
    "def print_results(model, X_test, y_test, model_name):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted labels\")\n",
    "    plt.ylabel(\"True labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Evaluate tuned MLP\n",
    "print_results(mlp, X_test, y_test, 'Tuned MLP')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d95cc0a9",
   "metadata": {
    "papermill": {
     "duration": 0.236368,
     "end_time": "2025-04-21T08:26:44.369682",
     "exception": false,
     "start_time": "2025-04-21T08:26:44.133314",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "97129ff5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T08:26:44.928939Z",
     "iopub.status.busy": "2025-04-21T08:26:44.928562Z",
     "iopub.status.idle": "2025-04-21T08:26:49.522679Z",
     "shell.execute_reply": "2025-04-21T08:26:49.521436Z"
    },
    "papermill": {
     "duration": 4.832148,
     "end_time": "2025-04-21T08:26:49.524354",
     "exception": false,
     "start_time": "2025-04-21T08:26:44.692206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ensemble Model Accuracy: 79.29%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.33      0.47     31288\n",
      "           1       0.79      0.98      0.87     78582\n",
      "\n",
      "    accuracy                           0.79    109870\n",
      "   macro avg       0.82      0.65      0.67    109870\n",
      "weighted avg       0.81      0.79      0.76    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Ensure cnn_pred, svm_pred, and mlp_pred are already defined as probability outputs\n",
    "# cnn_pred should already be defined from: cnn_pred = cnn.predict(X_test_cnn).ravel()\n",
    "# svm_pred from: svm_pred = svm.predict_proba(X_test)[:, 1]\n",
    "# mlp_pred from: mlp_pred = mlp.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Convert probabilities to binary predictions\n",
    "cnn_pred_binary = (cnn_pred > 0.5).astype(int)\n",
    "svm_pred_binary = (svm_pred > 0.5).astype(int)\n",
    "mlp_pred_binary = (mlp_pred > 0.5).astype(int)\n",
    "\n",
    "# Combine predictions\n",
    "ensemble_predictions = np.vstack((cnn_pred_binary, svm_pred_binary, mlp_pred_binary)).T\n",
    "\n",
    "# Majority voting\n",
    "from scipy.stats import mode\n",
    "y_pred_ensemble = mode(ensemble_predictions, axis=1).mode.ravel()\n",
    "\n",
    "# Evaluation\n",
    "acc = accuracy_score(y_test, y_pred_ensemble)\n",
    "cm = confusion_matrix(y_test, y_pred_ensemble)\n",
    "\n",
    "print(f\"Ensemble Model Accuracy: {acc:.2%}\")\n",
    "\n",
    "# Confusion Matrix Plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.xlabel(\"Predicted labels\")\n",
    "plt.ylabel(\"True labels\")\n",
    "plt.title(\"Ensemble Model Confusion Matrix\")\n",
    "plt.show()\n",
    "\n",
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred_ensemble))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "177006e7",
   "metadata": {
    "papermill": {
     "duration": 0.234568,
     "end_time": "2025-04-21T08:26:49.997671",
     "exception": false,
     "start_time": "2025-04-21T08:26:49.763103",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 791543,
     "sourceId": 1359146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 591.593644,
   "end_time": "2025-04-21T08:26:53.665872",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-21T08:17:02.072228",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

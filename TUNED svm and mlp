{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b11cb51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:11.996575Z",
     "iopub.status.busy": "2025-04-20T20:23:11.996247Z",
     "iopub.status.idle": "2025-04-20T20:23:12.951426Z",
     "shell.execute_reply": "2025-04-20T20:23:12.950161Z"
    },
    "papermill": {
     "duration": 0.966675,
     "end_time": "2025-04-20T20:23:12.953112",
     "exception": false,
     "start_time": "2025-04-20T20:23:11.986437",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data source import complete.\n"
     ]
    }
   ],
   "source": [
    "import kagglehub\n",
    "taruntiwarihp_phishing_site_urls_path = kagglehub.dataset_download('taruntiwarihp/phishing-site-urls')\n",
    "\n",
    "print('Data source import complete.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc7c9f30",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:12.970963Z",
     "iopub.status.busy": "2025-04-20T20:23:12.969650Z",
     "iopub.status.idle": "2025-04-20T20:23:15.100081Z",
     "shell.execute_reply": "2025-04-20T20:23:15.098807Z"
    },
    "papermill": {
     "duration": 2.141264,
     "end_time": "2025-04-20T20:23:15.101769",
     "exception": false,
     "start_time": "2025-04-20T20:23:12.960505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/phishing-site-urls/phishing_site_urls.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c8930afc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:15.118581Z",
     "iopub.status.busy": "2025-04-20T20:23:15.118067Z",
     "iopub.status.idle": "2025-04-20T20:23:16.252884Z",
     "shell.execute_reply": "2025-04-20T20:23:16.251730Z"
    },
    "papermill": {
     "duration": 1.145055,
     "end_time": "2025-04-20T20:23:16.254788",
     "exception": false,
     "start_time": "2025-04-20T20:23:15.109733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/phishing-site-urls/phishing_site_urls.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "18f14926",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:16.270886Z",
     "iopub.status.busy": "2025-04-20T20:23:16.270511Z",
     "iopub.status.idle": "2025-04-20T20:23:16.298786Z",
     "shell.execute_reply": "2025-04-20T20:23:16.297601Z"
    },
    "papermill": {
     "duration": 0.038582,
     "end_time": "2025-04-20T20:23:16.300578",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.261996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 URL Label\n",
       "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad\n",
       "1  www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad\n",
       "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad\n",
       "3  mail.printakid.com/www.online.americanexpress....   bad\n",
       "4  thewhiskeydregs.com/wp-content/themes/widescre...   bad"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b7003afa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:16.316595Z",
     "iopub.status.busy": "2025-04-20T20:23:16.316189Z",
     "iopub.status.idle": "2025-04-20T20:23:16.325653Z",
     "shell.execute_reply": "2025-04-20T20:23:16.324745Z"
    },
    "papermill": {
     "duration": 0.019454,
     "end_time": "2025-04-20T20:23:16.327327",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.307873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       URL Label\n",
       "549341     23.227.196.215/   bad\n",
       "549342  apple-checker.org/   bad\n",
       "549343   apple-iclods.org/   bad\n",
       "549344  apple-uptoday.org/   bad\n",
       "549345   apple-search.info   bad"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "967c5ce2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:16.343198Z",
     "iopub.status.busy": "2025-04-20T20:23:16.342888Z",
     "iopub.status.idle": "2025-04-20T20:23:16.348564Z",
     "shell.execute_reply": "2025-04-20T20:23:16.347117Z"
    },
    "papermill": {
     "duration": 0.015745,
     "end_time": "2025-04-20T20:23:16.350422",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.334677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset shape: (549346, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Dataset shape:\", dataset.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6dcb1392",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:16.366885Z",
     "iopub.status.busy": "2025-04-20T20:23:16.366509Z",
     "iopub.status.idle": "2025-04-20T20:23:16.374996Z",
     "shell.execute_reply": "2025-04-20T20:23:16.373902Z"
    },
    "papermill": {
     "duration": 0.0185,
     "end_time": "2025-04-20T20:23:16.376658",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.358158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['URL', 'Label'], dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4f1c3ec3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:16.393105Z",
     "iopub.status.busy": "2025-04-20T20:23:16.392779Z",
     "iopub.status.idle": "2025-04-20T20:23:16.466957Z",
     "shell.execute_reply": "2025-04-20T20:23:16.465666Z"
    },
    "papermill": {
     "duration": 0.08477,
     "end_time": "2025-04-20T20:23:16.468848",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.384078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL      0\n",
       "Label    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d21f9f7",
   "metadata": {
    "papermill": {
     "duration": 0.008189,
     "end_time": "2025-04-20T20:23:16.485144",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.476955",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data preprocessing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fd15a9bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:16.503201Z",
     "iopub.status.busy": "2025-04-20T20:23:16.502852Z",
     "iopub.status.idle": "2025-04-20T20:23:18.781157Z",
     "shell.execute_reply": "2025-04-20T20:23:18.779944Z"
    },
    "papermill": {
     "duration": 2.288636,
     "end_time": "2025-04-20T20:23:18.782791",
     "exception": false,
     "start_time": "2025-04-20T20:23:16.494155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class distribution:\n",
      " class_url\n",
      "1    392924\n",
      "0    156422\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Top repeated URLs:\n",
      " URL\n",
      "jhomitevd2abj3fk.tor2web.org/    52\n",
      "jhomitevd2abj3fk.onion.to/       52\n",
      "zjfq4lnfbs7pncr5.onion.to/       44\n",
      "zjfq4lnfbs7pncr5.tor2web.org/    44\n",
      "5n7y4yihirccftc5.tor2web.org/    42\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Encode the 'Label' column into integers\n",
    "label_encoder = LabelEncoder()\n",
    "dataset['class_url'] = label_encoder.fit_transform(dataset['Label'])\n",
    "\n",
    "# Display the distribution of encoded classes\n",
    "print(\"Class distribution:\\n\", dataset['class_url'].value_counts())\n",
    "\n",
    "# Display the most frequent URLs\n",
    "print(\"\\nTop repeated URLs:\\n\", dataset['URL'].value_counts().head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1919ac3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:18.800790Z",
     "iopub.status.busy": "2025-04-20T20:23:18.799562Z",
     "iopub.status.idle": "2025-04-20T20:23:18.815336Z",
     "shell.execute_reply": "2025-04-20T20:23:18.814455Z"
    },
    "papermill": {
     "duration": 0.026561,
     "end_time": "2025-04-20T20:23:18.816975",
     "exception": false,
     "start_time": "2025-04-20T20:23:18.790414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0\n",
       "1       www.dghjdgf.com/paypal.co.uk/cycgi-bin/webscrc...   bad          0\n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0\n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0\n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0\n",
       "...                                                   ...   ...        ...\n",
       "549341                                    23.227.196.215/   bad          0\n",
       "549342                                 apple-checker.org/   bad          0\n",
       "549343                                  apple-iclods.org/   bad          0\n",
       "549344                                 apple-uptoday.org/   bad          0\n",
       "549345                                  apple-search.info   bad          0\n",
       "\n",
       "[549346 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bd9f2276",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:18.834168Z",
     "iopub.status.busy": "2025-04-20T20:23:18.833678Z",
     "iopub.status.idle": "2025-04-20T20:23:19.164585Z",
     "shell.execute_reply": "2025-04-20T20:23:19.163469Z"
    },
    "papermill": {
     "duration": 0.34131,
     "end_time": "2025-04-20T20:23:19.166302",
     "exception": false,
     "start_time": "2025-04-20T20:23:18.824992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                      URL Label  class_url\n",
      "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0\n",
      "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0\n",
      "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0\n",
      "3       mail.printakid.com/www.online.americanexpress....   bad          0\n",
      "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0\n",
      "...                                                   ...   ...        ...\n",
      "549341                                    23.227.196.215/   bad          0\n",
      "549342                                 apple-checker.org/   bad          0\n",
      "549343                                  apple-iclods.org/   bad          0\n",
      "549344                                 apple-uptoday.org/   bad          0\n",
      "549345                                  apple-search.info   bad          0\n",
      "\n",
      "[549346 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "# Remove 'www.' from URLs\n",
    "dataset['URL'] = dataset['URL'].str.replace(r'^www\\.', '', regex=True)\n",
    "print(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "44cb7131",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:19.183790Z",
     "iopub.status.busy": "2025-04-20T20:23:19.183398Z",
     "iopub.status.idle": "2025-04-20T20:23:19.404722Z",
     "shell.execute_reply": "2025-04-20T20:23:19.403776Z"
    },
    "papermill": {
     "duration": 0.232055,
     "end_time": "2025-04-20T20:23:19.406539",
     "exception": false,
     "start_time": "2025-04-20T20:23:19.174484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  \n",
       "0           225  \n",
       "1            77  \n",
       "2           177  \n",
       "3            60  \n",
       "4           116  \n",
       "...         ...  \n",
       "549341       15  \n",
       "549342       18  \n",
       "549343       17  \n",
       "549344       18  \n",
       "549345       17  \n",
       "\n",
       "[549346 rows x 4 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a feature for URL length\n",
    "dataset['url_len'] = dataset['URL'].apply(lambda x: len(str(x)))\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fcdc4835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:19.424013Z",
     "iopub.status.busy": "2025-04-20T20:23:19.423641Z",
     "iopub.status.idle": "2025-04-20T20:23:24.994998Z",
     "shell.execute_reply": "2025-04-20T20:23:24.993782Z"
    },
    "papermill": {
     "duration": 5.58234,
     "end_time": "2025-04-20T20:23:24.996873",
     "exception": false,
     "start_time": "2025-04-20T20:23:19.414533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tld\r\n",
      "  Downloading tld-0.13-py2.py3-none-any.whl.metadata (9.4 kB)\r\n",
      "Downloading tld-0.13-py2.py3-none-any.whl (263 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m263.8/263.8 kB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: tld\r\n",
      "Successfully installed tld-0.13\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tld"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3f62bcc3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:25.015659Z",
     "iopub.status.busy": "2025-04-20T20:23:25.015261Z",
     "iopub.status.idle": "2025-04-20T20:23:27.392271Z",
     "shell.execute_reply": "2025-04-20T20:23:27.391315Z"
    },
    "papermill": {
     "duration": 2.388593,
     "end_time": "2025-04-20T20:23:27.393933",
     "exception": false,
     "start_time": "2025-04-20T20:23:25.005340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  \n",
       "0           225             0  \n",
       "1            77             0  \n",
       "2           177             0  \n",
       "3            60             0  \n",
       "4           116             0  \n",
       "...         ...           ...  \n",
       "549341       15             0  \n",
       "549342       18             0  \n",
       "549343       17             0  \n",
       "549344       18             0  \n",
       "549345       17             0  \n",
       "\n",
       "[549346 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "import re\n",
    "\n",
    "# Function to check if the hostname appears in the full URL\n",
    "def abnormal_url(url):\n",
    "    hostname = urlparse(url).hostname\n",
    "    if hostname and re.search(re.escape(hostname), url):\n",
    "        return 1  # Normal URL\n",
    "    else:\n",
    "        return 0  # Abnormal URL\n",
    "\n",
    "# Apply the abnormal_url function to each URL in the dataset\n",
    "dataset['abnormal_url'] = dataset['URL'].apply(abnormal_url)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cca1c5d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:27.412975Z",
     "iopub.status.busy": "2025-04-20T20:23:27.412640Z",
     "iopub.status.idle": "2025-04-20T20:23:27.422747Z",
     "shell.execute_reply": "2025-04-20T20:23:27.421760Z"
    },
    "papermill": {
     "duration": 0.021131,
     "end_time": "2025-04-20T20:23:27.424315",
     "exception": false,
     "start_time": "2025-04-20T20:23:27.403184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abnormal_url\n",
      "0    549217\n",
      "1       129\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of abnormal_url values\n",
    "print(dataset['abnormal_url'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fd546795",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:27.443262Z",
     "iopub.status.busy": "2025-04-20T20:23:27.442924Z",
     "iopub.status.idle": "2025-04-20T20:23:30.425053Z",
     "shell.execute_reply": "2025-04-20T20:23:30.423782Z"
    },
    "papermill": {
     "duration": 2.994106,
     "end_time": "2025-04-20T20:23:30.427114",
     "exception": false,
     "start_time": "2025-04-20T20:23:27.433008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 URL  use_of_ip_address\n",
      "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...                  0\n",
      "1  dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...                  0\n",
      "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....                  0\n",
      "3  mail.printakid.com/www.online.americanexpress....                  0\n",
      "4  thewhiskeydregs.com/wp-content/themes/widescre...                  0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  \n",
       "0           225             0                  0  \n",
       "1            77             0                  0  \n",
       "2           177             0                  0  \n",
       "3            60             0                  0  \n",
       "4           116             0                  0  \n",
       "...         ...           ...                ...  \n",
       "549341       15             0                  1  \n",
       "549342       18             0                  0  \n",
       "549343       17             0                  0  \n",
       "549344       18             0                  0  \n",
       "549345       17             0                  0  \n",
       "\n",
       "[549346 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Function to detect if an IP address is present in the URL\n",
    "def having_ip_address(url: str) -> int:\n",
    "    # Regular expression for matching IPv4, hexadecimal IPv4, and IPv6 addresses\n",
    "    match = re.search(\n",
    "        r'(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\/)|'  # IPv4\n",
    "        r'((0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\.(0x[0-9a-fA-F]{1,2})\\/)'  # Hexadecimal IPv4\n",
    "        r'(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # IPv6\n",
    "\n",
    "    if match:\n",
    "        return 1  # IP address found\n",
    "    else:\n",
    "        return 0  # No IP address found\n",
    "\n",
    "# Apply the function to the 'URL' column\n",
    "dataset['use_of_ip_address'] = dataset['URL'].apply(having_ip_address)\n",
    "\n",
    "# Preview the new feature\n",
    "print(dataset[['URL', 'use_of_ip_address']].head())\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "65dc4c8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:30.517595Z",
     "iopub.status.busy": "2025-04-20T20:23:30.517269Z",
     "iopub.status.idle": "2025-04-20T20:23:30.527161Z",
     "shell.execute_reply": "2025-04-20T20:23:30.526021Z"
    },
    "papermill": {
     "duration": 0.09136,
     "end_time": "2025-04-20T20:23:30.528759",
     "exception": false,
     "start_time": "2025-04-20T20:23:30.437399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "use_of_ip_address\n",
      "0    543634\n",
      "1      5712\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check the distribution of use_of_ip_address values\n",
    "print(dataset['use_of_ip_address'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1e7f846a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:30.548429Z",
     "iopub.status.busy": "2025-04-20T20:23:30.547680Z",
     "iopub.status.idle": "2025-04-20T20:23:34.256388Z",
     "shell.execute_reply": "2025-04-20T20:23:34.255403Z"
    },
    "papermill": {
     "duration": 3.720182,
     "end_time": "2025-04-20T20:23:34.258002",
     "exception": false,
     "start_time": "2025-04-20T20:23:30.537820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  \n",
       "0       0  0  0   0  \n",
       "1       0  0  0   0  \n",
       "2       0  0  0   0  \n",
       "3       0  0  0   0  \n",
       "4       0  0  0   1  \n",
       "...    .. .. ..  ..  \n",
       "549341  0  0  0   0  \n",
       "549342  0  0  0   0  \n",
       "549343  0  0  0   0  \n",
       "549344  0  0  0   0  \n",
       "549345  0  0  0   0  \n",
       "\n",
       "[549346 rows x 19 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of special characters to count in URLs\n",
    "features = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "\n",
    "# Count occurrences of each feature in the 'URL' column and create new columns\n",
    "for feature in features:\n",
    "    dataset[feature] = dataset['URL'].apply(lambda url: url.count(feature))\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c259bc60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:34.280142Z",
     "iopub.status.busy": "2025-04-20T20:23:34.279754Z",
     "iopub.status.idle": "2025-04-20T20:23:37.909998Z",
     "shell.execute_reply": "2025-04-20T20:23:37.908890Z"
    },
    "papermill": {
     "duration": 3.643109,
     "end_time": "2025-04-20T20:23:37.911730",
     "exception": false,
     "start_time": "2025-04-20T20:23:34.268621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  \n",
       "0       0  0  0   0  \n",
       "1       0  0  0   0  \n",
       "2       0  0  0   0  \n",
       "3       0  0  0   0  \n",
       "4       0  0  0   1  \n",
       "...    .. .. ..  ..  \n",
       "549341  0  0  0   0  \n",
       "549342  0  0  0   0  \n",
       "549343  0  0  0   0  \n",
       "549344  0  0  0   0  \n",
       "549345  0  0  0   0  \n",
       "\n",
       "[549346 rows x 19 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of special characters to count in URLs\n",
    "features = ['@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//']\n",
    "\n",
    "# Count occurrences of each special character in the 'URL' column and create new columns\n",
    "for feature in features:\n",
    "    dataset[feature] = dataset['URL'].apply(lambda url: url.count(feature))\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4e37be17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:37.933413Z",
     "iopub.status.busy": "2025-04-20T20:23:37.933037Z",
     "iopub.status.idle": "2025-04-20T20:23:39.923223Z",
     "shell.execute_reply": "2025-04-20T20:23:39.922257Z"
    },
    "papermill": {
     "duration": 2.003341,
     "end_time": "2025-04-20T20:23:39.924950",
     "exception": false,
     "start_time": "2025-04-20T20:23:37.921609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>.</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  .  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  6  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  4  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  7  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  6  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  1  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. .. .. .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  3  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  1  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  https  \n",
       "0       0  0  0   0      0  \n",
       "1       0  0  0   0      0  \n",
       "2       0  0  0   0      0  \n",
       "3       0  0  0   0      0  \n",
       "4       0  0  0   1      0  \n",
       "...    .. .. ..  ..    ...  \n",
       "549341  0  0  0   0      0  \n",
       "549342  0  0  0   0      0  \n",
       "549343  0  0  0   0      0  \n",
       "549344  0  0  0   0      0  \n",
       "549345  0  0  0   0      0  \n",
       "\n",
       "[549346 rows x 20 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.parse import urlparse\n",
    "\n",
    "# Function to check if the URL uses HTTPS\n",
    "def httpSecured(url: str) -> int:\n",
    "    scheme = urlparse(url).scheme  # Extract the scheme (http or https)\n",
    "    return 1 if scheme == 'https' else 0  # Return 1 if HTTPS, otherwise 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'https'\n",
    "dataset['https'] = dataset['URL'].apply(httpSecured)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3fb194c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:39.946499Z",
     "iopub.status.busy": "2025-04-20T20:23:39.946144Z",
     "iopub.status.idle": "2025-04-20T20:23:42.253365Z",
     "shell.execute_reply": "2025-04-20T20:23:42.252453Z"
    },
    "papermill": {
     "duration": 2.31987,
     "end_time": "2025-04-20T20:23:42.255177",
     "exception": false,
     "start_time": "2025-04-20T20:23:39.935307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                 URL  digits\n",
      "0  nobell.it/70ffb52d079109dca5664cce6f317373782/...      58\n",
      "1  dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...       1\n",
      "2  serviciosbys.com/paypal.cgi.bin.get-into.herf....      47\n",
      "3  mail.printakid.com/www.online.americanexpress....       0\n",
      "4  thewhiskeydregs.com/wp-content/themes/widescre...      21\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>#</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  #  %  +  $  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        !  *  ,  //  https  digits  \n",
       "0       0  0  0   0      0      58  \n",
       "1       0  0  0   0      0       1  \n",
       "2       0  0  0   0      0      47  \n",
       "3       0  0  0   0      0       0  \n",
       "4       0  0  0   1      0      21  \n",
       "...    .. .. ..  ..    ...     ...  \n",
       "549341  0  0  0   0      0      11  \n",
       "549342  0  0  0   0      0       0  \n",
       "549343  0  0  0   0      0       0  \n",
       "549344  0  0  0   0      0       0  \n",
       "549345  0  0  0   0      0       0  \n",
       "\n",
       "[549346 rows x 21 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to count the number of digits in the URL\n",
    "def digit_count(url: str) -> int:\n",
    "    # Count digits in the URL string\n",
    "    return sum(c.isnumeric() for c in url)\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'digits'\n",
    "dataset['digits'] = dataset['URL'].apply(digit_count)\n",
    "\n",
    "# Preview the new 'digits' feature\n",
    "print(dataset[['URL', 'digits']].head())\n",
    "\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "588d8d0b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:42.277614Z",
     "iopub.status.busy": "2025-04-20T20:23:42.277261Z",
     "iopub.status.idle": "2025-04-20T20:23:44.634193Z",
     "shell.execute_reply": "2025-04-20T20:23:44.633244Z"
    },
    "papermill": {
     "duration": 2.370226,
     "end_time": "2025-04-20T20:23:44.636019",
     "exception": false,
     "start_time": "2025-04-20T20:23:42.265793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>%</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  %  +  $  !  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        *  ,  //  https  digits  letters  \n",
       "0       0  0   0      0      58      135  \n",
       "1       0  0   0      0       1       62  \n",
       "2       0  0   0      0      47      111  \n",
       "3       0  0   0      0       0       52  \n",
       "4       0  0   1      0      21       82  \n",
       "...    .. ..  ..    ...     ...      ...  \n",
       "549341  0  0   0      0      11        0  \n",
       "549342  0  0   0      0       0       15  \n",
       "549343  0  0   0      0       0       14  \n",
       "549344  0  0   0      0       0       15  \n",
       "549345  0  0   0      0       0       15  \n",
       "\n",
       "[549346 rows x 22 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Function to count the number of letters in the URL\n",
    "def letter_count(url: str) -> int:\n",
    "    # Count alphabetic characters (letters) in the URL string\n",
    "    return sum(c.isalpha() for c in url)\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'letters'\n",
    "dataset['letters'] = dataset['URL'].apply(letter_count)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "350ef3b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:44.659730Z",
     "iopub.status.busy": "2025-04-20T20:23:44.659388Z",
     "iopub.status.idle": "2025-04-20T20:23:49.133986Z",
     "shell.execute_reply": "2025-04-20T20:23:49.132908Z"
    },
    "papermill": {
     "duration": 4.488053,
     "end_time": "2025-04-20T20:23:49.135614",
     "exception": false,
     "start_time": "2025-04-20T20:23:44.647561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>+</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  +  $  !  *  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        ,  //  https  digits  letters  Shortining_Service  \n",
       "0       0   0      0      58      135                   0  \n",
       "1       0   0      0       1       62                   0  \n",
       "2       0   0      0      47      111                   0  \n",
       "3       0   0      0       0       52                   0  \n",
       "4       0   1      0      21       82                   0  \n",
       "...    ..  ..    ...     ...      ...                 ...  \n",
       "549341  0   0      0      11        0                   0  \n",
       "549342  0   0      0       0       15                   0  \n",
       "549343  0   0      0       0       14                   0  \n",
       "549344  0   0      0       0       15                   0  \n",
       "549345  0   0      0       0       15                   0  \n",
       "\n",
       "[549346 rows x 23 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Function to check if the URL uses a shortening service\n",
    "def Shortening_Service(url: str) -> int:\n",
    "    # List of common URL shortening services\n",
    "    shortening_services = (\n",
    "        'bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|yfrog\\.com|'\n",
    "        'migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|short\\.to|BudURL\\.com|'\n",
    "        'ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|doiop\\.com|short\\.ie|kl\\.am|'\n",
    "        'wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|'\n",
    "        'cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|'\n",
    "        'buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|'\n",
    "        'qr\\.net|1url\\.com|tweez\\.me|v\\.gd|tr\\.im|link\\.zip\\.net'\n",
    "    )\n",
    "    # Search for any matching shortening service in the URL\n",
    "    match = re.search(shortening_services, url)\n",
    "    \n",
    "    # Return 1 if match found, otherwise return 0\n",
    "    return 1 if match else 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'Shortining_Service'\n",
    "dataset['Shortining_Service'] = dataset['URL'].apply(Shortening_Service)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8774e126",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:49.159922Z",
     "iopub.status.busy": "2025-04-20T20:23:49.159538Z",
     "iopub.status.idle": "2025-04-20T20:23:53.174830Z",
     "shell.execute_reply": "2025-04-20T20:23:53.173672Z"
    },
    "papermill": {
     "duration": 4.029411,
     "end_time": "2025-04-20T20:23:53.176608",
     "exception": false,
     "start_time": "2025-04-20T20:23:49.147197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting googlesearch-python\r\n",
      "  Downloading googlesearch_python-1.3.0-py3-none-any.whl.metadata (3.4 kB)\r\n",
      "Requirement already satisfied: beautifulsoup4>=4.9 in /usr/local/lib/python3.11/dist-packages (from googlesearch-python) (4.13.3)\r\n",
      "Requirement already satisfied: requests>=2.20 in /usr/local/lib/python3.11/dist-packages (from googlesearch-python) (2.32.3)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.9->googlesearch-python) (2.6)\r\n",
      "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.9->googlesearch-python) (4.13.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (3.4.1)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (2.3.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.20->googlesearch-python) (2025.1.31)\r\n",
      "Downloading googlesearch_python-1.3.0-py3-none-any.whl (5.6 kB)\r\n",
      "Installing collected packages: googlesearch-python\r\n",
      "Successfully installed googlesearch-python-1.3.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install googlesearch-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "38ba8d97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:53.201154Z",
     "iopub.status.busy": "2025-04-20T20:23:53.200796Z",
     "iopub.status.idle": "2025-04-20T20:23:54.645624Z",
     "shell.execute_reply": "2025-04-20T20:23:54.644392Z"
    },
    "papermill": {
     "duration": 1.45905,
     "end_time": "2025-04-20T20:23:54.647324",
     "exception": false,
     "start_time": "2025-04-20T20:23:53.188274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>URL</th>\n",
       "      <th>Label</th>\n",
       "      <th>class_url</th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>@</th>\n",
       "      <th>?</th>\n",
       "      <th>-</th>\n",
       "      <th>=</th>\n",
       "      <th>...</th>\n",
       "      <th>$</th>\n",
       "      <th>!</th>\n",
       "      <th>*</th>\n",
       "      <th>,</th>\n",
       "      <th>//</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "      <th>google_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>nobell.it/70ffb52d079109dca5664cce6f317373782/...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>serviciosbys.com/paypal.cgi.bin.get-into.herf....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>mail.printakid.com/www.online.americanexpress....</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>thewhiskeydregs.com/wp-content/themes/widescre...</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>23.227.196.215/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>apple-checker.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>apple-iclods.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>apple-uptoday.org/</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>apple-search.info</td>\n",
       "      <td>bad</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                      URL Label  class_url  \\\n",
       "0       nobell.it/70ffb52d079109dca5664cce6f317373782/...   bad          0   \n",
       "1       dghjdgf.com/paypal.co.uk/cycgi-bin/webscrcmd=_...   bad          0   \n",
       "2       serviciosbys.com/paypal.cgi.bin.get-into.herf....   bad          0   \n",
       "3       mail.printakid.com/www.online.americanexpress....   bad          0   \n",
       "4       thewhiskeydregs.com/wp-content/themes/widescre...   bad          0   \n",
       "...                                                   ...   ...        ...   \n",
       "549341                                    23.227.196.215/   bad          0   \n",
       "549342                                 apple-checker.org/   bad          0   \n",
       "549343                                  apple-iclods.org/   bad          0   \n",
       "549344                                 apple-uptoday.org/   bad          0   \n",
       "549345                                  apple-search.info   bad          0   \n",
       "\n",
       "        url_len  abnormal_url  use_of_ip_address  @  ?  -  =  ...  $  !  *  ,  \\\n",
       "0           225             0                  0  0  1  4  4  ...  0  0  0  0   \n",
       "1            77             0                  0  0  0  2  2  ...  0  0  0  0   \n",
       "2           177             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "3            60             0                  0  0  0  0  0  ...  0  0  0  0   \n",
       "4           116             0                  0  0  1  1  0  ...  0  0  0  0   \n",
       "...         ...           ...                ... .. .. .. ..  ... .. .. .. ..   \n",
       "549341       15             0                  1  0  0  0  0  ...  0  0  0  0   \n",
       "549342       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549343       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549344       18             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "549345       17             0                  0  0  0  1  0  ...  0  0  0  0   \n",
       "\n",
       "        //  https  digits  letters  Shortining_Service  google_index  \n",
       "0        0      0      58      135                   0             1  \n",
       "1        0      0       1       62                   0             1  \n",
       "2        0      0      47      111                   0             1  \n",
       "3        0      0       0       52                   0             1  \n",
       "4        1      0      21       82                   0             1  \n",
       "...     ..    ...     ...      ...                 ...           ...  \n",
       "549341   0      0      11        0                   0             1  \n",
       "549342   0      0       0       15                   0             1  \n",
       "549343   0      0       0       14                   0             1  \n",
       "549344   0      0       0       15                   0             1  \n",
       "549345   0      0       0       15                   0             1  \n",
       "\n",
       "[549346 rows x 24 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from googlesearch import search\n",
    "\n",
    "# Function to check if a URL is indexed by Google\n",
    "def google_index(url: str) -> int:\n",
    "    # Search the URL on Google and retrieve the top 5 results\n",
    "    site = search(url, num_results=5)\n",
    "    return 1 if site else 0  # Return 1 if indexed, otherwise 0\n",
    "\n",
    "# Apply the function to the 'URL' column and create a new feature 'google_index'\n",
    "dataset['google_index'] = dataset['URL'].apply(google_index)\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3a8a7f73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:54.676322Z",
     "iopub.status.busy": "2025-04-20T20:23:54.675787Z",
     "iopub.status.idle": "2025-04-20T20:23:54.772337Z",
     "shell.execute_reply": "2025-04-20T20:23:54.771068Z"
    },
    "papermill": {
     "duration": 0.114117,
     "end_time": "2025-04-20T20:23:54.774057",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.659940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "URL                   0\n",
       "Label                 0\n",
       "class_url             0\n",
       "url_len               0\n",
       "abnormal_url          0\n",
       "use_of_ip_address     0\n",
       "@                     0\n",
       "?                     0\n",
       "-                     0\n",
       "=                     0\n",
       ".                     0\n",
       "#                     0\n",
       "%                     0\n",
       "+                     0\n",
       "$                     0\n",
       "!                     0\n",
       "*                     0\n",
       ",                     0\n",
       "//                    0\n",
       "https                 0\n",
       "digits                0\n",
       "letters               0\n",
       "Shortining_Service    0\n",
       "google_index          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "38a6d548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:54.800571Z",
     "iopub.status.busy": "2025-04-20T20:23:54.800240Z",
     "iopub.status.idle": "2025-04-20T20:23:54.808231Z",
     "shell.execute_reply": "2025-04-20T20:23:54.807058Z"
    },
    "papermill": {
     "duration": 0.0237,
     "end_time": "2025-04-20T20:23:54.810847",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.787147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(549346, 24)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af0d425",
   "metadata": {
    "papermill": {
     "duration": 0.012081,
     "end_time": "2025-04-20T20:23:54.835130",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.823049",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Data Training and Testing**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b2557064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:54.860162Z",
     "iopub.status.busy": "2025-04-20T20:23:54.859841Z",
     "iopub.status.idle": "2025-04-20T20:23:54.887262Z",
     "shell.execute_reply": "2025-04-20T20:23:54.886212Z"
    },
    "papermill": {
     "duration": 0.042314,
     "end_time": "2025-04-20T20:23:54.889118",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.846804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dropping unnecessary columns and creating feature set 'X'\n",
    "X = dataset.drop(['URL', 'Label', 'class_url', '@', '?', '-', '=', '.', '#', '%', '+', '$', '!', '*', ',', '//'], axis=1)\n",
    "\n",
    "# Target variable 'y' is the class_url column\n",
    "y = dataset['class_url']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fc916f3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:54.916446Z",
     "iopub.status.busy": "2025-04-20T20:23:54.916127Z",
     "iopub.status.idle": "2025-04-20T20:23:54.928698Z",
     "shell.execute_reply": "2025-04-20T20:23:54.927888Z"
    },
    "papermill": {
     "duration": 0.027915,
     "end_time": "2025-04-20T20:23:54.930201",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.902286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>url_len</th>\n",
       "      <th>abnormal_url</th>\n",
       "      <th>use_of_ip_address</th>\n",
       "      <th>https</th>\n",
       "      <th>digits</th>\n",
       "      <th>letters</th>\n",
       "      <th>Shortining_Service</th>\n",
       "      <th>google_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>225</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>177</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>111</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>116</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549341</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549342</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549343</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549344</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>549345</th>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>549346 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        url_len  abnormal_url  use_of_ip_address  https  digits  letters  \\\n",
       "0           225             0                  0      0      58      135   \n",
       "1            77             0                  0      0       1       62   \n",
       "2           177             0                  0      0      47      111   \n",
       "3            60             0                  0      0       0       52   \n",
       "4           116             0                  0      0      21       82   \n",
       "...         ...           ...                ...    ...     ...      ...   \n",
       "549341       15             0                  1      0      11        0   \n",
       "549342       18             0                  0      0       0       15   \n",
       "549343       17             0                  0      0       0       14   \n",
       "549344       18             0                  0      0       0       15   \n",
       "549345       17             0                  0      0       0       15   \n",
       "\n",
       "        Shortining_Service  google_index  \n",
       "0                        0             1  \n",
       "1                        0             1  \n",
       "2                        0             1  \n",
       "3                        0             1  \n",
       "4                        0             1  \n",
       "...                    ...           ...  \n",
       "549341                   0             1  \n",
       "549342                   0             1  \n",
       "549343                   0             1  \n",
       "549344                   0             1  \n",
       "549345                   0             1  \n",
       "\n",
       "[549346 rows x 8 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e951f77b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:54.957451Z",
     "iopub.status.busy": "2025-04-20T20:23:54.957070Z",
     "iopub.status.idle": "2025-04-20T20:23:54.964366Z",
     "shell.execute_reply": "2025-04-20T20:23:54.963549Z"
    },
    "papermill": {
     "duration": 0.022258,
     "end_time": "2025-04-20T20:23:54.965762",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.943504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         0\n",
       "1         0\n",
       "2         0\n",
       "3         0\n",
       "4         0\n",
       "         ..\n",
       "549341    0\n",
       "549342    0\n",
       "549343    0\n",
       "549344    0\n",
       "549345    0\n",
       "Name: class_url, Length: 549346, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1ce48def",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:54.992392Z",
     "iopub.status.busy": "2025-04-20T20:23:54.991995Z",
     "iopub.status.idle": "2025-04-20T20:23:55.268171Z",
     "shell.execute_reply": "2025-04-20T20:23:55.267253Z"
    },
    "papermill": {
     "duration": 0.291675,
     "end_time": "2025-04-20T20:23:55.269872",
     "exception": false,
     "start_time": "2025-04-20T20:23:54.978197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7c0f1ec3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:55.295757Z",
     "iopub.status.busy": "2025-04-20T20:23:55.295428Z",
     "iopub.status.idle": "2025-04-20T20:23:55.300626Z",
     "shell.execute_reply": "2025-04-20T20:23:55.299616Z"
    },
    "papermill": {
     "duration": 0.019948,
     "end_time": "2025-04-20T20:23:55.302151",
     "exception": false,
     "start_time": "2025-04-20T20:23:55.282203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train Shape : (439476, 8)\n",
      "Y_train Shape : (439476,)\n",
      "X_test Shape : (109870, 8)\n",
      "Y_test Shape : (109870,)\n"
     ]
    }
   ],
   "source": [
    "print(f\"X_train Shape : {X_train.shape}\")  # Shape of the training features\n",
    "print(f\"Y_train Shape : {y_train.shape}\")  # Shape of the training target variable\n",
    "print(f\"X_test Shape : {X_test.shape}\")    # Shape of the test features\n",
    "print(f\"Y_test Shape : {y_test.shape}\")    # Shape of the test target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dadcd31",
   "metadata": {
    "papermill": {
     "duration": 0.011972,
     "end_time": "2025-04-20T20:23:55.326532",
     "exception": false,
     "start_time": "2025-04-20T20:23:55.314560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model Developing CNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "76af5bf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:23:55.352786Z",
     "iopub.status.busy": "2025-04-20T20:23:55.352414Z",
     "iopub.status.idle": "2025-04-20T20:28:18.621034Z",
     "shell.execute_reply": "2025-04-20T20:28:18.619784Z"
    },
    "papermill": {
     "duration": 263.284214,
     "end_time": "2025-04-20T20:28:18.623017",
     "exception": false,
     "start_time": "2025-04-20T20:23:55.338803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-20 20:23:57.690987: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1745180637.931885      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1745180638.004792      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-20 20:24:13.335831: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 4ms/step - accuracy: 0.7236 - loss: 0.6286 - val_accuracy: 0.7645 - val_loss: 0.5260\n",
      "Epoch 2/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 4ms/step - accuracy: 0.7640 - loss: 0.5244 - val_accuracy: 0.7678 - val_loss: 0.5104\n",
      "Epoch 3/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 4ms/step - accuracy: 0.7737 - loss: 0.5118 - val_accuracy: 0.7774 - val_loss: 0.5055\n",
      "Epoch 4/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 4ms/step - accuracy: 0.7759 - loss: 0.5085 - val_accuracy: 0.7782 - val_loss: 0.5034\n",
      "Epoch 5/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 4ms/step - accuracy: 0.7772 - loss: 0.5071 - val_accuracy: 0.7799 - val_loss: 0.5012\n",
      "Epoch 6/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 4ms/step - accuracy: 0.7795 - loss: 0.5042 - val_accuracy: 0.7746 - val_loss: 0.5038\n",
      "Epoch 7/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 4ms/step - accuracy: 0.7793 - loss: 0.5041 - val_accuracy: 0.7825 - val_loss: 0.5004\n",
      "Epoch 8/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 4ms/step - accuracy: 0.7809 - loss: 0.5022 - val_accuracy: 0.7794 - val_loss: 0.4997\n",
      "Epoch 9/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 4ms/step - accuracy: 0.7812 - loss: 0.5016 - val_accuracy: 0.7809 - val_loss: 0.5005\n",
      "Epoch 10/10\n",
      "\u001b[1m5494/5494\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 4ms/step - accuracy: 0.7798 - loss: 0.5035 - val_accuracy: 0.7827 - val_loss: 0.4975\n",
      "\u001b[1m3434/3434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step\n",
      "Tuned CNN Accuracy: 78.58%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.33      0.47     31288\n",
      "           1       0.78      0.97      0.87     78582\n",
      "\n",
      "    accuracy                           0.79    109870\n",
      "   macro avg       0.79      0.65      0.67    109870\n",
      "weighted avg       0.79      0.79      0.75    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout, Input\n",
    "from keras.callbacks import EarlyStopping\n",
    "\n",
    "\n",
    "# Reshape data for CNN input\n",
    "X_train_cnn = np.expand_dims(X_train.values, axis=2)\n",
    "X_test_cnn = np.expand_dims(X_test.values, axis=2)\n",
    "\n",
    "# Build tuned CNN model\n",
    "cnn = Sequential([\n",
    "    Input(shape=(X_train_cnn.shape[1], 1)),  # Automatically adjusts to your data\n",
    "    Conv1D(filters=32, kernel_size=3, activation='relu', padding='same'),\n",
    "    MaxPooling1D(pool_size=2),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Conv1D(filters=64, kernel_size=3, activation='relu', padding='same'),\n",
    "    MaxPooling1D(pool_size=2),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Flatten(),  # Flatten to match the output size\n",
    "    Dense(128, activation='relu'),  # Dense layer to match the flattened size\n",
    "    Dropout(0.3),\n",
    "    Dense(1, activation='sigmoid')\n",
    "])\n",
    "\n",
    "\n",
    "\n",
    "# Compile the model\n",
    "cnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Early stopping to prevent overfitting\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
    "\n",
    "# Train the model with validation split\n",
    "cnn.fit(X_train_cnn, y_train,\n",
    "        epochs=10,  # Slightly higher, but with early stopping\n",
    "        batch_size=64,  # Larger batch size for faster training\n",
    "        validation_split=0.2,\n",
    "        callbacks=[early_stop],\n",
    "        verbose=1)\n",
    "\n",
    "# Predict and evaluate\n",
    "cnn_pred = cnn.predict(X_test_cnn).ravel()\n",
    "y_pred = (cnn_pred > 0.5).astype(int)\n",
    "\n",
    "# Accuracy\n",
    "accuracy = cnn.evaluate(X_test_cnn, y_test, verbose=0)\n",
    "print(f\"Tuned CNN Accuracy: {accuracy[1]:.2%}\")\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "            xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "            yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "plt.title('Tuned CNN Confusion Matrix')\n",
    "plt.xlabel('Predicted labels')\n",
    "plt.ylabel('True labels')\n",
    "plt.show()\n",
    "\n",
    "# Classification Report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c922de2c",
   "metadata": {
    "papermill": {
     "duration": 0.293905,
     "end_time": "2025-04-20T20:28:19.138529",
     "exception": false,
     "start_time": "2025-04-20T20:28:18.844624",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**svm**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d5f98b95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:28:19.568854Z",
     "iopub.status.busy": "2025-04-20T20:28:19.568053Z",
     "iopub.status.idle": "2025-04-20T20:28:55.701057Z",
     "shell.execute_reply": "2025-04-20T20:28:55.700041Z"
    },
    "papermill": {
     "duration": 36.410829,
     "end_time": "2025-04-20T20:28:55.762131",
     "exception": false,
     "start_time": "2025-04-20T20:28:19.351302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tuned SVM Accuracy: 74.25%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.10      0.19     31288\n",
      "           1       0.74      1.00      0.85     78582\n",
      "\n",
      "    accuracy                           0.74    109870\n",
      "   macro avg       0.84      0.55      0.52    109870\n",
      "weighted avg       0.79      0.74      0.66    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Use the same smaller training set\n",
    "X_train_small = X_train[:5000]\n",
    "y_train_small = y_train[:5000]\n",
    "\n",
    "# Tuned SVM model\n",
    "svm = SVC(C=5, gamma='scale', kernel='rbf', probability=True, random_state=42)\n",
    "svm.fit(X_train_small, y_train_small)\n",
    "\n",
    "# Predict probabilities for ensemble\n",
    "svm_pred = svm.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Evaluation function (same as yours)\n",
    "def print_results(model, X_test, y_test, model_name):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted labels\")\n",
    "    plt.ylabel(\"True labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Evaluate tuned SVM\n",
    "print_results(svm, X_test, y_test, 'Tuned SVM')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2924bf8d",
   "metadata": {
    "papermill": {
     "duration": 0.21959,
     "end_time": "2025-04-20T20:28:56.205781",
     "exception": false,
     "start_time": "2025-04-20T20:28:55.986191",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MLP**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f72f5083",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:28:56.645824Z",
     "iopub.status.busy": "2025-04-20T20:28:56.645442Z",
     "iopub.status.idle": "2025-04-20T20:32:08.460315Z",
     "shell.execute_reply": "2025-04-20T20:32:08.459242Z"
    },
    "papermill": {
     "duration": 192.090375,
     "end_time": "2025-04-20T20:32:08.515318",
     "exception": false,
     "start_time": "2025-04-20T20:28:56.424943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tuned MLP Accuracy: 80.79%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.40      0.54     31288\n",
      "           1       0.80      0.97      0.88     78582\n",
      "\n",
      "    accuracy                           0.81    109870\n",
      "   macro avg       0.82      0.68      0.71    109870\n",
      "weighted avg       0.81      0.81      0.78    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Tuned MLP model\n",
    "mlp = MLPClassifier(hidden_layer_sizes=(64, 32),\n",
    "                    activation='relu',\n",
    "                    solver='adam',\n",
    "                    max_iter=100,\n",
    "                    early_stopping=True,\n",
    "                    random_state=42)\n",
    "\n",
    "mlp.fit(X_train, y_train)\n",
    "\n",
    "# Predict probabilities for ensemble\n",
    "mlp_pred = mlp.predict_proba(X_test)[:, 1]\n",
    "\n",
    "# Evaluation function (same as yours)\n",
    "def print_results(model, X_test, y_test, model_name):\n",
    "    y_pred = model.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted labels\")\n",
    "    plt.ylabel(\"True labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Evaluate tuned MLP\n",
    "print_results(mlp, X_test, y_test, 'Tuned MLP')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c93c537",
   "metadata": {
    "papermill": {
     "duration": 0.217379,
     "end_time": "2025-04-20T20:32:08.959005",
     "exception": false,
     "start_time": "2025-04-20T20:32:08.741626",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Ensemble Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2b61d7a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-20T20:32:09.403579Z",
     "iopub.status.busy": "2025-04-20T20:32:09.402563Z",
     "iopub.status.idle": "2025-04-20T20:32:09.727020Z",
     "shell.execute_reply": "2025-04-20T20:32:09.725756Z"
    },
    "papermill": {
     "duration": 0.544971,
     "end_time": "2025-04-20T20:32:09.728528",
     "exception": false,
     "start_time": "2025-04-20T20:32:09.183557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ensemble Model Accuracy: 79.49%\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.32      0.47     31288\n",
      "           1       0.78      0.98      0.87     78582\n",
      "\n",
      "    accuracy                           0.79    109870\n",
      "   macro avg       0.83      0.65      0.67    109870\n",
      "weighted avg       0.81      0.79      0.76    109870\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "# Combine predictions (averaging probabilities)\n",
    "ensemble_pred = (svm_pred + mlp_pred + cnn_pred) / 3\n",
    "\n",
    "# Convert to class labels based on threshold\n",
    "ensemble_pred_class = (ensemble_pred > 0.5).astype(int)\n",
    "\n",
    "# Function to print evaluation results\n",
    "def print_results(y_true, y_pred, model_name):\n",
    "    acc = accuracy_score(y_true, y_pred)\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    print(f\"{model_name} Accuracy: {acc:.2%}\")\n",
    "\n",
    "    # Confusion Matrix\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False,\n",
    "                xticklabels=['Predicted Negative', 'Predicted Positive'],\n",
    "                yticklabels=['Actual Negative', 'Actual Positive'])\n",
    "    plt.xlabel(\"Predicted Labels\")\n",
    "    plt.ylabel(\"True Labels\")\n",
    "    plt.title(f\"{model_name} Confusion Matrix\")\n",
    "    plt.show()\n",
    "\n",
    "    # Classification Report\n",
    "    print(\"\\nClassification Report:\")\n",
    "    print(classification_report(y_true, y_pred))\n",
    "\n",
    "# Call the function for ensemble model\n",
    "print_results(y_test, ensemble_pred_class, \"Ensemble Model\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6274456d",
   "metadata": {
    "papermill": {
     "duration": 0.220086,
     "end_time": "2025-04-20T20:32:10.173994",
     "exception": false,
     "start_time": "2025-04-20T20:32:09.953908",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 791543,
     "sourceId": 1359146,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 547.711824,
   "end_time": "2025-04-20T20:32:13.464462",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-20T20:23:05.752638",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
